//--------------------------------------------------------------------------------
// Auto-generated by Migen (562c046) & LiteX (113f7f40) on 2019-07-09 11:09:25
//--------------------------------------------------------------------------------
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_writeb(uint8_t value, unsigned long addr);
extern uint8_t csr_readb(unsigned long addr);
extern void csr_writew(uint16_t value, unsigned long addr);
extern uint16_t csr_readw(unsigned long addr);
extern void csr_writel(uint32_t value, unsigned long addr);
extern uint32_t csr_readl(unsigned long addr);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* ctrl */
#define CSR_CTRL_BASE 0xe0000000L
#define CSR_CTRL_RESET_ADDR 0xe0000000L
#define CSR_CTRL_RESET_SIZE 1
static inline unsigned char ctrl_reset_read(void) {
	unsigned char r = csr_readl(0xe0000000L);
	return r;
}
static inline void ctrl_reset_write(unsigned char value) {
	csr_writel(value, 0xe0000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0xe0000004L
#define CSR_CTRL_SCRATCH_SIZE 4
static inline unsigned int ctrl_scratch_read(void) {
	unsigned int r = csr_readl(0xe0000004L);
	r <<= 8;
	r |= csr_readl(0xe0000008L);
	r <<= 8;
	r |= csr_readl(0xe000000cL);
	r <<= 8;
	r |= csr_readl(0xe0000010L);
	return r;
}
static inline void ctrl_scratch_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0000004L);
	csr_writel(value >> 16, 0xe0000008L);
	csr_writel(value >> 8, 0xe000000cL);
	csr_writel(value, 0xe0000010L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0xe0000014L
#define CSR_CTRL_BUS_ERRORS_SIZE 4
static inline unsigned int ctrl_bus_errors_read(void) {
	unsigned int r = csr_readl(0xe0000014L);
	r <<= 8;
	r |= csr_readl(0xe0000018L);
	r <<= 8;
	r |= csr_readl(0xe000001cL);
	r <<= 8;
	r |= csr_readl(0xe0000020L);
	return r;
}

/* ddrphy */
#define CSR_DDRPHY_BASE 0xe0005800L
#define CSR_DDRPHY_HALF_SYS8X_TAPS_ADDR 0xe0005800L
#define CSR_DDRPHY_HALF_SYS8X_TAPS_SIZE 1
static inline unsigned char ddrphy_half_sys8x_taps_read(void) {
	unsigned char r = csr_readl(0xe0005800L);
	return r;
}
static inline void ddrphy_half_sys8x_taps_write(unsigned char value) {
	csr_writel(value, 0xe0005800L);
}
#define CSR_DDRPHY_CDLY_RST_ADDR 0xe0005804L
#define CSR_DDRPHY_CDLY_RST_SIZE 1
static inline unsigned char ddrphy_cdly_rst_read(void) {
	unsigned char r = csr_readl(0xe0005804L);
	return r;
}
static inline void ddrphy_cdly_rst_write(unsigned char value) {
	csr_writel(value, 0xe0005804L);
}
#define CSR_DDRPHY_CDLY_INC_ADDR 0xe0005808L
#define CSR_DDRPHY_CDLY_INC_SIZE 1
static inline unsigned char ddrphy_cdly_inc_read(void) {
	unsigned char r = csr_readl(0xe0005808L);
	return r;
}
static inline void ddrphy_cdly_inc_write(unsigned char value) {
	csr_writel(value, 0xe0005808L);
}
#define CSR_DDRPHY_DLY_SEL_ADDR 0xe000580cL
#define CSR_DDRPHY_DLY_SEL_SIZE 1
static inline unsigned char ddrphy_dly_sel_read(void) {
	unsigned char r = csr_readl(0xe000580cL);
	return r;
}
static inline void ddrphy_dly_sel_write(unsigned char value) {
	csr_writel(value, 0xe000580cL);
}
#define CSR_DDRPHY_RDLY_DQ_RST_ADDR 0xe0005810L
#define CSR_DDRPHY_RDLY_DQ_RST_SIZE 1
static inline unsigned char ddrphy_rdly_dq_rst_read(void) {
	unsigned char r = csr_readl(0xe0005810L);
	return r;
}
static inline void ddrphy_rdly_dq_rst_write(unsigned char value) {
	csr_writel(value, 0xe0005810L);
}
#define CSR_DDRPHY_RDLY_DQ_INC_ADDR 0xe0005814L
#define CSR_DDRPHY_RDLY_DQ_INC_SIZE 1
static inline unsigned char ddrphy_rdly_dq_inc_read(void) {
	unsigned char r = csr_readl(0xe0005814L);
	return r;
}
static inline void ddrphy_rdly_dq_inc_write(unsigned char value) {
	csr_writel(value, 0xe0005814L);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_ADDR 0xe0005818L
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_RST_SIZE 1
static inline unsigned char ddrphy_rdly_dq_bitslip_rst_read(void) {
	unsigned char r = csr_readl(0xe0005818L);
	return r;
}
static inline void ddrphy_rdly_dq_bitslip_rst_write(unsigned char value) {
	csr_writel(value, 0xe0005818L);
}
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_ADDR 0xe000581cL
#define CSR_DDRPHY_RDLY_DQ_BITSLIP_SIZE 1
static inline unsigned char ddrphy_rdly_dq_bitslip_read(void) {
	unsigned char r = csr_readl(0xe000581cL);
	return r;
}
static inline void ddrphy_rdly_dq_bitslip_write(unsigned char value) {
	csr_writel(value, 0xe000581cL);
}

/* ethmac */
#define CSR_ETHMAC_BASE 0xe0008800L
#define CSR_ETHMAC_SRAM_WRITER_SLOT_ADDR 0xe0008800L
#define CSR_ETHMAC_SRAM_WRITER_SLOT_SIZE 1
static inline unsigned char ethmac_sram_writer_slot_read(void) {
	unsigned char r = csr_readl(0xe0008800L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_ADDR 0xe0008804L
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_SIZE 4
static inline unsigned int ethmac_sram_writer_length_read(void) {
	unsigned int r = csr_readl(0xe0008804L);
	r <<= 8;
	r |= csr_readl(0xe0008808L);
	r <<= 8;
	r |= csr_readl(0xe000880cL);
	r <<= 8;
	r |= csr_readl(0xe0008810L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_ADDR 0xe0008814L
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_SIZE 4
static inline unsigned int ethmac_sram_writer_errors_read(void) {
	unsigned int r = csr_readl(0xe0008814L);
	r <<= 8;
	r |= csr_readl(0xe0008818L);
	r <<= 8;
	r |= csr_readl(0xe000881cL);
	r <<= 8;
	r |= csr_readl(0xe0008820L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_ADDR 0xe0008824L
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_status_read(void) {
	unsigned char r = csr_readl(0xe0008824L);
	return r;
}
static inline void ethmac_sram_writer_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe0008824L);
}
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_ADDR 0xe0008828L
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe0008828L);
	return r;
}
static inline void ethmac_sram_writer_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe0008828L);
}
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_ADDR 0xe000882cL
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe000882cL);
	return r;
}
static inline void ethmac_sram_writer_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe000882cL);
}
#define CSR_ETHMAC_SRAM_READER_START_ADDR 0xe0008830L
#define CSR_ETHMAC_SRAM_READER_START_SIZE 1
static inline unsigned char ethmac_sram_reader_start_read(void) {
	unsigned char r = csr_readl(0xe0008830L);
	return r;
}
static inline void ethmac_sram_reader_start_write(unsigned char value) {
	csr_writel(value, 0xe0008830L);
}
#define CSR_ETHMAC_SRAM_READER_READY_ADDR 0xe0008834L
#define CSR_ETHMAC_SRAM_READER_READY_SIZE 1
static inline unsigned char ethmac_sram_reader_ready_read(void) {
	unsigned char r = csr_readl(0xe0008834L);
	return r;
}
#define CSR_ETHMAC_SRAM_READER_LEVEL_ADDR 0xe0008838L
#define CSR_ETHMAC_SRAM_READER_LEVEL_SIZE 1
static inline unsigned char ethmac_sram_reader_level_read(void) {
	unsigned char r = csr_readl(0xe0008838L);
	return r;
}
#define CSR_ETHMAC_SRAM_READER_SLOT_ADDR 0xe000883cL
#define CSR_ETHMAC_SRAM_READER_SLOT_SIZE 1
static inline unsigned char ethmac_sram_reader_slot_read(void) {
	unsigned char r = csr_readl(0xe000883cL);
	return r;
}
static inline void ethmac_sram_reader_slot_write(unsigned char value) {
	csr_writel(value, 0xe000883cL);
}
#define CSR_ETHMAC_SRAM_READER_LENGTH_ADDR 0xe0008840L
#define CSR_ETHMAC_SRAM_READER_LENGTH_SIZE 2
static inline unsigned short int ethmac_sram_reader_length_read(void) {
	unsigned short int r = csr_readl(0xe0008840L);
	r <<= 8;
	r |= csr_readl(0xe0008844L);
	return r;
}
static inline void ethmac_sram_reader_length_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0008840L);
	csr_writel(value, 0xe0008844L);
}
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_ADDR 0xe0008848L
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_status_read(void) {
	unsigned char r = csr_readl(0xe0008848L);
	return r;
}
static inline void ethmac_sram_reader_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe0008848L);
}
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_ADDR 0xe000884cL
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe000884cL);
	return r;
}
static inline void ethmac_sram_reader_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe000884cL);
}
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_ADDR 0xe0008850L
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe0008850L);
	return r;
}
static inline void ethmac_sram_reader_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe0008850L);
}
#define CSR_ETHMAC_PREAMBLE_CRC_ADDR 0xe0008854L
#define CSR_ETHMAC_PREAMBLE_CRC_SIZE 1
static inline unsigned char ethmac_preamble_crc_read(void) {
	unsigned char r = csr_readl(0xe0008854L);
	return r;
}
#define CSR_ETHMAC_PREAMBLE_ERRORS_ADDR 0xe0008858L
#define CSR_ETHMAC_PREAMBLE_ERRORS_SIZE 4
static inline unsigned int ethmac_preamble_errors_read(void) {
	unsigned int r = csr_readl(0xe0008858L);
	r <<= 8;
	r |= csr_readl(0xe000885cL);
	r <<= 8;
	r |= csr_readl(0xe0008860L);
	r <<= 8;
	r |= csr_readl(0xe0008864L);
	return r;
}
#define CSR_ETHMAC_CRC_ERRORS_ADDR 0xe0008868L
#define CSR_ETHMAC_CRC_ERRORS_SIZE 4
static inline unsigned int ethmac_crc_errors_read(void) {
	unsigned int r = csr_readl(0xe0008868L);
	r <<= 8;
	r |= csr_readl(0xe000886cL);
	r <<= 8;
	r |= csr_readl(0xe0008870L);
	r <<= 8;
	r |= csr_readl(0xe0008874L);
	return r;
}

/* ethphy */
#define CSR_ETHPHY_BASE 0xe0008000L
#define CSR_ETHPHY_CRG_RESET_ADDR 0xe0008000L
#define CSR_ETHPHY_CRG_RESET_SIZE 1
static inline unsigned char ethphy_crg_reset_read(void) {
	unsigned char r = csr_readl(0xe0008000L);
	return r;
}
static inline void ethphy_crg_reset_write(unsigned char value) {
	csr_writel(value, 0xe0008000L);
}
#define CSR_ETHPHY_MDIO_W_ADDR 0xe0008004L
#define CSR_ETHPHY_MDIO_W_SIZE 1
static inline unsigned char ethphy_mdio_w_read(void) {
	unsigned char r = csr_readl(0xe0008004L);
	return r;
}
static inline void ethphy_mdio_w_write(unsigned char value) {
	csr_writel(value, 0xe0008004L);
}
#define CSR_ETHPHY_MDIO_R_ADDR 0xe0008008L
#define CSR_ETHPHY_MDIO_R_SIZE 1
static inline unsigned char ethphy_mdio_r_read(void) {
	unsigned char r = csr_readl(0xe0008008L);
	return r;
}

/* hdmi_in0 */
#define CSR_HDMI_IN0_BASE 0xe0009800L
#define CSR_HDMI_IN0_EDID_HPD_NOTIF_ADDR 0xe0009800L
#define CSR_HDMI_IN0_EDID_HPD_NOTIF_SIZE 1
static inline unsigned char hdmi_in0_edid_hpd_notif_read(void) {
	unsigned char r = csr_readl(0xe0009800L);
	return r;
}
#define CSR_HDMI_IN0_EDID_HPD_EN_ADDR 0xe0009804L
#define CSR_HDMI_IN0_EDID_HPD_EN_SIZE 1
static inline unsigned char hdmi_in0_edid_hpd_en_read(void) {
	unsigned char r = csr_readl(0xe0009804L);
	return r;
}
static inline void hdmi_in0_edid_hpd_en_write(unsigned char value) {
	csr_writel(value, 0xe0009804L);
}
#define CSR_HDMI_IN0_CLOCKING_MMCM_RESET_ADDR 0xe0009808L
#define CSR_HDMI_IN0_CLOCKING_MMCM_RESET_SIZE 1
static inline unsigned char hdmi_in0_clocking_mmcm_reset_read(void) {
	unsigned char r = csr_readl(0xe0009808L);
	return r;
}
static inline void hdmi_in0_clocking_mmcm_reset_write(unsigned char value) {
	csr_writel(value, 0xe0009808L);
}
#define CSR_HDMI_IN0_CLOCKING_LOCKED_ADDR 0xe000980cL
#define CSR_HDMI_IN0_CLOCKING_LOCKED_SIZE 1
static inline unsigned char hdmi_in0_clocking_locked_read(void) {
	unsigned char r = csr_readl(0xe000980cL);
	return r;
}
#define CSR_HDMI_IN0_CLOCKING_MMCM_READ_ADDR 0xe0009810L
#define CSR_HDMI_IN0_CLOCKING_MMCM_READ_SIZE 1
static inline unsigned char hdmi_in0_clocking_mmcm_read_read(void) {
	unsigned char r = csr_readl(0xe0009810L);
	return r;
}
static inline void hdmi_in0_clocking_mmcm_read_write(unsigned char value) {
	csr_writel(value, 0xe0009810L);
}
#define CSR_HDMI_IN0_CLOCKING_MMCM_WRITE_ADDR 0xe0009814L
#define CSR_HDMI_IN0_CLOCKING_MMCM_WRITE_SIZE 1
static inline unsigned char hdmi_in0_clocking_mmcm_write_read(void) {
	unsigned char r = csr_readl(0xe0009814L);
	return r;
}
static inline void hdmi_in0_clocking_mmcm_write_write(unsigned char value) {
	csr_writel(value, 0xe0009814L);
}
#define CSR_HDMI_IN0_CLOCKING_MMCM_DRDY_ADDR 0xe0009818L
#define CSR_HDMI_IN0_CLOCKING_MMCM_DRDY_SIZE 1
static inline unsigned char hdmi_in0_clocking_mmcm_drdy_read(void) {
	unsigned char r = csr_readl(0xe0009818L);
	return r;
}
#define CSR_HDMI_IN0_CLOCKING_MMCM_ADR_ADDR 0xe000981cL
#define CSR_HDMI_IN0_CLOCKING_MMCM_ADR_SIZE 1
static inline unsigned char hdmi_in0_clocking_mmcm_adr_read(void) {
	unsigned char r = csr_readl(0xe000981cL);
	return r;
}
static inline void hdmi_in0_clocking_mmcm_adr_write(unsigned char value) {
	csr_writel(value, 0xe000981cL);
}
#define CSR_HDMI_IN0_CLOCKING_MMCM_DAT_W_ADDR 0xe0009820L
#define CSR_HDMI_IN0_CLOCKING_MMCM_DAT_W_SIZE 2
static inline unsigned short int hdmi_in0_clocking_mmcm_dat_w_read(void) {
	unsigned short int r = csr_readl(0xe0009820L);
	r <<= 8;
	r |= csr_readl(0xe0009824L);
	return r;
}
static inline void hdmi_in0_clocking_mmcm_dat_w_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0009820L);
	csr_writel(value, 0xe0009824L);
}
#define CSR_HDMI_IN0_CLOCKING_MMCM_DAT_R_ADDR 0xe0009828L
#define CSR_HDMI_IN0_CLOCKING_MMCM_DAT_R_SIZE 2
static inline unsigned short int hdmi_in0_clocking_mmcm_dat_r_read(void) {
	unsigned short int r = csr_readl(0xe0009828L);
	r <<= 8;
	r |= csr_readl(0xe000982cL);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_DLY_CTL_ADDR 0xe0009830L
#define CSR_HDMI_IN0_DATA0_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe0009830L);
	return r;
}
static inline void hdmi_in0_data0_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe0009830L);
}
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_ADDR 0xe0009834L
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe0009834L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_RESET_ADDR 0xe0009838L
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe0009838L);
	return r;
}
static inline void hdmi_in0_data0_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe0009838L);
}
#define CSR_HDMI_IN0_DATA0_CAP_CNTVALUEOUT_M_ADDR 0xe000983cL
#define CSR_HDMI_IN0_DATA0_CAP_CNTVALUEOUT_M_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_cntvalueout_m_read(void) {
	unsigned char r = csr_readl(0xe000983cL);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_CNTVALUEOUT_S_ADDR 0xe0009840L
#define CSR_HDMI_IN0_DATA0_CAP_CNTVALUEOUT_S_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_cntvalueout_s_read(void) {
	unsigned char r = csr_readl(0xe0009840L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CHAR_SYNCED_ADDR 0xe0009844L
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data0_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe0009844L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CTL_POS_ADDR 0xe0009848L
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data0_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe0009848L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_WER_UPDATE_ADDR 0xe000984cL
#define CSR_HDMI_IN0_DATA0_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data0_wer_update_read(void) {
	unsigned char r = csr_readl(0xe000984cL);
	return r;
}
static inline void hdmi_in0_data0_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe000984cL);
}
#define CSR_HDMI_IN0_DATA0_WER_VALUE_ADDR 0xe0009850L
#define CSR_HDMI_IN0_DATA0_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data0_wer_value_read(void) {
	unsigned int r = csr_readl(0xe0009850L);
	r <<= 8;
	r |= csr_readl(0xe0009854L);
	r <<= 8;
	r |= csr_readl(0xe0009858L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_DLY_CTL_ADDR 0xe000985cL
#define CSR_HDMI_IN0_DATA1_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe000985cL);
	return r;
}
static inline void hdmi_in0_data1_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe000985cL);
}
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_ADDR 0xe0009860L
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe0009860L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_RESET_ADDR 0xe0009864L
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe0009864L);
	return r;
}
static inline void hdmi_in0_data1_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe0009864L);
}
#define CSR_HDMI_IN0_DATA1_CAP_CNTVALUEOUT_M_ADDR 0xe0009868L
#define CSR_HDMI_IN0_DATA1_CAP_CNTVALUEOUT_M_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_cntvalueout_m_read(void) {
	unsigned char r = csr_readl(0xe0009868L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_CNTVALUEOUT_S_ADDR 0xe000986cL
#define CSR_HDMI_IN0_DATA1_CAP_CNTVALUEOUT_S_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_cntvalueout_s_read(void) {
	unsigned char r = csr_readl(0xe000986cL);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CHAR_SYNCED_ADDR 0xe0009870L
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data1_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe0009870L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CTL_POS_ADDR 0xe0009874L
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data1_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe0009874L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_WER_UPDATE_ADDR 0xe0009878L
#define CSR_HDMI_IN0_DATA1_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data1_wer_update_read(void) {
	unsigned char r = csr_readl(0xe0009878L);
	return r;
}
static inline void hdmi_in0_data1_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe0009878L);
}
#define CSR_HDMI_IN0_DATA1_WER_VALUE_ADDR 0xe000987cL
#define CSR_HDMI_IN0_DATA1_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data1_wer_value_read(void) {
	unsigned int r = csr_readl(0xe000987cL);
	r <<= 8;
	r |= csr_readl(0xe0009880L);
	r <<= 8;
	r |= csr_readl(0xe0009884L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_DLY_CTL_ADDR 0xe0009888L
#define CSR_HDMI_IN0_DATA2_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe0009888L);
	return r;
}
static inline void hdmi_in0_data2_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe0009888L);
}
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_ADDR 0xe000988cL
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe000988cL);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_RESET_ADDR 0xe0009890L
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe0009890L);
	return r;
}
static inline void hdmi_in0_data2_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe0009890L);
}
#define CSR_HDMI_IN0_DATA2_CAP_CNTVALUEOUT_M_ADDR 0xe0009894L
#define CSR_HDMI_IN0_DATA2_CAP_CNTVALUEOUT_M_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_cntvalueout_m_read(void) {
	unsigned char r = csr_readl(0xe0009894L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_CNTVALUEOUT_S_ADDR 0xe0009898L
#define CSR_HDMI_IN0_DATA2_CAP_CNTVALUEOUT_S_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_cntvalueout_s_read(void) {
	unsigned char r = csr_readl(0xe0009898L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CHAR_SYNCED_ADDR 0xe000989cL
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data2_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe000989cL);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CTL_POS_ADDR 0xe00098a0L
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data2_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe00098a0L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_WER_UPDATE_ADDR 0xe00098a4L
#define CSR_HDMI_IN0_DATA2_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data2_wer_update_read(void) {
	unsigned char r = csr_readl(0xe00098a4L);
	return r;
}
static inline void hdmi_in0_data2_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe00098a4L);
}
#define CSR_HDMI_IN0_DATA2_WER_VALUE_ADDR 0xe00098a8L
#define CSR_HDMI_IN0_DATA2_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data2_wer_value_read(void) {
	unsigned int r = csr_readl(0xe00098a8L);
	r <<= 8;
	r |= csr_readl(0xe00098acL);
	r <<= 8;
	r |= csr_readl(0xe00098b0L);
	return r;
}
#define CSR_HDMI_IN0_CHANSYNC_CHANNELS_SYNCED_ADDR 0xe00098b4L
#define CSR_HDMI_IN0_CHANSYNC_CHANNELS_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_chansync_channels_synced_read(void) {
	unsigned char r = csr_readl(0xe00098b4L);
	return r;
}
#define CSR_HDMI_IN0_RESDETECTION_HRES_ADDR 0xe00098b8L
#define CSR_HDMI_IN0_RESDETECTION_HRES_SIZE 2
static inline unsigned short int hdmi_in0_resdetection_hres_read(void) {
	unsigned short int r = csr_readl(0xe00098b8L);
	r <<= 8;
	r |= csr_readl(0xe00098bcL);
	return r;
}
#define CSR_HDMI_IN0_RESDETECTION_VRES_ADDR 0xe00098c0L
#define CSR_HDMI_IN0_RESDETECTION_VRES_SIZE 2
static inline unsigned short int hdmi_in0_resdetection_vres_read(void) {
	unsigned short int r = csr_readl(0xe00098c0L);
	r <<= 8;
	r |= csr_readl(0xe00098c4L);
	return r;
}
#define CSR_HDMI_IN0_FRAME_OVERFLOW_ADDR 0xe00098c8L
#define CSR_HDMI_IN0_FRAME_OVERFLOW_SIZE 1
static inline unsigned char hdmi_in0_frame_overflow_read(void) {
	unsigned char r = csr_readl(0xe00098c8L);
	return r;
}
static inline void hdmi_in0_frame_overflow_write(unsigned char value) {
	csr_writel(value, 0xe00098c8L);
}
#define CSR_HDMI_IN0_DMA_FRAME_SIZE_ADDR 0xe00098ccL
#define CSR_HDMI_IN0_DMA_FRAME_SIZE_SIZE 4
static inline unsigned int hdmi_in0_dma_frame_size_read(void) {
	unsigned int r = csr_readl(0xe00098ccL);
	r <<= 8;
	r |= csr_readl(0xe00098d0L);
	r <<= 8;
	r |= csr_readl(0xe00098d4L);
	r <<= 8;
	r |= csr_readl(0xe00098d8L);
	return r;
}
static inline void hdmi_in0_dma_frame_size_write(unsigned int value) {
	csr_writel(value >> 24, 0xe00098ccL);
	csr_writel(value >> 16, 0xe00098d0L);
	csr_writel(value >> 8, 0xe00098d4L);
	csr_writel(value, 0xe00098d8L);
}
#define CSR_HDMI_IN0_DMA_SLOT0_STATUS_ADDR 0xe00098dcL
#define CSR_HDMI_IN0_DMA_SLOT0_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_slot0_status_read(void) {
	unsigned char r = csr_readl(0xe00098dcL);
	return r;
}
static inline void hdmi_in0_dma_slot0_status_write(unsigned char value) {
	csr_writel(value, 0xe00098dcL);
}
#define CSR_HDMI_IN0_DMA_SLOT0_ADDRESS_ADDR 0xe00098e0L
#define CSR_HDMI_IN0_DMA_SLOT0_ADDRESS_SIZE 4
static inline unsigned int hdmi_in0_dma_slot0_address_read(void) {
	unsigned int r = csr_readl(0xe00098e0L);
	r <<= 8;
	r |= csr_readl(0xe00098e4L);
	r <<= 8;
	r |= csr_readl(0xe00098e8L);
	r <<= 8;
	r |= csr_readl(0xe00098ecL);
	return r;
}
static inline void hdmi_in0_dma_slot0_address_write(unsigned int value) {
	csr_writel(value >> 24, 0xe00098e0L);
	csr_writel(value >> 16, 0xe00098e4L);
	csr_writel(value >> 8, 0xe00098e8L);
	csr_writel(value, 0xe00098ecL);
}
#define CSR_HDMI_IN0_DMA_SLOT1_STATUS_ADDR 0xe00098f0L
#define CSR_HDMI_IN0_DMA_SLOT1_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_slot1_status_read(void) {
	unsigned char r = csr_readl(0xe00098f0L);
	return r;
}
static inline void hdmi_in0_dma_slot1_status_write(unsigned char value) {
	csr_writel(value, 0xe00098f0L);
}
#define CSR_HDMI_IN0_DMA_SLOT1_ADDRESS_ADDR 0xe00098f4L
#define CSR_HDMI_IN0_DMA_SLOT1_ADDRESS_SIZE 4
static inline unsigned int hdmi_in0_dma_slot1_address_read(void) {
	unsigned int r = csr_readl(0xe00098f4L);
	r <<= 8;
	r |= csr_readl(0xe00098f8L);
	r <<= 8;
	r |= csr_readl(0xe00098fcL);
	r <<= 8;
	r |= csr_readl(0xe0009900L);
	return r;
}
static inline void hdmi_in0_dma_slot1_address_write(unsigned int value) {
	csr_writel(value >> 24, 0xe00098f4L);
	csr_writel(value >> 16, 0xe00098f8L);
	csr_writel(value >> 8, 0xe00098fcL);
	csr_writel(value, 0xe0009900L);
}
#define CSR_HDMI_IN0_DMA_EV_STATUS_ADDR 0xe0009904L
#define CSR_HDMI_IN0_DMA_EV_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_status_read(void) {
	unsigned char r = csr_readl(0xe0009904L);
	return r;
}
static inline void hdmi_in0_dma_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe0009904L);
}
#define CSR_HDMI_IN0_DMA_EV_PENDING_ADDR 0xe0009908L
#define CSR_HDMI_IN0_DMA_EV_PENDING_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe0009908L);
	return r;
}
static inline void hdmi_in0_dma_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe0009908L);
}
#define CSR_HDMI_IN0_DMA_EV_ENABLE_ADDR 0xe000990cL
#define CSR_HDMI_IN0_DMA_EV_ENABLE_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe000990cL);
	return r;
}
static inline void hdmi_in0_dma_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe000990cL);
}

/* hdmi_in0_freq */
#define CSR_HDMI_IN0_FREQ_BASE 0xe000a000L
#define CSR_HDMI_IN0_FREQ_VALUE_ADDR 0xe000a000L
#define CSR_HDMI_IN0_FREQ_VALUE_SIZE 4
static inline unsigned int hdmi_in0_freq_value_read(void) {
	unsigned int r = csr_readl(0xe000a000L);
	r <<= 8;
	r |= csr_readl(0xe000a004L);
	r <<= 8;
	r |= csr_readl(0xe000a008L);
	r <<= 8;
	r |= csr_readl(0xe000a00cL);
	return r;
}

/* hdmi_out0 */
#define CSR_HDMI_OUT0_BASE 0xe0009000L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_ENABLE_ADDR 0xe0009000L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_ENABLE_SIZE 1
static inline unsigned char hdmi_out0_core_underflow_enable_read(void) {
	unsigned char r = csr_readl(0xe0009000L);
	return r;
}
static inline void hdmi_out0_core_underflow_enable_write(unsigned char value) {
	csr_writel(value, 0xe0009000L);
}
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_UPDATE_ADDR 0xe0009004L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_UPDATE_SIZE 1
static inline unsigned char hdmi_out0_core_underflow_update_read(void) {
	unsigned char r = csr_readl(0xe0009004L);
	return r;
}
static inline void hdmi_out0_core_underflow_update_write(unsigned char value) {
	csr_writel(value, 0xe0009004L);
}
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_COUNTER_ADDR 0xe0009008L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_COUNTER_SIZE 4
static inline unsigned int hdmi_out0_core_underflow_counter_read(void) {
	unsigned int r = csr_readl(0xe0009008L);
	r <<= 8;
	r |= csr_readl(0xe000900cL);
	r <<= 8;
	r |= csr_readl(0xe0009010L);
	r <<= 8;
	r |= csr_readl(0xe0009014L);
	return r;
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_ENABLE_ADDR 0xe0009018L
#define CSR_HDMI_OUT0_CORE_INITIATOR_ENABLE_SIZE 1
static inline unsigned char hdmi_out0_core_initiator_enable_read(void) {
	unsigned char r = csr_readl(0xe0009018L);
	return r;
}
static inline void hdmi_out0_core_initiator_enable_write(unsigned char value) {
	csr_writel(value, 0xe0009018L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HRES_ADDR 0xe000901cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_HRES_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hres_read(void) {
	unsigned short int r = csr_readl(0xe000901cL);
	r <<= 8;
	r |= csr_readl(0xe0009020L);
	return r;
}
static inline void hdmi_out0_core_initiator_hres_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000901cL);
	csr_writel(value, 0xe0009020L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_START_ADDR 0xe0009024L
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_START_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hsync_start_read(void) {
	unsigned short int r = csr_readl(0xe0009024L);
	r <<= 8;
	r |= csr_readl(0xe0009028L);
	return r;
}
static inline void hdmi_out0_core_initiator_hsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0009024L);
	csr_writel(value, 0xe0009028L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_END_ADDR 0xe000902cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_END_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hsync_end_read(void) {
	unsigned short int r = csr_readl(0xe000902cL);
	r <<= 8;
	r |= csr_readl(0xe0009030L);
	return r;
}
static inline void hdmi_out0_core_initiator_hsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000902cL);
	csr_writel(value, 0xe0009030L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSCAN_ADDR 0xe0009034L
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSCAN_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hscan_read(void) {
	unsigned short int r = csr_readl(0xe0009034L);
	r <<= 8;
	r |= csr_readl(0xe0009038L);
	return r;
}
static inline void hdmi_out0_core_initiator_hscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0009034L);
	csr_writel(value, 0xe0009038L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VRES_ADDR 0xe000903cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_VRES_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vres_read(void) {
	unsigned short int r = csr_readl(0xe000903cL);
	r <<= 8;
	r |= csr_readl(0xe0009040L);
	return r;
}
static inline void hdmi_out0_core_initiator_vres_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000903cL);
	csr_writel(value, 0xe0009040L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_START_ADDR 0xe0009044L
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_START_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vsync_start_read(void) {
	unsigned short int r = csr_readl(0xe0009044L);
	r <<= 8;
	r |= csr_readl(0xe0009048L);
	return r;
}
static inline void hdmi_out0_core_initiator_vsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0009044L);
	csr_writel(value, 0xe0009048L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_END_ADDR 0xe000904cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_END_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vsync_end_read(void) {
	unsigned short int r = csr_readl(0xe000904cL);
	r <<= 8;
	r |= csr_readl(0xe0009050L);
	return r;
}
static inline void hdmi_out0_core_initiator_vsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000904cL);
	csr_writel(value, 0xe0009050L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSCAN_ADDR 0xe0009054L
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSCAN_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vscan_read(void) {
	unsigned short int r = csr_readl(0xe0009054L);
	r <<= 8;
	r |= csr_readl(0xe0009058L);
	return r;
}
static inline void hdmi_out0_core_initiator_vscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0009054L);
	csr_writel(value, 0xe0009058L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_BASE_ADDR 0xe000905cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_BASE_SIZE 4
static inline unsigned int hdmi_out0_core_initiator_base_read(void) {
	unsigned int r = csr_readl(0xe000905cL);
	r <<= 8;
	r |= csr_readl(0xe0009060L);
	r <<= 8;
	r |= csr_readl(0xe0009064L);
	r <<= 8;
	r |= csr_readl(0xe0009068L);
	return r;
}
static inline void hdmi_out0_core_initiator_base_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000905cL);
	csr_writel(value >> 16, 0xe0009060L);
	csr_writel(value >> 8, 0xe0009064L);
	csr_writel(value, 0xe0009068L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_LENGTH_ADDR 0xe000906cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_LENGTH_SIZE 4
static inline unsigned int hdmi_out0_core_initiator_length_read(void) {
	unsigned int r = csr_readl(0xe000906cL);
	r <<= 8;
	r |= csr_readl(0xe0009070L);
	r <<= 8;
	r |= csr_readl(0xe0009074L);
	r <<= 8;
	r |= csr_readl(0xe0009078L);
	return r;
}
static inline void hdmi_out0_core_initiator_length_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000906cL);
	csr_writel(value >> 16, 0xe0009070L);
	csr_writel(value >> 8, 0xe0009074L);
	csr_writel(value, 0xe0009078L);
}
#define CSR_HDMI_OUT0_CORE_DMA_DELAY_BASE_ADDR 0xe000907cL
#define CSR_HDMI_OUT0_CORE_DMA_DELAY_BASE_SIZE 4
static inline unsigned int hdmi_out0_core_dma_delay_base_read(void) {
	unsigned int r = csr_readl(0xe000907cL);
	r <<= 8;
	r |= csr_readl(0xe0009080L);
	r <<= 8;
	r |= csr_readl(0xe0009084L);
	r <<= 8;
	r |= csr_readl(0xe0009088L);
	return r;
}
static inline void hdmi_out0_core_dma_delay_base_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000907cL);
	csr_writel(value >> 16, 0xe0009080L);
	csr_writel(value >> 8, 0xe0009084L);
	csr_writel(value, 0xe0009088L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_RESET_ADDR 0xe000908cL
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_RESET_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_mmcm_reset_read(void) {
	unsigned char r = csr_readl(0xe000908cL);
	return r;
}
static inline void hdmi_out0_driver_clocking_mmcm_reset_write(unsigned char value) {
	csr_writel(value, 0xe000908cL);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_READ_ADDR 0xe0009090L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_READ_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_mmcm_read_read(void) {
	unsigned char r = csr_readl(0xe0009090L);
	return r;
}
static inline void hdmi_out0_driver_clocking_mmcm_read_write(unsigned char value) {
	csr_writel(value, 0xe0009090L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_WRITE_ADDR 0xe0009094L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_WRITE_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_mmcm_write_read(void) {
	unsigned char r = csr_readl(0xe0009094L);
	return r;
}
static inline void hdmi_out0_driver_clocking_mmcm_write_write(unsigned char value) {
	csr_writel(value, 0xe0009094L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_DRDY_ADDR 0xe0009098L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_DRDY_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_mmcm_drdy_read(void) {
	unsigned char r = csr_readl(0xe0009098L);
	return r;
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_ADR_ADDR 0xe000909cL
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_ADR_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_mmcm_adr_read(void) {
	unsigned char r = csr_readl(0xe000909cL);
	return r;
}
static inline void hdmi_out0_driver_clocking_mmcm_adr_write(unsigned char value) {
	csr_writel(value, 0xe000909cL);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_DAT_W_ADDR 0xe00090a0L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_DAT_W_SIZE 2
static inline unsigned short int hdmi_out0_driver_clocking_mmcm_dat_w_read(void) {
	unsigned short int r = csr_readl(0xe00090a0L);
	r <<= 8;
	r |= csr_readl(0xe00090a4L);
	return r;
}
static inline void hdmi_out0_driver_clocking_mmcm_dat_w_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe00090a0L);
	csr_writel(value, 0xe00090a4L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_DAT_R_ADDR 0xe00090a8L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_MMCM_DAT_R_SIZE 2
static inline unsigned short int hdmi_out0_driver_clocking_mmcm_dat_r_read(void) {
	unsigned short int r = csr_readl(0xe00090a8L);
	r <<= 8;
	r |= csr_readl(0xe00090acL);
	return r;
}

/* info */
#define CSR_INFO_BASE 0xe0006000L
#define CSR_INFO_DNA_ID_ADDR 0xe0006000L
#define CSR_INFO_DNA_ID_SIZE 8
static inline unsigned long long int info_dna_id_read(void) {
	unsigned long long int r = csr_readl(0xe0006000L);
	r <<= 8;
	r |= csr_readl(0xe0006004L);
	r <<= 8;
	r |= csr_readl(0xe0006008L);
	r <<= 8;
	r |= csr_readl(0xe000600cL);
	r <<= 8;
	r |= csr_readl(0xe0006010L);
	r <<= 8;
	r |= csr_readl(0xe0006014L);
	r <<= 8;
	r |= csr_readl(0xe0006018L);
	r <<= 8;
	r |= csr_readl(0xe000601cL);
	return r;
}
#define CSR_INFO_GIT_COMMIT_ADDR 0xe0006020L
#define CSR_INFO_GIT_COMMIT_SIZE 20
#define CSR_INFO_PLATFORM_PLATFORM_ADDR 0xe0006070L
#define CSR_INFO_PLATFORM_PLATFORM_SIZE 8
static inline unsigned long long int info_platform_platform_read(void) {
	unsigned long long int r = csr_readl(0xe0006070L);
	r <<= 8;
	r |= csr_readl(0xe0006074L);
	r <<= 8;
	r |= csr_readl(0xe0006078L);
	r <<= 8;
	r |= csr_readl(0xe000607cL);
	r <<= 8;
	r |= csr_readl(0xe0006080L);
	r <<= 8;
	r |= csr_readl(0xe0006084L);
	r <<= 8;
	r |= csr_readl(0xe0006088L);
	r <<= 8;
	r |= csr_readl(0xe000608cL);
	return r;
}
#define CSR_INFO_PLATFORM_TARGET_ADDR 0xe0006090L
#define CSR_INFO_PLATFORM_TARGET_SIZE 8
static inline unsigned long long int info_platform_target_read(void) {
	unsigned long long int r = csr_readl(0xe0006090L);
	r <<= 8;
	r |= csr_readl(0xe0006094L);
	r <<= 8;
	r |= csr_readl(0xe0006098L);
	r <<= 8;
	r |= csr_readl(0xe000609cL);
	r <<= 8;
	r |= csr_readl(0xe00060a0L);
	r <<= 8;
	r |= csr_readl(0xe00060a4L);
	r <<= 8;
	r |= csr_readl(0xe00060a8L);
	r <<= 8;
	r |= csr_readl(0xe00060acL);
	return r;
}
#define CSR_INFO_XADC_TEMPERATURE_ADDR 0xe00060b0L
#define CSR_INFO_XADC_TEMPERATURE_SIZE 2
static inline unsigned short int info_xadc_temperature_read(void) {
	unsigned short int r = csr_readl(0xe00060b0L);
	r <<= 8;
	r |= csr_readl(0xe00060b4L);
	return r;
}
#define CSR_INFO_XADC_VCCINT_ADDR 0xe00060b8L
#define CSR_INFO_XADC_VCCINT_SIZE 2
static inline unsigned short int info_xadc_vccint_read(void) {
	unsigned short int r = csr_readl(0xe00060b8L);
	r <<= 8;
	r |= csr_readl(0xe00060bcL);
	return r;
}
#define CSR_INFO_XADC_VCCAUX_ADDR 0xe00060c0L
#define CSR_INFO_XADC_VCCAUX_SIZE 2
static inline unsigned short int info_xadc_vccaux_read(void) {
	unsigned short int r = csr_readl(0xe00060c0L);
	r <<= 8;
	r |= csr_readl(0xe00060c4L);
	return r;
}
#define CSR_INFO_XADC_VCCBRAM_ADDR 0xe00060c8L
#define CSR_INFO_XADC_VCCBRAM_SIZE 2
static inline unsigned short int info_xadc_vccbram_read(void) {
	unsigned short int r = csr_readl(0xe00060c8L);
	r <<= 8;
	r |= csr_readl(0xe00060ccL);
	return r;
}

/* oled */
#define CSR_OLED_BASE 0xe0006800L
#define CSR_OLED_SPI_CTRL_ADDR 0xe0006800L
#define CSR_OLED_SPI_CTRL_SIZE 1
static inline unsigned char oled_spi_ctrl_read(void) {
	unsigned char r = csr_readl(0xe0006800L);
	return r;
}
static inline void oled_spi_ctrl_write(unsigned char value) {
	csr_writel(value, 0xe0006800L);
}
#define CSR_OLED_SPI_LENGTH_ADDR 0xe0006804L
#define CSR_OLED_SPI_LENGTH_SIZE 1
static inline unsigned char oled_spi_length_read(void) {
	unsigned char r = csr_readl(0xe0006804L);
	return r;
}
static inline void oled_spi_length_write(unsigned char value) {
	csr_writel(value, 0xe0006804L);
}
#define CSR_OLED_SPI_STATUS_ADDR 0xe0006808L
#define CSR_OLED_SPI_STATUS_SIZE 1
static inline unsigned char oled_spi_status_read(void) {
	unsigned char r = csr_readl(0xe0006808L);
	return r;
}
#define CSR_OLED_SPI_MOSI_ADDR 0xe000680cL
#define CSR_OLED_SPI_MOSI_SIZE 1
static inline unsigned char oled_spi_mosi_read(void) {
	unsigned char r = csr_readl(0xe000680cL);
	return r;
}
static inline void oled_spi_mosi_write(unsigned char value) {
	csr_writel(value, 0xe000680cL);
}
#define CSR_OLED_GPIO_OUT_ADDR 0xe0006810L
#define CSR_OLED_GPIO_OUT_SIZE 1
static inline unsigned char oled_gpio_out_read(void) {
	unsigned char r = csr_readl(0xe0006810L);
	return r;
}
static inline void oled_gpio_out_write(unsigned char value) {
	csr_writel(value, 0xe0006810L);
}

/* sdram */
#define CSR_SDRAM_BASE 0xe0004000L
#define CSR_SDRAM_DFII_CONTROL_ADDR 0xe0004000L
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline unsigned char sdram_dfii_control_read(void) {
	unsigned char r = csr_readl(0xe0004000L);
	return r;
}
static inline void sdram_dfii_control_write(unsigned char value) {
	csr_writel(value, 0xe0004000L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR 0xe0004004L
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_read(void) {
	unsigned char r = csr_readl(0xe0004004L);
	return r;
}
static inline void sdram_dfii_pi0_command_write(unsigned char value) {
	csr_writel(value, 0xe0004004L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR 0xe0004008L
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_issue_read(void) {
	unsigned char r = csr_readl(0xe0004008L);
	return r;
}
static inline void sdram_dfii_pi0_command_issue_write(unsigned char value) {
	csr_writel(value, 0xe0004008L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR 0xe000400cL
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi0_address_read(void) {
	unsigned short int r = csr_readl(0xe000400cL);
	r <<= 8;
	r |= csr_readl(0xe0004010L);
	return r;
}
static inline void sdram_dfii_pi0_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000400cL);
	csr_writel(value, 0xe0004010L);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR 0xe0004014L
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi0_baddress_read(void) {
	unsigned char r = csr_readl(0xe0004014L);
	return r;
}
static inline void sdram_dfii_pi0_baddress_write(unsigned char value) {
	csr_writel(value, 0xe0004014L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR 0xe0004018L
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi0_wrdata_read(void) {
	unsigned int r = csr_readl(0xe0004018L);
	r <<= 8;
	r |= csr_readl(0xe000401cL);
	r <<= 8;
	r |= csr_readl(0xe0004020L);
	r <<= 8;
	r |= csr_readl(0xe0004024L);
	return r;
}
static inline void sdram_dfii_pi0_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0004018L);
	csr_writel(value >> 16, 0xe000401cL);
	csr_writel(value >> 8, 0xe0004020L);
	csr_writel(value, 0xe0004024L);
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR 0xe0004028L
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi0_rddata_read(void) {
	unsigned int r = csr_readl(0xe0004028L);
	r <<= 8;
	r |= csr_readl(0xe000402cL);
	r <<= 8;
	r |= csr_readl(0xe0004030L);
	r <<= 8;
	r |= csr_readl(0xe0004034L);
	return r;
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR 0xe0004038L
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi1_command_read(void) {
	unsigned char r = csr_readl(0xe0004038L);
	return r;
}
static inline void sdram_dfii_pi1_command_write(unsigned char value) {
	csr_writel(value, 0xe0004038L);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR 0xe000403cL
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi1_command_issue_read(void) {
	unsigned char r = csr_readl(0xe000403cL);
	return r;
}
static inline void sdram_dfii_pi1_command_issue_write(unsigned char value) {
	csr_writel(value, 0xe000403cL);
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR 0xe0004040L
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi1_address_read(void) {
	unsigned short int r = csr_readl(0xe0004040L);
	r <<= 8;
	r |= csr_readl(0xe0004044L);
	return r;
}
static inline void sdram_dfii_pi1_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0004040L);
	csr_writel(value, 0xe0004044L);
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR 0xe0004048L
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi1_baddress_read(void) {
	unsigned char r = csr_readl(0xe0004048L);
	return r;
}
static inline void sdram_dfii_pi1_baddress_write(unsigned char value) {
	csr_writel(value, 0xe0004048L);
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR 0xe000404cL
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi1_wrdata_read(void) {
	unsigned int r = csr_readl(0xe000404cL);
	r <<= 8;
	r |= csr_readl(0xe0004050L);
	r <<= 8;
	r |= csr_readl(0xe0004054L);
	r <<= 8;
	r |= csr_readl(0xe0004058L);
	return r;
}
static inline void sdram_dfii_pi1_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000404cL);
	csr_writel(value >> 16, 0xe0004050L);
	csr_writel(value >> 8, 0xe0004054L);
	csr_writel(value, 0xe0004058L);
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR 0xe000405cL
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi1_rddata_read(void) {
	unsigned int r = csr_readl(0xe000405cL);
	r <<= 8;
	r |= csr_readl(0xe0004060L);
	r <<= 8;
	r |= csr_readl(0xe0004064L);
	r <<= 8;
	r |= csr_readl(0xe0004068L);
	return r;
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR 0xe000406cL
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi2_command_read(void) {
	unsigned char r = csr_readl(0xe000406cL);
	return r;
}
static inline void sdram_dfii_pi2_command_write(unsigned char value) {
	csr_writel(value, 0xe000406cL);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR 0xe0004070L
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi2_command_issue_read(void) {
	unsigned char r = csr_readl(0xe0004070L);
	return r;
}
static inline void sdram_dfii_pi2_command_issue_write(unsigned char value) {
	csr_writel(value, 0xe0004070L);
}
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR 0xe0004074L
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi2_address_read(void) {
	unsigned short int r = csr_readl(0xe0004074L);
	r <<= 8;
	r |= csr_readl(0xe0004078L);
	return r;
}
static inline void sdram_dfii_pi2_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0004074L);
	csr_writel(value, 0xe0004078L);
}
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR 0xe000407cL
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi2_baddress_read(void) {
	unsigned char r = csr_readl(0xe000407cL);
	return r;
}
static inline void sdram_dfii_pi2_baddress_write(unsigned char value) {
	csr_writel(value, 0xe000407cL);
}
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR 0xe0004080L
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi2_wrdata_read(void) {
	unsigned int r = csr_readl(0xe0004080L);
	r <<= 8;
	r |= csr_readl(0xe0004084L);
	r <<= 8;
	r |= csr_readl(0xe0004088L);
	r <<= 8;
	r |= csr_readl(0xe000408cL);
	return r;
}
static inline void sdram_dfii_pi2_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0004080L);
	csr_writel(value >> 16, 0xe0004084L);
	csr_writel(value >> 8, 0xe0004088L);
	csr_writel(value, 0xe000408cL);
}
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR 0xe0004090L
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi2_rddata_read(void) {
	unsigned int r = csr_readl(0xe0004090L);
	r <<= 8;
	r |= csr_readl(0xe0004094L);
	r <<= 8;
	r |= csr_readl(0xe0004098L);
	r <<= 8;
	r |= csr_readl(0xe000409cL);
	return r;
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR 0xe00040a0L
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi3_command_read(void) {
	unsigned char r = csr_readl(0xe00040a0L);
	return r;
}
static inline void sdram_dfii_pi3_command_write(unsigned char value) {
	csr_writel(value, 0xe00040a0L);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR 0xe00040a4L
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi3_command_issue_read(void) {
	unsigned char r = csr_readl(0xe00040a4L);
	return r;
}
static inline void sdram_dfii_pi3_command_issue_write(unsigned char value) {
	csr_writel(value, 0xe00040a4L);
}
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR 0xe00040a8L
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi3_address_read(void) {
	unsigned short int r = csr_readl(0xe00040a8L);
	r <<= 8;
	r |= csr_readl(0xe00040acL);
	return r;
}
static inline void sdram_dfii_pi3_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe00040a8L);
	csr_writel(value, 0xe00040acL);
}
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR 0xe00040b0L
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi3_baddress_read(void) {
	unsigned char r = csr_readl(0xe00040b0L);
	return r;
}
static inline void sdram_dfii_pi3_baddress_write(unsigned char value) {
	csr_writel(value, 0xe00040b0L);
}
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR 0xe00040b4L
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi3_wrdata_read(void) {
	unsigned int r = csr_readl(0xe00040b4L);
	r <<= 8;
	r |= csr_readl(0xe00040b8L);
	r <<= 8;
	r |= csr_readl(0xe00040bcL);
	r <<= 8;
	r |= csr_readl(0xe00040c0L);
	return r;
}
static inline void sdram_dfii_pi3_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0xe00040b4L);
	csr_writel(value >> 16, 0xe00040b8L);
	csr_writel(value >> 8, 0xe00040bcL);
	csr_writel(value, 0xe00040c0L);
}
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR 0xe00040c4L
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi3_rddata_read(void) {
	unsigned int r = csr_readl(0xe00040c4L);
	r <<= 8;
	r |= csr_readl(0xe00040c8L);
	r <<= 8;
	r |= csr_readl(0xe00040ccL);
	r <<= 8;
	r |= csr_readl(0xe00040d0L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_UPDATE_ADDR 0xe00040d4L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_UPDATE_SIZE 1
static inline unsigned char sdram_controller_bandwidth_update_read(void) {
	unsigned char r = csr_readl(0xe00040d4L);
	return r;
}
static inline void sdram_controller_bandwidth_update_write(unsigned char value) {
	csr_writel(value, 0xe00040d4L);
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NREADS_ADDR 0xe00040d8L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NREADS_SIZE 3
static inline unsigned int sdram_controller_bandwidth_nreads_read(void) {
	unsigned int r = csr_readl(0xe00040d8L);
	r <<= 8;
	r |= csr_readl(0xe00040dcL);
	r <<= 8;
	r |= csr_readl(0xe00040e0L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NWRITES_ADDR 0xe00040e4L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NWRITES_SIZE 3
static inline unsigned int sdram_controller_bandwidth_nwrites_read(void) {
	unsigned int r = csr_readl(0xe00040e4L);
	r <<= 8;
	r |= csr_readl(0xe00040e8L);
	r <<= 8;
	r |= csr_readl(0xe00040ecL);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_DATA_WIDTH_ADDR 0xe00040f0L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_DATA_WIDTH_SIZE 1
static inline unsigned char sdram_controller_bandwidth_data_width_read(void) {
	unsigned char r = csr_readl(0xe00040f0L);
	return r;
}

/* spiflash */
#define CSR_SPIFLASH_BASE 0xe0005000L
#define CSR_SPIFLASH_BITBANG_ADDR 0xe0005000L
#define CSR_SPIFLASH_BITBANG_SIZE 1
static inline unsigned char spiflash_bitbang_read(void) {
	unsigned char r = csr_readl(0xe0005000L);
	return r;
}
static inline void spiflash_bitbang_write(unsigned char value) {
	csr_writel(value, 0xe0005000L);
}
#define CSR_SPIFLASH_MISO_ADDR 0xe0005004L
#define CSR_SPIFLASH_MISO_SIZE 1
static inline unsigned char spiflash_miso_read(void) {
	unsigned char r = csr_readl(0xe0005004L);
	return r;
}
#define CSR_SPIFLASH_BITBANG_EN_ADDR 0xe0005008L
#define CSR_SPIFLASH_BITBANG_EN_SIZE 1
static inline unsigned char spiflash_bitbang_en_read(void) {
	unsigned char r = csr_readl(0xe0005008L);
	return r;
}
static inline void spiflash_bitbang_en_write(unsigned char value) {
	csr_writel(value, 0xe0005008L);
}

/* timer0 */
#define CSR_TIMER0_BASE 0xe0001800L
#define CSR_TIMER0_LOAD_ADDR 0xe0001800L
#define CSR_TIMER0_LOAD_SIZE 4
static inline unsigned int timer0_load_read(void) {
	unsigned int r = csr_readl(0xe0001800L);
	r <<= 8;
	r |= csr_readl(0xe0001804L);
	r <<= 8;
	r |= csr_readl(0xe0001808L);
	r <<= 8;
	r |= csr_readl(0xe000180cL);
	return r;
}
static inline void timer0_load_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0001800L);
	csr_writel(value >> 16, 0xe0001804L);
	csr_writel(value >> 8, 0xe0001808L);
	csr_writel(value, 0xe000180cL);
}
#define CSR_TIMER0_RELOAD_ADDR 0xe0001810L
#define CSR_TIMER0_RELOAD_SIZE 4
static inline unsigned int timer0_reload_read(void) {
	unsigned int r = csr_readl(0xe0001810L);
	r <<= 8;
	r |= csr_readl(0xe0001814L);
	r <<= 8;
	r |= csr_readl(0xe0001818L);
	r <<= 8;
	r |= csr_readl(0xe000181cL);
	return r;
}
static inline void timer0_reload_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0001810L);
	csr_writel(value >> 16, 0xe0001814L);
	csr_writel(value >> 8, 0xe0001818L);
	csr_writel(value, 0xe000181cL);
}
#define CSR_TIMER0_EN_ADDR 0xe0001820L
#define CSR_TIMER0_EN_SIZE 1
static inline unsigned char timer0_en_read(void) {
	unsigned char r = csr_readl(0xe0001820L);
	return r;
}
static inline void timer0_en_write(unsigned char value) {
	csr_writel(value, 0xe0001820L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0xe0001824L
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline unsigned char timer0_update_value_read(void) {
	unsigned char r = csr_readl(0xe0001824L);
	return r;
}
static inline void timer0_update_value_write(unsigned char value) {
	csr_writel(value, 0xe0001824L);
}
#define CSR_TIMER0_VALUE_ADDR 0xe0001828L
#define CSR_TIMER0_VALUE_SIZE 4
static inline unsigned int timer0_value_read(void) {
	unsigned int r = csr_readl(0xe0001828L);
	r <<= 8;
	r |= csr_readl(0xe000182cL);
	r <<= 8;
	r |= csr_readl(0xe0001830L);
	r <<= 8;
	r |= csr_readl(0xe0001834L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0xe0001838L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline unsigned char timer0_ev_status_read(void) {
	unsigned char r = csr_readl(0xe0001838L);
	return r;
}
static inline void timer0_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe0001838L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0xe000183cL
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline unsigned char timer0_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe000183cL);
	return r;
}
static inline void timer0_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe000183cL);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0xe0001840L
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline unsigned char timer0_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe0001840L);
	return r;
}
static inline void timer0_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe0001840L);
}

/* uart */
#define CSR_UART_BASE 0xe0007000L
#define CSR_UART_RXTX_ADDR 0xe0007000L
#define CSR_UART_RXTX_SIZE 1
static inline unsigned char uart_rxtx_read(void) {
	unsigned char r = csr_readl(0xe0007000L);
	return r;
}
static inline void uart_rxtx_write(unsigned char value) {
	csr_writel(value, 0xe0007000L);
}
#define CSR_UART_TXFULL_ADDR 0xe0007004L
#define CSR_UART_TXFULL_SIZE 1
static inline unsigned char uart_txfull_read(void) {
	unsigned char r = csr_readl(0xe0007004L);
	return r;
}
#define CSR_UART_RXEMPTY_ADDR 0xe0007008L
#define CSR_UART_RXEMPTY_SIZE 1
static inline unsigned char uart_rxempty_read(void) {
	unsigned char r = csr_readl(0xe0007008L);
	return r;
}
#define CSR_UART_EV_STATUS_ADDR 0xe000700cL
#define CSR_UART_EV_STATUS_SIZE 1
static inline unsigned char uart_ev_status_read(void) {
	unsigned char r = csr_readl(0xe000700cL);
	return r;
}
static inline void uart_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe000700cL);
}
#define CSR_UART_EV_PENDING_ADDR 0xe0007010L
#define CSR_UART_EV_PENDING_SIZE 1
static inline unsigned char uart_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe0007010L);
	return r;
}
static inline void uart_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe0007010L);
}
#define CSR_UART_EV_ENABLE_ADDR 0xe0007014L
#define CSR_UART_EV_ENABLE_SIZE 1
static inline unsigned char uart_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe0007014L);
	return r;
}
static inline void uart_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe0007014L);
}

/* uart_phy */
#define CSR_UART_PHY_BASE 0xe0007800L
#define CSR_UART_PHY_TUNING_WORD_ADDR 0xe0007800L
#define CSR_UART_PHY_TUNING_WORD_SIZE 4
static inline unsigned int uart_phy_tuning_word_read(void) {
	unsigned int r = csr_readl(0xe0007800L);
	r <<= 8;
	r |= csr_readl(0xe0007804L);
	r <<= 8;
	r |= csr_readl(0xe0007808L);
	r <<= 8;
	r |= csr_readl(0xe000780cL);
	return r;
}
static inline void uart_phy_tuning_word_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0007800L);
	csr_writel(value >> 16, 0xe0007804L);
	csr_writel(value >> 8, 0xe0007808L);
	csr_writel(value, 0xe000780cL);
}

/* hdmi_in0_edid_mem */
#define CSR_HDMI_IN0_EDID_MEM_BASE 0xe000a800L

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE 0xe0001000L

/* constants */
#define ETHMAC_INTERRUPT 2
static inline int ethmac_interrupt_read(void) {
	return 2;
}
#define HDMI_IN0_INTERRUPT 3
static inline int hdmi_in0_interrupt_read(void) {
	return 3;
}
#define TIMER0_INTERRUPT 0
static inline int timer0_interrupt_read(void) {
	return 0;
}
#define UART_INTERRUPT 1
static inline int uart_interrupt_read(void) {
	return 1;
}
#define CSR_DATA_WIDTH 8
static inline int csr_data_width_read(void) {
	return 8;
}
#define SYSTEM_CLOCK_FREQUENCY 100000000
static inline int system_clock_frequency_read(void) {
	return 100000000;
}
#define READ_LEVELING_BITSLIP 3
static inline int read_leveling_bitslip_read(void) {
	return 3;
}
#define READ_LEVELING_DELAY 14
static inline int read_leveling_delay_read(void) {
	return 14;
}
#define L2_SIZE 8192
static inline int l2_size_read(void) {
	return 8192;
}
#define SPIFLASH_PAGE_SIZE 256
static inline int spiflash_page_size_read(void) {
	return 256;
}
#define SPIFLASH_SECTOR_SIZE 65536
static inline int spiflash_sector_size_read(void) {
	return 65536;
}
#define HDMI_IN0_DESCRIPTION "  FIXME in platforms/nexys_video.py\r\n"
static inline const char * hdmi_in0_description_read(void) {
	return "  FIXME in platforms/nexys_video.py\r\n";
}
#define HDMI_IN0_MNEMONIC "RX1"
static inline const char * hdmi_in0_mnemonic_read(void) {
	return "RX1";
}
#define HDMI_OUT0_DESCRIPTION "  FIXME in platforms/nexys_video.py\r\n"
static inline const char * hdmi_out0_description_read(void) {
	return "  FIXME in platforms/nexys_video.py\r\n";
}
#define HDMI_OUT0_MNEMONIC "TX1"
static inline const char * hdmi_out0_mnemonic_read(void) {
	return "TX1";
}
#define LOCALIP1 192
static inline int localip1_read(void) {
	return 192;
}
#define LOCALIP2 168
static inline int localip2_read(void) {
	return 168;
}
#define LOCALIP3 100
static inline int localip3_read(void) {
	return 100;
}
#define LOCALIP4 50
static inline int localip4_read(void) {
	return 50;
}
#define REMOTEIP1 192
static inline int remoteip1_read(void) {
	return 192;
}
#define REMOTEIP2 168
static inline int remoteip2_read(void) {
	return 168;
}
#define REMOTEIP3 100
static inline int remoteip3_read(void) {
	return 100;
}
#define REMOTEIP4 100
static inline int remoteip4_read(void) {
	return 100;
}
#define ETHMAC_RX_SLOTS 2
static inline int ethmac_rx_slots_read(void) {
	return 2;
}
#define ETHMAC_TX_SLOTS 2
static inline int ethmac_tx_slots_read(void) {
	return 2;
}
#define ETHMAC_SLOT_SIZE 2048
static inline int ethmac_slot_size_read(void) {
	return 2048;
}
#define CONFIG_CLOCK_FREQUENCY 100000000
static inline int config_clock_frequency_read(void) {
	return 100000000;
}
#define CONFIG_CPU_RESET_ADDR 0
static inline int config_cpu_reset_addr_read(void) {
	return 0;
}
#define CONFIG_CPU_TYPE "LM32"
static inline const char * config_cpu_type_read(void) {
	return "LM32";
}
#define CONFIG_CSR_DATA_WIDTH 8
static inline int config_csr_data_width_read(void) {
	return 8;
}

#endif
