//--------------------------------------------------------------------------------
// Auto-generated by Migen (562c046) & LiteX (113f7f40) on 2019-07-07 10:39:15
//--------------------------------------------------------------------------------
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_writeb(uint8_t value, unsigned long addr);
extern uint8_t csr_readb(unsigned long addr);
extern void csr_writew(uint16_t value, unsigned long addr);
extern uint16_t csr_readw(unsigned long addr);
extern void csr_writel(uint32_t value, unsigned long addr);
extern uint32_t csr_readl(unsigned long addr);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* ctrl */
#define CSR_CTRL_BASE 0xe0000000L
#define CSR_CTRL_RESET_ADDR 0xe0000000L
#define CSR_CTRL_RESET_SIZE 1
static inline unsigned char ctrl_reset_read(void) {
	unsigned char r = csr_readl(0xe0000000L);
	return r;
}
static inline void ctrl_reset_write(unsigned char value) {
	csr_writel(value, 0xe0000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0xe0000004L
#define CSR_CTRL_SCRATCH_SIZE 4
static inline unsigned int ctrl_scratch_read(void) {
	unsigned int r = csr_readl(0xe0000004L);
	r <<= 8;
	r |= csr_readl(0xe0000008L);
	r <<= 8;
	r |= csr_readl(0xe000000cL);
	r <<= 8;
	r |= csr_readl(0xe0000010L);
	return r;
}
static inline void ctrl_scratch_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0000004L);
	csr_writel(value >> 16, 0xe0000008L);
	csr_writel(value >> 8, 0xe000000cL);
	csr_writel(value, 0xe0000010L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0xe0000014L
#define CSR_CTRL_BUS_ERRORS_SIZE 4
static inline unsigned int ctrl_bus_errors_read(void) {
	unsigned int r = csr_readl(0xe0000014L);
	r <<= 8;
	r |= csr_readl(0xe0000018L);
	r <<= 8;
	r |= csr_readl(0xe000001cL);
	r <<= 8;
	r |= csr_readl(0xe0000020L);
	return r;
}

/* encoder_reader */
#define CSR_ENCODER_READER_BASE 0xe000e800L
#define CSR_ENCODER_READER_BASE_ADDR 0xe000e800L
#define CSR_ENCODER_READER_BASE_SIZE 4
static inline unsigned int encoder_reader_base_read(void) {
	unsigned int r = csr_readl(0xe000e800L);
	r <<= 8;
	r |= csr_readl(0xe000e804L);
	r <<= 8;
	r |= csr_readl(0xe000e808L);
	r <<= 8;
	r |= csr_readl(0xe000e80cL);
	return r;
}
static inline void encoder_reader_base_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000e800L);
	csr_writel(value >> 16, 0xe000e804L);
	csr_writel(value >> 8, 0xe000e808L);
	csr_writel(value, 0xe000e80cL);
}
#define CSR_ENCODER_READER_H_WIDTH_ADDR 0xe000e810L
#define CSR_ENCODER_READER_H_WIDTH_SIZE 2
static inline unsigned short int encoder_reader_h_width_read(void) {
	unsigned short int r = csr_readl(0xe000e810L);
	r <<= 8;
	r |= csr_readl(0xe000e814L);
	return r;
}
static inline void encoder_reader_h_width_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000e810L);
	csr_writel(value, 0xe000e814L);
}
#define CSR_ENCODER_READER_V_WIDTH_ADDR 0xe000e818L
#define CSR_ENCODER_READER_V_WIDTH_SIZE 2
static inline unsigned short int encoder_reader_v_width_read(void) {
	unsigned short int r = csr_readl(0xe000e818L);
	r <<= 8;
	r |= csr_readl(0xe000e81cL);
	return r;
}
static inline void encoder_reader_v_width_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000e818L);
	csr_writel(value, 0xe000e81cL);
}
#define CSR_ENCODER_READER_START_ADDR 0xe000e820L
#define CSR_ENCODER_READER_START_SIZE 1
static inline unsigned char encoder_reader_start_read(void) {
	unsigned char r = csr_readl(0xe000e820L);
	return r;
}
static inline void encoder_reader_start_write(unsigned char value) {
	csr_writel(value, 0xe000e820L);
}
#define CSR_ENCODER_READER_DONE_ADDR 0xe000e824L
#define CSR_ENCODER_READER_DONE_SIZE 1
static inline unsigned char encoder_reader_done_read(void) {
	unsigned char r = csr_readl(0xe000e824L);
	return r;
}

/* ethmac */
#define CSR_ETHMAC_BASE 0xe000a000L
#define CSR_ETHMAC_SRAM_WRITER_SLOT_ADDR 0xe000a000L
#define CSR_ETHMAC_SRAM_WRITER_SLOT_SIZE 1
static inline unsigned char ethmac_sram_writer_slot_read(void) {
	unsigned char r = csr_readl(0xe000a000L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_ADDR 0xe000a004L
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_SIZE 4
static inline unsigned int ethmac_sram_writer_length_read(void) {
	unsigned int r = csr_readl(0xe000a004L);
	r <<= 8;
	r |= csr_readl(0xe000a008L);
	r <<= 8;
	r |= csr_readl(0xe000a00cL);
	r <<= 8;
	r |= csr_readl(0xe000a010L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_ADDR 0xe000a014L
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_SIZE 4
static inline unsigned int ethmac_sram_writer_errors_read(void) {
	unsigned int r = csr_readl(0xe000a014L);
	r <<= 8;
	r |= csr_readl(0xe000a018L);
	r <<= 8;
	r |= csr_readl(0xe000a01cL);
	r <<= 8;
	r |= csr_readl(0xe000a020L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_ADDR 0xe000a024L
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_status_read(void) {
	unsigned char r = csr_readl(0xe000a024L);
	return r;
}
static inline void ethmac_sram_writer_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe000a024L);
}
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_ADDR 0xe000a028L
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe000a028L);
	return r;
}
static inline void ethmac_sram_writer_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe000a028L);
}
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_ADDR 0xe000a02cL
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe000a02cL);
	return r;
}
static inline void ethmac_sram_writer_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe000a02cL);
}
#define CSR_ETHMAC_SRAM_READER_START_ADDR 0xe000a030L
#define CSR_ETHMAC_SRAM_READER_START_SIZE 1
static inline unsigned char ethmac_sram_reader_start_read(void) {
	unsigned char r = csr_readl(0xe000a030L);
	return r;
}
static inline void ethmac_sram_reader_start_write(unsigned char value) {
	csr_writel(value, 0xe000a030L);
}
#define CSR_ETHMAC_SRAM_READER_READY_ADDR 0xe000a034L
#define CSR_ETHMAC_SRAM_READER_READY_SIZE 1
static inline unsigned char ethmac_sram_reader_ready_read(void) {
	unsigned char r = csr_readl(0xe000a034L);
	return r;
}
#define CSR_ETHMAC_SRAM_READER_LEVEL_ADDR 0xe000a038L
#define CSR_ETHMAC_SRAM_READER_LEVEL_SIZE 1
static inline unsigned char ethmac_sram_reader_level_read(void) {
	unsigned char r = csr_readl(0xe000a038L);
	return r;
}
#define CSR_ETHMAC_SRAM_READER_SLOT_ADDR 0xe000a03cL
#define CSR_ETHMAC_SRAM_READER_SLOT_SIZE 1
static inline unsigned char ethmac_sram_reader_slot_read(void) {
	unsigned char r = csr_readl(0xe000a03cL);
	return r;
}
static inline void ethmac_sram_reader_slot_write(unsigned char value) {
	csr_writel(value, 0xe000a03cL);
}
#define CSR_ETHMAC_SRAM_READER_LENGTH_ADDR 0xe000a040L
#define CSR_ETHMAC_SRAM_READER_LENGTH_SIZE 2
static inline unsigned short int ethmac_sram_reader_length_read(void) {
	unsigned short int r = csr_readl(0xe000a040L);
	r <<= 8;
	r |= csr_readl(0xe000a044L);
	return r;
}
static inline void ethmac_sram_reader_length_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a040L);
	csr_writel(value, 0xe000a044L);
}
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_ADDR 0xe000a048L
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_status_read(void) {
	unsigned char r = csr_readl(0xe000a048L);
	return r;
}
static inline void ethmac_sram_reader_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe000a048L);
}
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_ADDR 0xe000a04cL
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe000a04cL);
	return r;
}
static inline void ethmac_sram_reader_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe000a04cL);
}
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_ADDR 0xe000a050L
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe000a050L);
	return r;
}
static inline void ethmac_sram_reader_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe000a050L);
}
#define CSR_ETHMAC_PREAMBLE_CRC_ADDR 0xe000a054L
#define CSR_ETHMAC_PREAMBLE_CRC_SIZE 1
static inline unsigned char ethmac_preamble_crc_read(void) {
	unsigned char r = csr_readl(0xe000a054L);
	return r;
}
#define CSR_ETHMAC_PREAMBLE_ERRORS_ADDR 0xe000a058L
#define CSR_ETHMAC_PREAMBLE_ERRORS_SIZE 4
static inline unsigned int ethmac_preamble_errors_read(void) {
	unsigned int r = csr_readl(0xe000a058L);
	r <<= 8;
	r |= csr_readl(0xe000a05cL);
	r <<= 8;
	r |= csr_readl(0xe000a060L);
	r <<= 8;
	r |= csr_readl(0xe000a064L);
	return r;
}
#define CSR_ETHMAC_CRC_ERRORS_ADDR 0xe000a068L
#define CSR_ETHMAC_CRC_ERRORS_SIZE 4
static inline unsigned int ethmac_crc_errors_read(void) {
	unsigned int r = csr_readl(0xe000a068L);
	r <<= 8;
	r |= csr_readl(0xe000a06cL);
	r <<= 8;
	r |= csr_readl(0xe000a070L);
	r <<= 8;
	r |= csr_readl(0xe000a074L);
	return r;
}

/* ethphy */
#define CSR_ETHPHY_BASE 0xe0009800L
#define CSR_ETHPHY_CRG_RESET_ADDR 0xe0009800L
#define CSR_ETHPHY_CRG_RESET_SIZE 1
static inline unsigned char ethphy_crg_reset_read(void) {
	unsigned char r = csr_readl(0xe0009800L);
	return r;
}
static inline void ethphy_crg_reset_write(unsigned char value) {
	csr_writel(value, 0xe0009800L);
}
#define CSR_ETHPHY_MDIO_W_ADDR 0xe0009804L
#define CSR_ETHPHY_MDIO_W_SIZE 1
static inline unsigned char ethphy_mdio_w_read(void) {
	unsigned char r = csr_readl(0xe0009804L);
	return r;
}
static inline void ethphy_mdio_w_write(unsigned char value) {
	csr_writel(value, 0xe0009804L);
}
#define CSR_ETHPHY_MDIO_R_ADDR 0xe0009808L
#define CSR_ETHPHY_MDIO_R_SIZE 1
static inline unsigned char ethphy_mdio_r_read(void) {
	unsigned char r = csr_readl(0xe0009808L);
	return r;
}

/* front_panel */
#define CSR_FRONT_PANEL_BASE 0xe0005800L
#define CSR_FRONT_PANEL_SWITCHES_IN_ADDR 0xe0005800L
#define CSR_FRONT_PANEL_SWITCHES_IN_SIZE 1
static inline unsigned char front_panel_switches_in_read(void) {
	unsigned char r = csr_readl(0xe0005800L);
	return r;
}
#define CSR_FRONT_PANEL_LEDS_OUT_ADDR 0xe0005804L
#define CSR_FRONT_PANEL_LEDS_OUT_SIZE 1
static inline unsigned char front_panel_leds_out_read(void) {
	unsigned char r = csr_readl(0xe0005804L);
	return r;
}
static inline void front_panel_leds_out_write(unsigned char value) {
	csr_writel(value, 0xe0005804L);
}

/* hdmi_in0 */
#define CSR_HDMI_IN0_BASE 0xe000b800L
#define CSR_HDMI_IN0_EDID_HPD_NOTIF_ADDR 0xe000b800L
#define CSR_HDMI_IN0_EDID_HPD_NOTIF_SIZE 1
static inline unsigned char hdmi_in0_edid_hpd_notif_read(void) {
	unsigned char r = csr_readl(0xe000b800L);
	return r;
}
#define CSR_HDMI_IN0_EDID_HPD_EN_ADDR 0xe000b804L
#define CSR_HDMI_IN0_EDID_HPD_EN_SIZE 1
static inline unsigned char hdmi_in0_edid_hpd_en_read(void) {
	unsigned char r = csr_readl(0xe000b804L);
	return r;
}
static inline void hdmi_in0_edid_hpd_en_write(unsigned char value) {
	csr_writel(value, 0xe000b804L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_RESET_ADDR 0xe000b808L
#define CSR_HDMI_IN0_CLOCKING_PLL_RESET_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_reset_read(void) {
	unsigned char r = csr_readl(0xe000b808L);
	return r;
}
static inline void hdmi_in0_clocking_pll_reset_write(unsigned char value) {
	csr_writel(value, 0xe000b808L);
}
#define CSR_HDMI_IN0_CLOCKING_LOCKED_ADDR 0xe000b80cL
#define CSR_HDMI_IN0_CLOCKING_LOCKED_SIZE 1
static inline unsigned char hdmi_in0_clocking_locked_read(void) {
	unsigned char r = csr_readl(0xe000b80cL);
	return r;
}
#define CSR_HDMI_IN0_CLOCKING_PLL_ADR_ADDR 0xe000b810L
#define CSR_HDMI_IN0_CLOCKING_PLL_ADR_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_adr_read(void) {
	unsigned char r = csr_readl(0xe000b810L);
	return r;
}
static inline void hdmi_in0_clocking_pll_adr_write(unsigned char value) {
	csr_writel(value, 0xe000b810L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_DAT_R_ADDR 0xe000b814L
#define CSR_HDMI_IN0_CLOCKING_PLL_DAT_R_SIZE 2
static inline unsigned short int hdmi_in0_clocking_pll_dat_r_read(void) {
	unsigned short int r = csr_readl(0xe000b814L);
	r <<= 8;
	r |= csr_readl(0xe000b818L);
	return r;
}
#define CSR_HDMI_IN0_CLOCKING_PLL_DAT_W_ADDR 0xe000b81cL
#define CSR_HDMI_IN0_CLOCKING_PLL_DAT_W_SIZE 2
static inline unsigned short int hdmi_in0_clocking_pll_dat_w_read(void) {
	unsigned short int r = csr_readl(0xe000b81cL);
	r <<= 8;
	r |= csr_readl(0xe000b820L);
	return r;
}
static inline void hdmi_in0_clocking_pll_dat_w_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b81cL);
	csr_writel(value, 0xe000b820L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_READ_ADDR 0xe000b824L
#define CSR_HDMI_IN0_CLOCKING_PLL_READ_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_read_read(void) {
	unsigned char r = csr_readl(0xe000b824L);
	return r;
}
static inline void hdmi_in0_clocking_pll_read_write(unsigned char value) {
	csr_writel(value, 0xe000b824L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_WRITE_ADDR 0xe000b828L
#define CSR_HDMI_IN0_CLOCKING_PLL_WRITE_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_write_read(void) {
	unsigned char r = csr_readl(0xe000b828L);
	return r;
}
static inline void hdmi_in0_clocking_pll_write_write(unsigned char value) {
	csr_writel(value, 0xe000b828L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_DRDY_ADDR 0xe000b82cL
#define CSR_HDMI_IN0_CLOCKING_PLL_DRDY_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_drdy_read(void) {
	unsigned char r = csr_readl(0xe000b82cL);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_DLY_CTL_ADDR 0xe000b830L
#define CSR_HDMI_IN0_DATA0_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe000b830L);
	return r;
}
static inline void hdmi_in0_data0_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe000b830L);
}
#define CSR_HDMI_IN0_DATA0_CAP_DLY_BUSY_ADDR 0xe000b834L
#define CSR_HDMI_IN0_DATA0_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0xe000b834L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_ADDR 0xe000b838L
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe000b838L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_RESET_ADDR 0xe000b83cL
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe000b83cL);
	return r;
}
static inline void hdmi_in0_data0_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe000b83cL);
}
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CHAR_SYNCED_ADDR 0xe000b840L
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data0_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe000b840L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CTL_POS_ADDR 0xe000b844L
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data0_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe000b844L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_WER_UPDATE_ADDR 0xe000b848L
#define CSR_HDMI_IN0_DATA0_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data0_wer_update_read(void) {
	unsigned char r = csr_readl(0xe000b848L);
	return r;
}
static inline void hdmi_in0_data0_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe000b848L);
}
#define CSR_HDMI_IN0_DATA0_WER_VALUE_ADDR 0xe000b84cL
#define CSR_HDMI_IN0_DATA0_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data0_wer_value_read(void) {
	unsigned int r = csr_readl(0xe000b84cL);
	r <<= 8;
	r |= csr_readl(0xe000b850L);
	r <<= 8;
	r |= csr_readl(0xe000b854L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_DLY_CTL_ADDR 0xe000b858L
#define CSR_HDMI_IN0_DATA1_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe000b858L);
	return r;
}
static inline void hdmi_in0_data1_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe000b858L);
}
#define CSR_HDMI_IN0_DATA1_CAP_DLY_BUSY_ADDR 0xe000b85cL
#define CSR_HDMI_IN0_DATA1_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0xe000b85cL);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_ADDR 0xe000b860L
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe000b860L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_RESET_ADDR 0xe000b864L
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe000b864L);
	return r;
}
static inline void hdmi_in0_data1_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe000b864L);
}
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CHAR_SYNCED_ADDR 0xe000b868L
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data1_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe000b868L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CTL_POS_ADDR 0xe000b86cL
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data1_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe000b86cL);
	return r;
}
#define CSR_HDMI_IN0_DATA1_WER_UPDATE_ADDR 0xe000b870L
#define CSR_HDMI_IN0_DATA1_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data1_wer_update_read(void) {
	unsigned char r = csr_readl(0xe000b870L);
	return r;
}
static inline void hdmi_in0_data1_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe000b870L);
}
#define CSR_HDMI_IN0_DATA1_WER_VALUE_ADDR 0xe000b874L
#define CSR_HDMI_IN0_DATA1_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data1_wer_value_read(void) {
	unsigned int r = csr_readl(0xe000b874L);
	r <<= 8;
	r |= csr_readl(0xe000b878L);
	r <<= 8;
	r |= csr_readl(0xe000b87cL);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_DLY_CTL_ADDR 0xe000b880L
#define CSR_HDMI_IN0_DATA2_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe000b880L);
	return r;
}
static inline void hdmi_in0_data2_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe000b880L);
}
#define CSR_HDMI_IN0_DATA2_CAP_DLY_BUSY_ADDR 0xe000b884L
#define CSR_HDMI_IN0_DATA2_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0xe000b884L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_ADDR 0xe000b888L
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe000b888L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_RESET_ADDR 0xe000b88cL
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe000b88cL);
	return r;
}
static inline void hdmi_in0_data2_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe000b88cL);
}
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CHAR_SYNCED_ADDR 0xe000b890L
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data2_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe000b890L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CTL_POS_ADDR 0xe000b894L
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data2_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe000b894L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_WER_UPDATE_ADDR 0xe000b898L
#define CSR_HDMI_IN0_DATA2_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data2_wer_update_read(void) {
	unsigned char r = csr_readl(0xe000b898L);
	return r;
}
static inline void hdmi_in0_data2_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe000b898L);
}
#define CSR_HDMI_IN0_DATA2_WER_VALUE_ADDR 0xe000b89cL
#define CSR_HDMI_IN0_DATA2_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data2_wer_value_read(void) {
	unsigned int r = csr_readl(0xe000b89cL);
	r <<= 8;
	r |= csr_readl(0xe000b8a0L);
	r <<= 8;
	r |= csr_readl(0xe000b8a4L);
	return r;
}
#define CSR_HDMI_IN0_CHANSYNC_CHANNELS_SYNCED_ADDR 0xe000b8a8L
#define CSR_HDMI_IN0_CHANSYNC_CHANNELS_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_chansync_channels_synced_read(void) {
	unsigned char r = csr_readl(0xe000b8a8L);
	return r;
}
#define CSR_HDMI_IN0_RESDETECTION_HRES_ADDR 0xe000b8acL
#define CSR_HDMI_IN0_RESDETECTION_HRES_SIZE 2
static inline unsigned short int hdmi_in0_resdetection_hres_read(void) {
	unsigned short int r = csr_readl(0xe000b8acL);
	r <<= 8;
	r |= csr_readl(0xe000b8b0L);
	return r;
}
#define CSR_HDMI_IN0_RESDETECTION_VRES_ADDR 0xe000b8b4L
#define CSR_HDMI_IN0_RESDETECTION_VRES_SIZE 2
static inline unsigned short int hdmi_in0_resdetection_vres_read(void) {
	unsigned short int r = csr_readl(0xe000b8b4L);
	r <<= 8;
	r |= csr_readl(0xe000b8b8L);
	return r;
}
#define CSR_HDMI_IN0_FRAME_OVERFLOW_ADDR 0xe000b8bcL
#define CSR_HDMI_IN0_FRAME_OVERFLOW_SIZE 1
static inline unsigned char hdmi_in0_frame_overflow_read(void) {
	unsigned char r = csr_readl(0xe000b8bcL);
	return r;
}
static inline void hdmi_in0_frame_overflow_write(unsigned char value) {
	csr_writel(value, 0xe000b8bcL);
}
#define CSR_HDMI_IN0_DMA_FRAME_SIZE_ADDR 0xe000b8c0L
#define CSR_HDMI_IN0_DMA_FRAME_SIZE_SIZE 4
static inline unsigned int hdmi_in0_dma_frame_size_read(void) {
	unsigned int r = csr_readl(0xe000b8c0L);
	r <<= 8;
	r |= csr_readl(0xe000b8c4L);
	r <<= 8;
	r |= csr_readl(0xe000b8c8L);
	r <<= 8;
	r |= csr_readl(0xe000b8ccL);
	return r;
}
static inline void hdmi_in0_dma_frame_size_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000b8c0L);
	csr_writel(value >> 16, 0xe000b8c4L);
	csr_writel(value >> 8, 0xe000b8c8L);
	csr_writel(value, 0xe000b8ccL);
}
#define CSR_HDMI_IN0_DMA_SLOT0_STATUS_ADDR 0xe000b8d0L
#define CSR_HDMI_IN0_DMA_SLOT0_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_slot0_status_read(void) {
	unsigned char r = csr_readl(0xe000b8d0L);
	return r;
}
static inline void hdmi_in0_dma_slot0_status_write(unsigned char value) {
	csr_writel(value, 0xe000b8d0L);
}
#define CSR_HDMI_IN0_DMA_SLOT0_ADDRESS_ADDR 0xe000b8d4L
#define CSR_HDMI_IN0_DMA_SLOT0_ADDRESS_SIZE 4
static inline unsigned int hdmi_in0_dma_slot0_address_read(void) {
	unsigned int r = csr_readl(0xe000b8d4L);
	r <<= 8;
	r |= csr_readl(0xe000b8d8L);
	r <<= 8;
	r |= csr_readl(0xe000b8dcL);
	r <<= 8;
	r |= csr_readl(0xe000b8e0L);
	return r;
}
static inline void hdmi_in0_dma_slot0_address_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000b8d4L);
	csr_writel(value >> 16, 0xe000b8d8L);
	csr_writel(value >> 8, 0xe000b8dcL);
	csr_writel(value, 0xe000b8e0L);
}
#define CSR_HDMI_IN0_DMA_SLOT1_STATUS_ADDR 0xe000b8e4L
#define CSR_HDMI_IN0_DMA_SLOT1_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_slot1_status_read(void) {
	unsigned char r = csr_readl(0xe000b8e4L);
	return r;
}
static inline void hdmi_in0_dma_slot1_status_write(unsigned char value) {
	csr_writel(value, 0xe000b8e4L);
}
#define CSR_HDMI_IN0_DMA_SLOT1_ADDRESS_ADDR 0xe000b8e8L
#define CSR_HDMI_IN0_DMA_SLOT1_ADDRESS_SIZE 4
static inline unsigned int hdmi_in0_dma_slot1_address_read(void) {
	unsigned int r = csr_readl(0xe000b8e8L);
	r <<= 8;
	r |= csr_readl(0xe000b8ecL);
	r <<= 8;
	r |= csr_readl(0xe000b8f0L);
	r <<= 8;
	r |= csr_readl(0xe000b8f4L);
	return r;
}
static inline void hdmi_in0_dma_slot1_address_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000b8e8L);
	csr_writel(value >> 16, 0xe000b8ecL);
	csr_writel(value >> 8, 0xe000b8f0L);
	csr_writel(value, 0xe000b8f4L);
}
#define CSR_HDMI_IN0_DMA_EV_STATUS_ADDR 0xe000b8f8L
#define CSR_HDMI_IN0_DMA_EV_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_status_read(void) {
	unsigned char r = csr_readl(0xe000b8f8L);
	return r;
}
static inline void hdmi_in0_dma_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe000b8f8L);
}
#define CSR_HDMI_IN0_DMA_EV_PENDING_ADDR 0xe000b8fcL
#define CSR_HDMI_IN0_DMA_EV_PENDING_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe000b8fcL);
	return r;
}
static inline void hdmi_in0_dma_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe000b8fcL);
}
#define CSR_HDMI_IN0_DMA_EV_ENABLE_ADDR 0xe000b900L
#define CSR_HDMI_IN0_DMA_EV_ENABLE_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe000b900L);
	return r;
}
static inline void hdmi_in0_dma_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe000b900L);
}

/* hdmi_in0_freq */
#define CSR_HDMI_IN0_FREQ_BASE 0xe000c000L
#define CSR_HDMI_IN0_FREQ_VALUE_ADDR 0xe000c000L
#define CSR_HDMI_IN0_FREQ_VALUE_SIZE 4
static inline unsigned int hdmi_in0_freq_value_read(void) {
	unsigned int r = csr_readl(0xe000c000L);
	r <<= 8;
	r |= csr_readl(0xe000c004L);
	r <<= 8;
	r |= csr_readl(0xe000c008L);
	r <<= 8;
	r |= csr_readl(0xe000c00cL);
	return r;
}

/* hdmi_in1 */
#define CSR_HDMI_IN1_BASE 0xe000d000L
#define CSR_HDMI_IN1_EDID_HPD_NOTIF_ADDR 0xe000d000L
#define CSR_HDMI_IN1_EDID_HPD_NOTIF_SIZE 1
static inline unsigned char hdmi_in1_edid_hpd_notif_read(void) {
	unsigned char r = csr_readl(0xe000d000L);
	return r;
}
#define CSR_HDMI_IN1_EDID_HPD_EN_ADDR 0xe000d004L
#define CSR_HDMI_IN1_EDID_HPD_EN_SIZE 1
static inline unsigned char hdmi_in1_edid_hpd_en_read(void) {
	unsigned char r = csr_readl(0xe000d004L);
	return r;
}
static inline void hdmi_in1_edid_hpd_en_write(unsigned char value) {
	csr_writel(value, 0xe000d004L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_RESET_ADDR 0xe000d008L
#define CSR_HDMI_IN1_CLOCKING_PLL_RESET_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_reset_read(void) {
	unsigned char r = csr_readl(0xe000d008L);
	return r;
}
static inline void hdmi_in1_clocking_pll_reset_write(unsigned char value) {
	csr_writel(value, 0xe000d008L);
}
#define CSR_HDMI_IN1_CLOCKING_LOCKED_ADDR 0xe000d00cL
#define CSR_HDMI_IN1_CLOCKING_LOCKED_SIZE 1
static inline unsigned char hdmi_in1_clocking_locked_read(void) {
	unsigned char r = csr_readl(0xe000d00cL);
	return r;
}
#define CSR_HDMI_IN1_CLOCKING_PLL_ADR_ADDR 0xe000d010L
#define CSR_HDMI_IN1_CLOCKING_PLL_ADR_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_adr_read(void) {
	unsigned char r = csr_readl(0xe000d010L);
	return r;
}
static inline void hdmi_in1_clocking_pll_adr_write(unsigned char value) {
	csr_writel(value, 0xe000d010L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_DAT_R_ADDR 0xe000d014L
#define CSR_HDMI_IN1_CLOCKING_PLL_DAT_R_SIZE 2
static inline unsigned short int hdmi_in1_clocking_pll_dat_r_read(void) {
	unsigned short int r = csr_readl(0xe000d014L);
	r <<= 8;
	r |= csr_readl(0xe000d018L);
	return r;
}
#define CSR_HDMI_IN1_CLOCKING_PLL_DAT_W_ADDR 0xe000d01cL
#define CSR_HDMI_IN1_CLOCKING_PLL_DAT_W_SIZE 2
static inline unsigned short int hdmi_in1_clocking_pll_dat_w_read(void) {
	unsigned short int r = csr_readl(0xe000d01cL);
	r <<= 8;
	r |= csr_readl(0xe000d020L);
	return r;
}
static inline void hdmi_in1_clocking_pll_dat_w_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000d01cL);
	csr_writel(value, 0xe000d020L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_READ_ADDR 0xe000d024L
#define CSR_HDMI_IN1_CLOCKING_PLL_READ_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_read_read(void) {
	unsigned char r = csr_readl(0xe000d024L);
	return r;
}
static inline void hdmi_in1_clocking_pll_read_write(unsigned char value) {
	csr_writel(value, 0xe000d024L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_WRITE_ADDR 0xe000d028L
#define CSR_HDMI_IN1_CLOCKING_PLL_WRITE_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_write_read(void) {
	unsigned char r = csr_readl(0xe000d028L);
	return r;
}
static inline void hdmi_in1_clocking_pll_write_write(unsigned char value) {
	csr_writel(value, 0xe000d028L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_DRDY_ADDR 0xe000d02cL
#define CSR_HDMI_IN1_CLOCKING_PLL_DRDY_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_drdy_read(void) {
	unsigned char r = csr_readl(0xe000d02cL);
	return r;
}
#define CSR_HDMI_IN1_DATA0_CAP_DLY_CTL_ADDR 0xe000d030L
#define CSR_HDMI_IN1_DATA0_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in1_data0_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe000d030L);
	return r;
}
static inline void hdmi_in1_data0_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe000d030L);
}
#define CSR_HDMI_IN1_DATA0_CAP_DLY_BUSY_ADDR 0xe000d034L
#define CSR_HDMI_IN1_DATA0_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in1_data0_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0xe000d034L);
	return r;
}
#define CSR_HDMI_IN1_DATA0_CAP_PHASE_ADDR 0xe000d038L
#define CSR_HDMI_IN1_DATA0_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in1_data0_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe000d038L);
	return r;
}
#define CSR_HDMI_IN1_DATA0_CAP_PHASE_RESET_ADDR 0xe000d03cL
#define CSR_HDMI_IN1_DATA0_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in1_data0_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe000d03cL);
	return r;
}
static inline void hdmi_in1_data0_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe000d03cL);
}
#define CSR_HDMI_IN1_DATA0_CHARSYNC_CHAR_SYNCED_ADDR 0xe000d040L
#define CSR_HDMI_IN1_DATA0_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in1_data0_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe000d040L);
	return r;
}
#define CSR_HDMI_IN1_DATA0_CHARSYNC_CTL_POS_ADDR 0xe000d044L
#define CSR_HDMI_IN1_DATA0_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in1_data0_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe000d044L);
	return r;
}
#define CSR_HDMI_IN1_DATA0_WER_UPDATE_ADDR 0xe000d048L
#define CSR_HDMI_IN1_DATA0_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in1_data0_wer_update_read(void) {
	unsigned char r = csr_readl(0xe000d048L);
	return r;
}
static inline void hdmi_in1_data0_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe000d048L);
}
#define CSR_HDMI_IN1_DATA0_WER_VALUE_ADDR 0xe000d04cL
#define CSR_HDMI_IN1_DATA0_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in1_data0_wer_value_read(void) {
	unsigned int r = csr_readl(0xe000d04cL);
	r <<= 8;
	r |= csr_readl(0xe000d050L);
	r <<= 8;
	r |= csr_readl(0xe000d054L);
	return r;
}
#define CSR_HDMI_IN1_DATA1_CAP_DLY_CTL_ADDR 0xe000d058L
#define CSR_HDMI_IN1_DATA1_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in1_data1_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe000d058L);
	return r;
}
static inline void hdmi_in1_data1_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe000d058L);
}
#define CSR_HDMI_IN1_DATA1_CAP_DLY_BUSY_ADDR 0xe000d05cL
#define CSR_HDMI_IN1_DATA1_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in1_data1_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0xe000d05cL);
	return r;
}
#define CSR_HDMI_IN1_DATA1_CAP_PHASE_ADDR 0xe000d060L
#define CSR_HDMI_IN1_DATA1_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in1_data1_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe000d060L);
	return r;
}
#define CSR_HDMI_IN1_DATA1_CAP_PHASE_RESET_ADDR 0xe000d064L
#define CSR_HDMI_IN1_DATA1_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in1_data1_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe000d064L);
	return r;
}
static inline void hdmi_in1_data1_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe000d064L);
}
#define CSR_HDMI_IN1_DATA1_CHARSYNC_CHAR_SYNCED_ADDR 0xe000d068L
#define CSR_HDMI_IN1_DATA1_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in1_data1_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe000d068L);
	return r;
}
#define CSR_HDMI_IN1_DATA1_CHARSYNC_CTL_POS_ADDR 0xe000d06cL
#define CSR_HDMI_IN1_DATA1_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in1_data1_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe000d06cL);
	return r;
}
#define CSR_HDMI_IN1_DATA1_WER_UPDATE_ADDR 0xe000d070L
#define CSR_HDMI_IN1_DATA1_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in1_data1_wer_update_read(void) {
	unsigned char r = csr_readl(0xe000d070L);
	return r;
}
static inline void hdmi_in1_data1_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe000d070L);
}
#define CSR_HDMI_IN1_DATA1_WER_VALUE_ADDR 0xe000d074L
#define CSR_HDMI_IN1_DATA1_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in1_data1_wer_value_read(void) {
	unsigned int r = csr_readl(0xe000d074L);
	r <<= 8;
	r |= csr_readl(0xe000d078L);
	r <<= 8;
	r |= csr_readl(0xe000d07cL);
	return r;
}
#define CSR_HDMI_IN1_DATA2_CAP_DLY_CTL_ADDR 0xe000d080L
#define CSR_HDMI_IN1_DATA2_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in1_data2_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0xe000d080L);
	return r;
}
static inline void hdmi_in1_data2_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0xe000d080L);
}
#define CSR_HDMI_IN1_DATA2_CAP_DLY_BUSY_ADDR 0xe000d084L
#define CSR_HDMI_IN1_DATA2_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in1_data2_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0xe000d084L);
	return r;
}
#define CSR_HDMI_IN1_DATA2_CAP_PHASE_ADDR 0xe000d088L
#define CSR_HDMI_IN1_DATA2_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in1_data2_cap_phase_read(void) {
	unsigned char r = csr_readl(0xe000d088L);
	return r;
}
#define CSR_HDMI_IN1_DATA2_CAP_PHASE_RESET_ADDR 0xe000d08cL
#define CSR_HDMI_IN1_DATA2_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in1_data2_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0xe000d08cL);
	return r;
}
static inline void hdmi_in1_data2_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0xe000d08cL);
}
#define CSR_HDMI_IN1_DATA2_CHARSYNC_CHAR_SYNCED_ADDR 0xe000d090L
#define CSR_HDMI_IN1_DATA2_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in1_data2_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0xe000d090L);
	return r;
}
#define CSR_HDMI_IN1_DATA2_CHARSYNC_CTL_POS_ADDR 0xe000d094L
#define CSR_HDMI_IN1_DATA2_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in1_data2_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0xe000d094L);
	return r;
}
#define CSR_HDMI_IN1_DATA2_WER_UPDATE_ADDR 0xe000d098L
#define CSR_HDMI_IN1_DATA2_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in1_data2_wer_update_read(void) {
	unsigned char r = csr_readl(0xe000d098L);
	return r;
}
static inline void hdmi_in1_data2_wer_update_write(unsigned char value) {
	csr_writel(value, 0xe000d098L);
}
#define CSR_HDMI_IN1_DATA2_WER_VALUE_ADDR 0xe000d09cL
#define CSR_HDMI_IN1_DATA2_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in1_data2_wer_value_read(void) {
	unsigned int r = csr_readl(0xe000d09cL);
	r <<= 8;
	r |= csr_readl(0xe000d0a0L);
	r <<= 8;
	r |= csr_readl(0xe000d0a4L);
	return r;
}
#define CSR_HDMI_IN1_CHANSYNC_CHANNELS_SYNCED_ADDR 0xe000d0a8L
#define CSR_HDMI_IN1_CHANSYNC_CHANNELS_SYNCED_SIZE 1
static inline unsigned char hdmi_in1_chansync_channels_synced_read(void) {
	unsigned char r = csr_readl(0xe000d0a8L);
	return r;
}
#define CSR_HDMI_IN1_RESDETECTION_HRES_ADDR 0xe000d0acL
#define CSR_HDMI_IN1_RESDETECTION_HRES_SIZE 2
static inline unsigned short int hdmi_in1_resdetection_hres_read(void) {
	unsigned short int r = csr_readl(0xe000d0acL);
	r <<= 8;
	r |= csr_readl(0xe000d0b0L);
	return r;
}
#define CSR_HDMI_IN1_RESDETECTION_VRES_ADDR 0xe000d0b4L
#define CSR_HDMI_IN1_RESDETECTION_VRES_SIZE 2
static inline unsigned short int hdmi_in1_resdetection_vres_read(void) {
	unsigned short int r = csr_readl(0xe000d0b4L);
	r <<= 8;
	r |= csr_readl(0xe000d0b8L);
	return r;
}
#define CSR_HDMI_IN1_FRAME_OVERFLOW_ADDR 0xe000d0bcL
#define CSR_HDMI_IN1_FRAME_OVERFLOW_SIZE 1
static inline unsigned char hdmi_in1_frame_overflow_read(void) {
	unsigned char r = csr_readl(0xe000d0bcL);
	return r;
}
static inline void hdmi_in1_frame_overflow_write(unsigned char value) {
	csr_writel(value, 0xe000d0bcL);
}
#define CSR_HDMI_IN1_DMA_FRAME_SIZE_ADDR 0xe000d0c0L
#define CSR_HDMI_IN1_DMA_FRAME_SIZE_SIZE 4
static inline unsigned int hdmi_in1_dma_frame_size_read(void) {
	unsigned int r = csr_readl(0xe000d0c0L);
	r <<= 8;
	r |= csr_readl(0xe000d0c4L);
	r <<= 8;
	r |= csr_readl(0xe000d0c8L);
	r <<= 8;
	r |= csr_readl(0xe000d0ccL);
	return r;
}
static inline void hdmi_in1_dma_frame_size_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000d0c0L);
	csr_writel(value >> 16, 0xe000d0c4L);
	csr_writel(value >> 8, 0xe000d0c8L);
	csr_writel(value, 0xe000d0ccL);
}
#define CSR_HDMI_IN1_DMA_SLOT0_STATUS_ADDR 0xe000d0d0L
#define CSR_HDMI_IN1_DMA_SLOT0_STATUS_SIZE 1
static inline unsigned char hdmi_in1_dma_slot0_status_read(void) {
	unsigned char r = csr_readl(0xe000d0d0L);
	return r;
}
static inline void hdmi_in1_dma_slot0_status_write(unsigned char value) {
	csr_writel(value, 0xe000d0d0L);
}
#define CSR_HDMI_IN1_DMA_SLOT0_ADDRESS_ADDR 0xe000d0d4L
#define CSR_HDMI_IN1_DMA_SLOT0_ADDRESS_SIZE 4
static inline unsigned int hdmi_in1_dma_slot0_address_read(void) {
	unsigned int r = csr_readl(0xe000d0d4L);
	r <<= 8;
	r |= csr_readl(0xe000d0d8L);
	r <<= 8;
	r |= csr_readl(0xe000d0dcL);
	r <<= 8;
	r |= csr_readl(0xe000d0e0L);
	return r;
}
static inline void hdmi_in1_dma_slot0_address_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000d0d4L);
	csr_writel(value >> 16, 0xe000d0d8L);
	csr_writel(value >> 8, 0xe000d0dcL);
	csr_writel(value, 0xe000d0e0L);
}
#define CSR_HDMI_IN1_DMA_SLOT1_STATUS_ADDR 0xe000d0e4L
#define CSR_HDMI_IN1_DMA_SLOT1_STATUS_SIZE 1
static inline unsigned char hdmi_in1_dma_slot1_status_read(void) {
	unsigned char r = csr_readl(0xe000d0e4L);
	return r;
}
static inline void hdmi_in1_dma_slot1_status_write(unsigned char value) {
	csr_writel(value, 0xe000d0e4L);
}
#define CSR_HDMI_IN1_DMA_SLOT1_ADDRESS_ADDR 0xe000d0e8L
#define CSR_HDMI_IN1_DMA_SLOT1_ADDRESS_SIZE 4
static inline unsigned int hdmi_in1_dma_slot1_address_read(void) {
	unsigned int r = csr_readl(0xe000d0e8L);
	r <<= 8;
	r |= csr_readl(0xe000d0ecL);
	r <<= 8;
	r |= csr_readl(0xe000d0f0L);
	r <<= 8;
	r |= csr_readl(0xe000d0f4L);
	return r;
}
static inline void hdmi_in1_dma_slot1_address_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000d0e8L);
	csr_writel(value >> 16, 0xe000d0ecL);
	csr_writel(value >> 8, 0xe000d0f0L);
	csr_writel(value, 0xe000d0f4L);
}
#define CSR_HDMI_IN1_DMA_EV_STATUS_ADDR 0xe000d0f8L
#define CSR_HDMI_IN1_DMA_EV_STATUS_SIZE 1
static inline unsigned char hdmi_in1_dma_ev_status_read(void) {
	unsigned char r = csr_readl(0xe000d0f8L);
	return r;
}
static inline void hdmi_in1_dma_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe000d0f8L);
}
#define CSR_HDMI_IN1_DMA_EV_PENDING_ADDR 0xe000d0fcL
#define CSR_HDMI_IN1_DMA_EV_PENDING_SIZE 1
static inline unsigned char hdmi_in1_dma_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe000d0fcL);
	return r;
}
static inline void hdmi_in1_dma_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe000d0fcL);
}
#define CSR_HDMI_IN1_DMA_EV_ENABLE_ADDR 0xe000d100L
#define CSR_HDMI_IN1_DMA_EV_ENABLE_SIZE 1
static inline unsigned char hdmi_in1_dma_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe000d100L);
	return r;
}
static inline void hdmi_in1_dma_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe000d100L);
}

/* hdmi_in1_freq */
#define CSR_HDMI_IN1_FREQ_BASE 0xe000d800L
#define CSR_HDMI_IN1_FREQ_VALUE_ADDR 0xe000d800L
#define CSR_HDMI_IN1_FREQ_VALUE_SIZE 4
static inline unsigned int hdmi_in1_freq_value_read(void) {
	unsigned int r = csr_readl(0xe000d800L);
	r <<= 8;
	r |= csr_readl(0xe000d804L);
	r <<= 8;
	r |= csr_readl(0xe000d808L);
	r <<= 8;
	r |= csr_readl(0xe000d80cL);
	return r;
}

/* hdmi_out0 */
#define CSR_HDMI_OUT0_BASE 0xe000a800L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_ENABLE_ADDR 0xe000a800L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_ENABLE_SIZE 1
static inline unsigned char hdmi_out0_core_underflow_enable_read(void) {
	unsigned char r = csr_readl(0xe000a800L);
	return r;
}
static inline void hdmi_out0_core_underflow_enable_write(unsigned char value) {
	csr_writel(value, 0xe000a800L);
}
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_UPDATE_ADDR 0xe000a804L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_UPDATE_SIZE 1
static inline unsigned char hdmi_out0_core_underflow_update_read(void) {
	unsigned char r = csr_readl(0xe000a804L);
	return r;
}
static inline void hdmi_out0_core_underflow_update_write(unsigned char value) {
	csr_writel(value, 0xe000a804L);
}
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_COUNTER_ADDR 0xe000a808L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_COUNTER_SIZE 4
static inline unsigned int hdmi_out0_core_underflow_counter_read(void) {
	unsigned int r = csr_readl(0xe000a808L);
	r <<= 8;
	r |= csr_readl(0xe000a80cL);
	r <<= 8;
	r |= csr_readl(0xe000a810L);
	r <<= 8;
	r |= csr_readl(0xe000a814L);
	return r;
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_ENABLE_ADDR 0xe000a818L
#define CSR_HDMI_OUT0_CORE_INITIATOR_ENABLE_SIZE 1
static inline unsigned char hdmi_out0_core_initiator_enable_read(void) {
	unsigned char r = csr_readl(0xe000a818L);
	return r;
}
static inline void hdmi_out0_core_initiator_enable_write(unsigned char value) {
	csr_writel(value, 0xe000a818L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HRES_ADDR 0xe000a81cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_HRES_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hres_read(void) {
	unsigned short int r = csr_readl(0xe000a81cL);
	r <<= 8;
	r |= csr_readl(0xe000a820L);
	return r;
}
static inline void hdmi_out0_core_initiator_hres_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a81cL);
	csr_writel(value, 0xe000a820L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_START_ADDR 0xe000a824L
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_START_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hsync_start_read(void) {
	unsigned short int r = csr_readl(0xe000a824L);
	r <<= 8;
	r |= csr_readl(0xe000a828L);
	return r;
}
static inline void hdmi_out0_core_initiator_hsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a824L);
	csr_writel(value, 0xe000a828L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_END_ADDR 0xe000a82cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_END_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hsync_end_read(void) {
	unsigned short int r = csr_readl(0xe000a82cL);
	r <<= 8;
	r |= csr_readl(0xe000a830L);
	return r;
}
static inline void hdmi_out0_core_initiator_hsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a82cL);
	csr_writel(value, 0xe000a830L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSCAN_ADDR 0xe000a834L
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSCAN_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hscan_read(void) {
	unsigned short int r = csr_readl(0xe000a834L);
	r <<= 8;
	r |= csr_readl(0xe000a838L);
	return r;
}
static inline void hdmi_out0_core_initiator_hscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a834L);
	csr_writel(value, 0xe000a838L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VRES_ADDR 0xe000a83cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_VRES_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vres_read(void) {
	unsigned short int r = csr_readl(0xe000a83cL);
	r <<= 8;
	r |= csr_readl(0xe000a840L);
	return r;
}
static inline void hdmi_out0_core_initiator_vres_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a83cL);
	csr_writel(value, 0xe000a840L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_START_ADDR 0xe000a844L
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_START_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vsync_start_read(void) {
	unsigned short int r = csr_readl(0xe000a844L);
	r <<= 8;
	r |= csr_readl(0xe000a848L);
	return r;
}
static inline void hdmi_out0_core_initiator_vsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a844L);
	csr_writel(value, 0xe000a848L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_END_ADDR 0xe000a84cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_END_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vsync_end_read(void) {
	unsigned short int r = csr_readl(0xe000a84cL);
	r <<= 8;
	r |= csr_readl(0xe000a850L);
	return r;
}
static inline void hdmi_out0_core_initiator_vsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a84cL);
	csr_writel(value, 0xe000a850L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSCAN_ADDR 0xe000a854L
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSCAN_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vscan_read(void) {
	unsigned short int r = csr_readl(0xe000a854L);
	r <<= 8;
	r |= csr_readl(0xe000a858L);
	return r;
}
static inline void hdmi_out0_core_initiator_vscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a854L);
	csr_writel(value, 0xe000a858L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_BASE_ADDR 0xe000a85cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_BASE_SIZE 4
static inline unsigned int hdmi_out0_core_initiator_base_read(void) {
	unsigned int r = csr_readl(0xe000a85cL);
	r <<= 8;
	r |= csr_readl(0xe000a860L);
	r <<= 8;
	r |= csr_readl(0xe000a864L);
	r <<= 8;
	r |= csr_readl(0xe000a868L);
	return r;
}
static inline void hdmi_out0_core_initiator_base_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000a85cL);
	csr_writel(value >> 16, 0xe000a860L);
	csr_writel(value >> 8, 0xe000a864L);
	csr_writel(value, 0xe000a868L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_LENGTH_ADDR 0xe000a86cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_LENGTH_SIZE 4
static inline unsigned int hdmi_out0_core_initiator_length_read(void) {
	unsigned int r = csr_readl(0xe000a86cL);
	r <<= 8;
	r |= csr_readl(0xe000a870L);
	r <<= 8;
	r |= csr_readl(0xe000a874L);
	r <<= 8;
	r |= csr_readl(0xe000a878L);
	return r;
}
static inline void hdmi_out0_core_initiator_length_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000a86cL);
	csr_writel(value >> 16, 0xe000a870L);
	csr_writel(value >> 8, 0xe000a874L);
	csr_writel(value, 0xe000a878L);
}
#define CSR_HDMI_OUT0_CORE_DMA_DELAY_BASE_ADDR 0xe000a87cL
#define CSR_HDMI_OUT0_CORE_DMA_DELAY_BASE_SIZE 4
static inline unsigned int hdmi_out0_core_dma_delay_base_read(void) {
	unsigned int r = csr_readl(0xe000a87cL);
	r <<= 8;
	r |= csr_readl(0xe000a880L);
	r <<= 8;
	r |= csr_readl(0xe000a884L);
	r <<= 8;
	r |= csr_readl(0xe000a888L);
	return r;
}
static inline void hdmi_out0_core_dma_delay_base_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000a87cL);
	csr_writel(value >> 16, 0xe000a880L);
	csr_writel(value >> 8, 0xe000a884L);
	csr_writel(value, 0xe000a888L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_CMD_DATA_ADDR 0xe000a88cL
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_CMD_DATA_SIZE 2
static inline unsigned short int hdmi_out0_driver_clocking_cmd_data_read(void) {
	unsigned short int r = csr_readl(0xe000a88cL);
	r <<= 8;
	r |= csr_readl(0xe000a890L);
	return r;
}
static inline void hdmi_out0_driver_clocking_cmd_data_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a88cL);
	csr_writel(value, 0xe000a890L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_SEND_CMD_DATA_ADDR 0xe000a894L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_SEND_CMD_DATA_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_send_cmd_data_read(void) {
	unsigned char r = csr_readl(0xe000a894L);
	return r;
}
static inline void hdmi_out0_driver_clocking_send_cmd_data_write(unsigned char value) {
	csr_writel(value, 0xe000a894L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_SEND_GO_ADDR 0xe000a898L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_SEND_GO_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_send_go_read(void) {
	unsigned char r = csr_readl(0xe000a898L);
	return r;
}
static inline void hdmi_out0_driver_clocking_send_go_write(unsigned char value) {
	csr_writel(value, 0xe000a898L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_STATUS_ADDR 0xe000a89cL
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_STATUS_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_status_read(void) {
	unsigned char r = csr_readl(0xe000a89cL);
	return r;
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_RESET_ADDR 0xe000a8a0L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_RESET_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_reset_read(void) {
	unsigned char r = csr_readl(0xe000a8a0L);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_reset_write(unsigned char value) {
	csr_writel(value, 0xe000a8a0L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_ADR_ADDR 0xe000a8a4L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_ADR_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_adr_read(void) {
	unsigned char r = csr_readl(0xe000a8a4L);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_adr_write(unsigned char value) {
	csr_writel(value, 0xe000a8a4L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DAT_R_ADDR 0xe000a8a8L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DAT_R_SIZE 2
static inline unsigned short int hdmi_out0_driver_clocking_pll_dat_r_read(void) {
	unsigned short int r = csr_readl(0xe000a8a8L);
	r <<= 8;
	r |= csr_readl(0xe000a8acL);
	return r;
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DAT_W_ADDR 0xe000a8b0L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DAT_W_SIZE 2
static inline unsigned short int hdmi_out0_driver_clocking_pll_dat_w_read(void) {
	unsigned short int r = csr_readl(0xe000a8b0L);
	r <<= 8;
	r |= csr_readl(0xe000a8b4L);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_dat_w_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000a8b0L);
	csr_writel(value, 0xe000a8b4L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_READ_ADDR 0xe000a8b8L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_READ_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_read_read(void) {
	unsigned char r = csr_readl(0xe000a8b8L);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_read_write(unsigned char value) {
	csr_writel(value, 0xe000a8b8L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_WRITE_ADDR 0xe000a8bcL
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_WRITE_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_write_read(void) {
	unsigned char r = csr_readl(0xe000a8bcL);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_write_write(unsigned char value) {
	csr_writel(value, 0xe000a8bcL);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DRDY_ADDR 0xe000a8c0L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DRDY_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_drdy_read(void) {
	unsigned char r = csr_readl(0xe000a8c0L);
	return r;
}
#define CSR_HDMI_OUT0_I2C_W_ADDR 0xe000a8c4L
#define CSR_HDMI_OUT0_I2C_W_SIZE 1
static inline unsigned char hdmi_out0_i2c_w_read(void) {
	unsigned char r = csr_readl(0xe000a8c4L);
	return r;
}
static inline void hdmi_out0_i2c_w_write(unsigned char value) {
	csr_writel(value, 0xe000a8c4L);
}
#define CSR_HDMI_OUT0_I2C_R_ADDR 0xe000a8c8L
#define CSR_HDMI_OUT0_I2C_R_SIZE 1
static inline unsigned char hdmi_out0_i2c_r_read(void) {
	unsigned char r = csr_readl(0xe000a8c8L);
	return r;
}

/* hdmi_out1 */
#define CSR_HDMI_OUT1_BASE 0xe000b000L
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_ENABLE_ADDR 0xe000b000L
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_ENABLE_SIZE 1
static inline unsigned char hdmi_out1_core_underflow_enable_read(void) {
	unsigned char r = csr_readl(0xe000b000L);
	return r;
}
static inline void hdmi_out1_core_underflow_enable_write(unsigned char value) {
	csr_writel(value, 0xe000b000L);
}
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_UPDATE_ADDR 0xe000b004L
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_UPDATE_SIZE 1
static inline unsigned char hdmi_out1_core_underflow_update_read(void) {
	unsigned char r = csr_readl(0xe000b004L);
	return r;
}
static inline void hdmi_out1_core_underflow_update_write(unsigned char value) {
	csr_writel(value, 0xe000b004L);
}
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_COUNTER_ADDR 0xe000b008L
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_COUNTER_SIZE 4
static inline unsigned int hdmi_out1_core_underflow_counter_read(void) {
	unsigned int r = csr_readl(0xe000b008L);
	r <<= 8;
	r |= csr_readl(0xe000b00cL);
	r <<= 8;
	r |= csr_readl(0xe000b010L);
	r <<= 8;
	r |= csr_readl(0xe000b014L);
	return r;
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_ENABLE_ADDR 0xe000b018L
#define CSR_HDMI_OUT1_CORE_INITIATOR_ENABLE_SIZE 1
static inline unsigned char hdmi_out1_core_initiator_enable_read(void) {
	unsigned char r = csr_readl(0xe000b018L);
	return r;
}
static inline void hdmi_out1_core_initiator_enable_write(unsigned char value) {
	csr_writel(value, 0xe000b018L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_HRES_ADDR 0xe000b01cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_HRES_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_hres_read(void) {
	unsigned short int r = csr_readl(0xe000b01cL);
	r <<= 8;
	r |= csr_readl(0xe000b020L);
	return r;
}
static inline void hdmi_out1_core_initiator_hres_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b01cL);
	csr_writel(value, 0xe000b020L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSYNC_START_ADDR 0xe000b024L
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSYNC_START_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_hsync_start_read(void) {
	unsigned short int r = csr_readl(0xe000b024L);
	r <<= 8;
	r |= csr_readl(0xe000b028L);
	return r;
}
static inline void hdmi_out1_core_initiator_hsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b024L);
	csr_writel(value, 0xe000b028L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSYNC_END_ADDR 0xe000b02cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSYNC_END_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_hsync_end_read(void) {
	unsigned short int r = csr_readl(0xe000b02cL);
	r <<= 8;
	r |= csr_readl(0xe000b030L);
	return r;
}
static inline void hdmi_out1_core_initiator_hsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b02cL);
	csr_writel(value, 0xe000b030L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSCAN_ADDR 0xe000b034L
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSCAN_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_hscan_read(void) {
	unsigned short int r = csr_readl(0xe000b034L);
	r <<= 8;
	r |= csr_readl(0xe000b038L);
	return r;
}
static inline void hdmi_out1_core_initiator_hscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b034L);
	csr_writel(value, 0xe000b038L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_VRES_ADDR 0xe000b03cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_VRES_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_vres_read(void) {
	unsigned short int r = csr_readl(0xe000b03cL);
	r <<= 8;
	r |= csr_readl(0xe000b040L);
	return r;
}
static inline void hdmi_out1_core_initiator_vres_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b03cL);
	csr_writel(value, 0xe000b040L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSYNC_START_ADDR 0xe000b044L
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSYNC_START_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_vsync_start_read(void) {
	unsigned short int r = csr_readl(0xe000b044L);
	r <<= 8;
	r |= csr_readl(0xe000b048L);
	return r;
}
static inline void hdmi_out1_core_initiator_vsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b044L);
	csr_writel(value, 0xe000b048L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSYNC_END_ADDR 0xe000b04cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSYNC_END_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_vsync_end_read(void) {
	unsigned short int r = csr_readl(0xe000b04cL);
	r <<= 8;
	r |= csr_readl(0xe000b050L);
	return r;
}
static inline void hdmi_out1_core_initiator_vsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b04cL);
	csr_writel(value, 0xe000b050L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSCAN_ADDR 0xe000b054L
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSCAN_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_vscan_read(void) {
	unsigned short int r = csr_readl(0xe000b054L);
	r <<= 8;
	r |= csr_readl(0xe000b058L);
	return r;
}
static inline void hdmi_out1_core_initiator_vscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000b054L);
	csr_writel(value, 0xe000b058L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_BASE_ADDR 0xe000b05cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_BASE_SIZE 4
static inline unsigned int hdmi_out1_core_initiator_base_read(void) {
	unsigned int r = csr_readl(0xe000b05cL);
	r <<= 8;
	r |= csr_readl(0xe000b060L);
	r <<= 8;
	r |= csr_readl(0xe000b064L);
	r <<= 8;
	r |= csr_readl(0xe000b068L);
	return r;
}
static inline void hdmi_out1_core_initiator_base_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000b05cL);
	csr_writel(value >> 16, 0xe000b060L);
	csr_writel(value >> 8, 0xe000b064L);
	csr_writel(value, 0xe000b068L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_LENGTH_ADDR 0xe000b06cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_LENGTH_SIZE 4
static inline unsigned int hdmi_out1_core_initiator_length_read(void) {
	unsigned int r = csr_readl(0xe000b06cL);
	r <<= 8;
	r |= csr_readl(0xe000b070L);
	r <<= 8;
	r |= csr_readl(0xe000b074L);
	r <<= 8;
	r |= csr_readl(0xe000b078L);
	return r;
}
static inline void hdmi_out1_core_initiator_length_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000b06cL);
	csr_writel(value >> 16, 0xe000b070L);
	csr_writel(value >> 8, 0xe000b074L);
	csr_writel(value, 0xe000b078L);
}
#define CSR_HDMI_OUT1_CORE_DMA_DELAY_BASE_ADDR 0xe000b07cL
#define CSR_HDMI_OUT1_CORE_DMA_DELAY_BASE_SIZE 4
static inline unsigned int hdmi_out1_core_dma_delay_base_read(void) {
	unsigned int r = csr_readl(0xe000b07cL);
	r <<= 8;
	r |= csr_readl(0xe000b080L);
	r <<= 8;
	r |= csr_readl(0xe000b084L);
	r <<= 8;
	r |= csr_readl(0xe000b088L);
	return r;
}
static inline void hdmi_out1_core_dma_delay_base_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000b07cL);
	csr_writel(value >> 16, 0xe000b080L);
	csr_writel(value >> 8, 0xe000b084L);
	csr_writel(value, 0xe000b088L);
}
#define CSR_HDMI_OUT1_I2C_W_ADDR 0xe000b08cL
#define CSR_HDMI_OUT1_I2C_W_SIZE 1
static inline unsigned char hdmi_out1_i2c_w_read(void) {
	unsigned char r = csr_readl(0xe000b08cL);
	return r;
}
static inline void hdmi_out1_i2c_w_write(unsigned char value) {
	csr_writel(value, 0xe000b08cL);
}
#define CSR_HDMI_OUT1_I2C_R_ADDR 0xe000b090L
#define CSR_HDMI_OUT1_I2C_R_SIZE 1
static inline unsigned char hdmi_out1_i2c_r_read(void) {
	unsigned char r = csr_readl(0xe000b090L);
	return r;
}

/* info */
#define CSR_INFO_BASE 0xe0006800L
#define CSR_INFO_DNA_ID_ADDR 0xe0006800L
#define CSR_INFO_DNA_ID_SIZE 8
static inline unsigned long long int info_dna_id_read(void) {
	unsigned long long int r = csr_readl(0xe0006800L);
	r <<= 8;
	r |= csr_readl(0xe0006804L);
	r <<= 8;
	r |= csr_readl(0xe0006808L);
	r <<= 8;
	r |= csr_readl(0xe000680cL);
	r <<= 8;
	r |= csr_readl(0xe0006810L);
	r <<= 8;
	r |= csr_readl(0xe0006814L);
	r <<= 8;
	r |= csr_readl(0xe0006818L);
	r <<= 8;
	r |= csr_readl(0xe000681cL);
	return r;
}
#define CSR_INFO_GIT_COMMIT_ADDR 0xe0006820L
#define CSR_INFO_GIT_COMMIT_SIZE 20
#define CSR_INFO_PLATFORM_PLATFORM_ADDR 0xe0006870L
#define CSR_INFO_PLATFORM_PLATFORM_SIZE 8
static inline unsigned long long int info_platform_platform_read(void) {
	unsigned long long int r = csr_readl(0xe0006870L);
	r <<= 8;
	r |= csr_readl(0xe0006874L);
	r <<= 8;
	r |= csr_readl(0xe0006878L);
	r <<= 8;
	r |= csr_readl(0xe000687cL);
	r <<= 8;
	r |= csr_readl(0xe0006880L);
	r <<= 8;
	r |= csr_readl(0xe0006884L);
	r <<= 8;
	r |= csr_readl(0xe0006888L);
	r <<= 8;
	r |= csr_readl(0xe000688cL);
	return r;
}
#define CSR_INFO_PLATFORM_TARGET_ADDR 0xe0006890L
#define CSR_INFO_PLATFORM_TARGET_SIZE 8
static inline unsigned long long int info_platform_target_read(void) {
	unsigned long long int r = csr_readl(0xe0006890L);
	r <<= 8;
	r |= csr_readl(0xe0006894L);
	r <<= 8;
	r |= csr_readl(0xe0006898L);
	r <<= 8;
	r |= csr_readl(0xe000689cL);
	r <<= 8;
	r |= csr_readl(0xe00068a0L);
	r <<= 8;
	r |= csr_readl(0xe00068a4L);
	r <<= 8;
	r |= csr_readl(0xe00068a8L);
	r <<= 8;
	r |= csr_readl(0xe00068acL);
	return r;
}

/* opsis_i2c */
#define CSR_OPSIS_I2C_BASE 0xe0008800L
#define CSR_OPSIS_I2C_MASTER_W_ADDR 0xe0008800L
#define CSR_OPSIS_I2C_MASTER_W_SIZE 1
static inline unsigned char opsis_i2c_master_w_read(void) {
	unsigned char r = csr_readl(0xe0008800L);
	return r;
}
static inline void opsis_i2c_master_w_write(unsigned char value) {
	csr_writel(value, 0xe0008800L);
}
#define CSR_OPSIS_I2C_MASTER_R_ADDR 0xe0008804L
#define CSR_OPSIS_I2C_MASTER_R_SIZE 1
static inline unsigned char opsis_i2c_master_r_read(void) {
	unsigned char r = csr_readl(0xe0008804L);
	return r;
}
#define CSR_OPSIS_I2C_FX2_RESET_OUT_ADDR 0xe0008808L
#define CSR_OPSIS_I2C_FX2_RESET_OUT_SIZE 1
static inline unsigned char opsis_i2c_fx2_reset_out_read(void) {
	unsigned char r = csr_readl(0xe0008808L);
	return r;
}
static inline void opsis_i2c_fx2_reset_out_write(unsigned char value) {
	csr_writel(value, 0xe0008808L);
}
#define CSR_OPSIS_I2C_FX2_HACK_SHIFT_REG_ADDR 0xe000880cL
#define CSR_OPSIS_I2C_FX2_HACK_SHIFT_REG_SIZE 1
static inline unsigned char opsis_i2c_fx2_hack_shift_reg_read(void) {
	unsigned char r = csr_readl(0xe000880cL);
	return r;
}
static inline void opsis_i2c_fx2_hack_shift_reg_write(unsigned char value) {
	csr_writel(value, 0xe000880cL);
}
#define CSR_OPSIS_I2C_FX2_HACK_STATUS_ADDR 0xe0008810L
#define CSR_OPSIS_I2C_FX2_HACK_STATUS_SIZE 1
static inline unsigned char opsis_i2c_fx2_hack_status_read(void) {
	unsigned char r = csr_readl(0xe0008810L);
	return r;
}
static inline void opsis_i2c_fx2_hack_status_write(unsigned char value) {
	csr_writel(value, 0xe0008810L);
}
#define CSR_OPSIS_I2C_FX2_HACK_SLAVE_ADDR_ADDR 0xe0008814L
#define CSR_OPSIS_I2C_FX2_HACK_SLAVE_ADDR_SIZE 1
static inline unsigned char opsis_i2c_fx2_hack_slave_addr_read(void) {
	unsigned char r = csr_readl(0xe0008814L);
	return r;
}
static inline void opsis_i2c_fx2_hack_slave_addr_write(unsigned char value) {
	csr_writel(value, 0xe0008814L);
}
#define CSR_OPSIS_I2C_MUX_SEL_ADDR 0xe0008818L
#define CSR_OPSIS_I2C_MUX_SEL_SIZE 1
static inline unsigned char opsis_i2c_mux_sel_read(void) {
	unsigned char r = csr_readl(0xe0008818L);
	return r;
}
static inline void opsis_i2c_mux_sel_write(unsigned char value) {
	csr_writel(value, 0xe0008818L);
}

/* sdram */
#define CSR_SDRAM_BASE 0xe0004000L
#define CSR_SDRAM_DFII_CONTROL_ADDR 0xe0004000L
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline unsigned char sdram_dfii_control_read(void) {
	unsigned char r = csr_readl(0xe0004000L);
	return r;
}
static inline void sdram_dfii_control_write(unsigned char value) {
	csr_writel(value, 0xe0004000L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR 0xe0004004L
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_read(void) {
	unsigned char r = csr_readl(0xe0004004L);
	return r;
}
static inline void sdram_dfii_pi0_command_write(unsigned char value) {
	csr_writel(value, 0xe0004004L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR 0xe0004008L
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_issue_read(void) {
	unsigned char r = csr_readl(0xe0004008L);
	return r;
}
static inline void sdram_dfii_pi0_command_issue_write(unsigned char value) {
	csr_writel(value, 0xe0004008L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR 0xe000400cL
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi0_address_read(void) {
	unsigned short int r = csr_readl(0xe000400cL);
	r <<= 8;
	r |= csr_readl(0xe0004010L);
	return r;
}
static inline void sdram_dfii_pi0_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe000400cL);
	csr_writel(value, 0xe0004010L);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR 0xe0004014L
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi0_baddress_read(void) {
	unsigned char r = csr_readl(0xe0004014L);
	return r;
}
static inline void sdram_dfii_pi0_baddress_write(unsigned char value) {
	csr_writel(value, 0xe0004014L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR 0xe0004018L
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi0_wrdata_read(void) {
	unsigned int r = csr_readl(0xe0004018L);
	r <<= 8;
	r |= csr_readl(0xe000401cL);
	r <<= 8;
	r |= csr_readl(0xe0004020L);
	r <<= 8;
	r |= csr_readl(0xe0004024L);
	return r;
}
static inline void sdram_dfii_pi0_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0004018L);
	csr_writel(value >> 16, 0xe000401cL);
	csr_writel(value >> 8, 0xe0004020L);
	csr_writel(value, 0xe0004024L);
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR 0xe0004028L
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi0_rddata_read(void) {
	unsigned int r = csr_readl(0xe0004028L);
	r <<= 8;
	r |= csr_readl(0xe000402cL);
	r <<= 8;
	r |= csr_readl(0xe0004030L);
	r <<= 8;
	r |= csr_readl(0xe0004034L);
	return r;
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR 0xe0004038L
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi1_command_read(void) {
	unsigned char r = csr_readl(0xe0004038L);
	return r;
}
static inline void sdram_dfii_pi1_command_write(unsigned char value) {
	csr_writel(value, 0xe0004038L);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR 0xe000403cL
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi1_command_issue_read(void) {
	unsigned char r = csr_readl(0xe000403cL);
	return r;
}
static inline void sdram_dfii_pi1_command_issue_write(unsigned char value) {
	csr_writel(value, 0xe000403cL);
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR 0xe0004040L
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi1_address_read(void) {
	unsigned short int r = csr_readl(0xe0004040L);
	r <<= 8;
	r |= csr_readl(0xe0004044L);
	return r;
}
static inline void sdram_dfii_pi1_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0004040L);
	csr_writel(value, 0xe0004044L);
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR 0xe0004048L
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi1_baddress_read(void) {
	unsigned char r = csr_readl(0xe0004048L);
	return r;
}
static inline void sdram_dfii_pi1_baddress_write(unsigned char value) {
	csr_writel(value, 0xe0004048L);
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR 0xe000404cL
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi1_wrdata_read(void) {
	unsigned int r = csr_readl(0xe000404cL);
	r <<= 8;
	r |= csr_readl(0xe0004050L);
	r <<= 8;
	r |= csr_readl(0xe0004054L);
	r <<= 8;
	r |= csr_readl(0xe0004058L);
	return r;
}
static inline void sdram_dfii_pi1_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0xe000404cL);
	csr_writel(value >> 16, 0xe0004050L);
	csr_writel(value >> 8, 0xe0004054L);
	csr_writel(value, 0xe0004058L);
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR 0xe000405cL
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi1_rddata_read(void) {
	unsigned int r = csr_readl(0xe000405cL);
	r <<= 8;
	r |= csr_readl(0xe0004060L);
	r <<= 8;
	r |= csr_readl(0xe0004064L);
	r <<= 8;
	r |= csr_readl(0xe0004068L);
	return r;
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR 0xe000406cL
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi2_command_read(void) {
	unsigned char r = csr_readl(0xe000406cL);
	return r;
}
static inline void sdram_dfii_pi2_command_write(unsigned char value) {
	csr_writel(value, 0xe000406cL);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR 0xe0004070L
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi2_command_issue_read(void) {
	unsigned char r = csr_readl(0xe0004070L);
	return r;
}
static inline void sdram_dfii_pi2_command_issue_write(unsigned char value) {
	csr_writel(value, 0xe0004070L);
}
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR 0xe0004074L
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi2_address_read(void) {
	unsigned short int r = csr_readl(0xe0004074L);
	r <<= 8;
	r |= csr_readl(0xe0004078L);
	return r;
}
static inline void sdram_dfii_pi2_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe0004074L);
	csr_writel(value, 0xe0004078L);
}
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR 0xe000407cL
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi2_baddress_read(void) {
	unsigned char r = csr_readl(0xe000407cL);
	return r;
}
static inline void sdram_dfii_pi2_baddress_write(unsigned char value) {
	csr_writel(value, 0xe000407cL);
}
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR 0xe0004080L
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi2_wrdata_read(void) {
	unsigned int r = csr_readl(0xe0004080L);
	r <<= 8;
	r |= csr_readl(0xe0004084L);
	r <<= 8;
	r |= csr_readl(0xe0004088L);
	r <<= 8;
	r |= csr_readl(0xe000408cL);
	return r;
}
static inline void sdram_dfii_pi2_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0004080L);
	csr_writel(value >> 16, 0xe0004084L);
	csr_writel(value >> 8, 0xe0004088L);
	csr_writel(value, 0xe000408cL);
}
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR 0xe0004090L
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi2_rddata_read(void) {
	unsigned int r = csr_readl(0xe0004090L);
	r <<= 8;
	r |= csr_readl(0xe0004094L);
	r <<= 8;
	r |= csr_readl(0xe0004098L);
	r <<= 8;
	r |= csr_readl(0xe000409cL);
	return r;
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR 0xe00040a0L
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi3_command_read(void) {
	unsigned char r = csr_readl(0xe00040a0L);
	return r;
}
static inline void sdram_dfii_pi3_command_write(unsigned char value) {
	csr_writel(value, 0xe00040a0L);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR 0xe00040a4L
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi3_command_issue_read(void) {
	unsigned char r = csr_readl(0xe00040a4L);
	return r;
}
static inline void sdram_dfii_pi3_command_issue_write(unsigned char value) {
	csr_writel(value, 0xe00040a4L);
}
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR 0xe00040a8L
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi3_address_read(void) {
	unsigned short int r = csr_readl(0xe00040a8L);
	r <<= 8;
	r |= csr_readl(0xe00040acL);
	return r;
}
static inline void sdram_dfii_pi3_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0xe00040a8L);
	csr_writel(value, 0xe00040acL);
}
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR 0xe00040b0L
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi3_baddress_read(void) {
	unsigned char r = csr_readl(0xe00040b0L);
	return r;
}
static inline void sdram_dfii_pi3_baddress_write(unsigned char value) {
	csr_writel(value, 0xe00040b0L);
}
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR 0xe00040b4L
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi3_wrdata_read(void) {
	unsigned int r = csr_readl(0xe00040b4L);
	r <<= 8;
	r |= csr_readl(0xe00040b8L);
	r <<= 8;
	r |= csr_readl(0xe00040bcL);
	r <<= 8;
	r |= csr_readl(0xe00040c0L);
	return r;
}
static inline void sdram_dfii_pi3_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0xe00040b4L);
	csr_writel(value >> 16, 0xe00040b8L);
	csr_writel(value >> 8, 0xe00040bcL);
	csr_writel(value, 0xe00040c0L);
}
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR 0xe00040c4L
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi3_rddata_read(void) {
	unsigned int r = csr_readl(0xe00040c4L);
	r <<= 8;
	r |= csr_readl(0xe00040c8L);
	r <<= 8;
	r |= csr_readl(0xe00040ccL);
	r <<= 8;
	r |= csr_readl(0xe00040d0L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_UPDATE_ADDR 0xe00040d4L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_UPDATE_SIZE 1
static inline unsigned char sdram_controller_bandwidth_update_read(void) {
	unsigned char r = csr_readl(0xe00040d4L);
	return r;
}
static inline void sdram_controller_bandwidth_update_write(unsigned char value) {
	csr_writel(value, 0xe00040d4L);
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NREADS_ADDR 0xe00040d8L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NREADS_SIZE 3
static inline unsigned int sdram_controller_bandwidth_nreads_read(void) {
	unsigned int r = csr_readl(0xe00040d8L);
	r <<= 8;
	r |= csr_readl(0xe00040dcL);
	r <<= 8;
	r |= csr_readl(0xe00040e0L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NWRITES_ADDR 0xe00040e4L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NWRITES_SIZE 3
static inline unsigned int sdram_controller_bandwidth_nwrites_read(void) {
	unsigned int r = csr_readl(0xe00040e4L);
	r <<= 8;
	r |= csr_readl(0xe00040e8L);
	r <<= 8;
	r |= csr_readl(0xe00040ecL);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_DATA_WIDTH_ADDR 0xe00040f0L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_DATA_WIDTH_SIZE 1
static inline unsigned char sdram_controller_bandwidth_data_width_read(void) {
	unsigned char r = csr_readl(0xe00040f0L);
	return r;
}

/* spiflash */
#define CSR_SPIFLASH_BASE 0xe0005000L
#define CSR_SPIFLASH_BITBANG_ADDR 0xe0005000L
#define CSR_SPIFLASH_BITBANG_SIZE 1
static inline unsigned char spiflash_bitbang_read(void) {
	unsigned char r = csr_readl(0xe0005000L);
	return r;
}
static inline void spiflash_bitbang_write(unsigned char value) {
	csr_writel(value, 0xe0005000L);
}
#define CSR_SPIFLASH_MISO_ADDR 0xe0005004L
#define CSR_SPIFLASH_MISO_SIZE 1
static inline unsigned char spiflash_miso_read(void) {
	unsigned char r = csr_readl(0xe0005004L);
	return r;
}
#define CSR_SPIFLASH_BITBANG_EN_ADDR 0xe0005008L
#define CSR_SPIFLASH_BITBANG_EN_SIZE 1
static inline unsigned char spiflash_bitbang_en_read(void) {
	unsigned char r = csr_readl(0xe0005008L);
	return r;
}
static inline void spiflash_bitbang_en_write(unsigned char value) {
	csr_writel(value, 0xe0005008L);
}

/* timer0 */
#define CSR_TIMER0_BASE 0xe0001800L
#define CSR_TIMER0_LOAD_ADDR 0xe0001800L
#define CSR_TIMER0_LOAD_SIZE 4
static inline unsigned int timer0_load_read(void) {
	unsigned int r = csr_readl(0xe0001800L);
	r <<= 8;
	r |= csr_readl(0xe0001804L);
	r <<= 8;
	r |= csr_readl(0xe0001808L);
	r <<= 8;
	r |= csr_readl(0xe000180cL);
	return r;
}
static inline void timer0_load_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0001800L);
	csr_writel(value >> 16, 0xe0001804L);
	csr_writel(value >> 8, 0xe0001808L);
	csr_writel(value, 0xe000180cL);
}
#define CSR_TIMER0_RELOAD_ADDR 0xe0001810L
#define CSR_TIMER0_RELOAD_SIZE 4
static inline unsigned int timer0_reload_read(void) {
	unsigned int r = csr_readl(0xe0001810L);
	r <<= 8;
	r |= csr_readl(0xe0001814L);
	r <<= 8;
	r |= csr_readl(0xe0001818L);
	r <<= 8;
	r |= csr_readl(0xe000181cL);
	return r;
}
static inline void timer0_reload_write(unsigned int value) {
	csr_writel(value >> 24, 0xe0001810L);
	csr_writel(value >> 16, 0xe0001814L);
	csr_writel(value >> 8, 0xe0001818L);
	csr_writel(value, 0xe000181cL);
}
#define CSR_TIMER0_EN_ADDR 0xe0001820L
#define CSR_TIMER0_EN_SIZE 1
static inline unsigned char timer0_en_read(void) {
	unsigned char r = csr_readl(0xe0001820L);
	return r;
}
static inline void timer0_en_write(unsigned char value) {
	csr_writel(value, 0xe0001820L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0xe0001824L
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline unsigned char timer0_update_value_read(void) {
	unsigned char r = csr_readl(0xe0001824L);
	return r;
}
static inline void timer0_update_value_write(unsigned char value) {
	csr_writel(value, 0xe0001824L);
}
#define CSR_TIMER0_VALUE_ADDR 0xe0001828L
#define CSR_TIMER0_VALUE_SIZE 4
static inline unsigned int timer0_value_read(void) {
	unsigned int r = csr_readl(0xe0001828L);
	r <<= 8;
	r |= csr_readl(0xe000182cL);
	r <<= 8;
	r |= csr_readl(0xe0001830L);
	r <<= 8;
	r |= csr_readl(0xe0001834L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0xe0001838L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline unsigned char timer0_ev_status_read(void) {
	unsigned char r = csr_readl(0xe0001838L);
	return r;
}
static inline void timer0_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe0001838L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0xe000183cL
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline unsigned char timer0_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe000183cL);
	return r;
}
static inline void timer0_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe000183cL);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0xe0001840L
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline unsigned char timer0_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe0001840L);
	return r;
}
static inline void timer0_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe0001840L);
}

/* uart */
#define CSR_UART_BASE 0xe0009000L
#define CSR_UART_RXTX_ADDR 0xe0009000L
#define CSR_UART_RXTX_SIZE 1
static inline unsigned char uart_rxtx_read(void) {
	unsigned char r = csr_readl(0xe0009000L);
	return r;
}
static inline void uart_rxtx_write(unsigned char value) {
	csr_writel(value, 0xe0009000L);
}
#define CSR_UART_TXFULL_ADDR 0xe0009004L
#define CSR_UART_TXFULL_SIZE 1
static inline unsigned char uart_txfull_read(void) {
	unsigned char r = csr_readl(0xe0009004L);
	return r;
}
#define CSR_UART_RXEMPTY_ADDR 0xe0009008L
#define CSR_UART_RXEMPTY_SIZE 1
static inline unsigned char uart_rxempty_read(void) {
	unsigned char r = csr_readl(0xe0009008L);
	return r;
}
#define CSR_UART_EV_STATUS_ADDR 0xe000900cL
#define CSR_UART_EV_STATUS_SIZE 1
static inline unsigned char uart_ev_status_read(void) {
	unsigned char r = csr_readl(0xe000900cL);
	return r;
}
static inline void uart_ev_status_write(unsigned char value) {
	csr_writel(value, 0xe000900cL);
}
#define CSR_UART_EV_PENDING_ADDR 0xe0009010L
#define CSR_UART_EV_PENDING_SIZE 1
static inline unsigned char uart_ev_pending_read(void) {
	unsigned char r = csr_readl(0xe0009010L);
	return r;
}
static inline void uart_ev_pending_write(unsigned char value) {
	csr_writel(value, 0xe0009010L);
}
#define CSR_UART_EV_ENABLE_ADDR 0xe0009014L
#define CSR_UART_EV_ENABLE_SIZE 1
static inline unsigned char uart_ev_enable_read(void) {
	unsigned char r = csr_readl(0xe0009014L);
	return r;
}
static inline void uart_ev_enable_write(unsigned char value) {
	csr_writel(value, 0xe0009014L);
}

/* hdmi_in0_edid_mem */
#define CSR_HDMI_IN0_EDID_MEM_BASE 0xe000c800L

/* hdmi_in1_edid_mem */
#define CSR_HDMI_IN1_EDID_MEM_BASE 0xe000e000L

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE 0xe0001000L

/* constants */
#define ETHMAC_INTERRUPT 2
static inline int ethmac_interrupt_read(void) {
	return 2;
}
#define HDMI_IN0_INTERRUPT 3
static inline int hdmi_in0_interrupt_read(void) {
	return 3;
}
#define HDMI_IN1_INTERRUPT 4
static inline int hdmi_in1_interrupt_read(void) {
	return 4;
}
#define TIMER0_INTERRUPT 0
static inline int timer0_interrupt_read(void) {
	return 0;
}
#define UART_INTERRUPT 1
static inline int uart_interrupt_read(void) {
	return 1;
}
#define CSR_DATA_WIDTH 8
static inline int csr_data_width_read(void) {
	return 8;
}
#define SYSTEM_CLOCK_FREQUENCY 50000000
static inline int system_clock_frequency_read(void) {
	return 50000000;
}
#define SPIFLASH_PAGE_SIZE 256
static inline int spiflash_page_size_read(void) {
	return 256;
}
#define SPIFLASH_SECTOR_SIZE 65536
static inline int spiflash_sector_size_read(void) {
	return 65536;
}
#define L2_SIZE 8192
static inline int l2_size_read(void) {
	return 8192;
}
#define HDMI_IN0_DESCRIPTION "  The *third* HDMI port from the left.\r\n  Labeled J5 and HDMI In 1.\r\n"
static inline const char * hdmi_in0_description_read(void) {
	return "  The *third* HDMI port from the left.\r\n  Labeled J5 and HDMI In 1.\r\n";
}
#define HDMI_IN0_MNEMONIC "RX1"
static inline const char * hdmi_in0_mnemonic_read(void) {
	return "RX1";
}
#define HDMI_IN1_DESCRIPTION "  The *fourth* HDMI port from the left. (Closest to the USB.)\r\n  Labeled J4 and HDMI In 2.\r\n"
static inline const char * hdmi_in1_description_read(void) {
	return "  The *fourth* HDMI port from the left. (Closest to the USB.)\r\n  Labeled J4 and HDMI In 2.\r\n";
}
#define HDMI_IN1_MNEMONIC "RX2"
static inline const char * hdmi_in1_mnemonic_read(void) {
	return "RX2";
}
#define HDMI_OUT0_DESCRIPTION "  The *first* HDMI port from the left.\r\n  Labeled J3 and HDMI Out 1.\r\n"
static inline const char * hdmi_out0_description_read(void) {
	return "  The *first* HDMI port from the left.\r\n  Labeled J3 and HDMI Out 1.\r\n";
}
#define HDMI_OUT0_MNEMONIC "TX1"
static inline const char * hdmi_out0_mnemonic_read(void) {
	return "TX1";
}
#define HDMI_OUT1_DESCRIPTION "  The *second* HDMI port from the left.\r\n  Labeled J2 and HDMI Out 2.\r\n"
static inline const char * hdmi_out1_description_read(void) {
	return "  The *second* HDMI port from the left.\r\n  Labeled J2 and HDMI Out 2.\r\n";
}
#define HDMI_OUT1_MNEMONIC "TX2"
static inline const char * hdmi_out1_mnemonic_read(void) {
	return "TX2";
}
#define LOCALIP1 192
static inline int localip1_read(void) {
	return 192;
}
#define LOCALIP2 168
static inline int localip2_read(void) {
	return 168;
}
#define LOCALIP3 100
static inline int localip3_read(void) {
	return 100;
}
#define LOCALIP4 50
static inline int localip4_read(void) {
	return 50;
}
#define REMOTEIP1 192
static inline int remoteip1_read(void) {
	return 192;
}
#define REMOTEIP2 168
static inline int remoteip2_read(void) {
	return 168;
}
#define REMOTEIP3 100
static inline int remoteip3_read(void) {
	return 100;
}
#define REMOTEIP4 100
static inline int remoteip4_read(void) {
	return 100;
}
#define ETHMAC_RX_SLOTS 2
static inline int ethmac_rx_slots_read(void) {
	return 2;
}
#define ETHMAC_TX_SLOTS 2
static inline int ethmac_tx_slots_read(void) {
	return 2;
}
#define ETHMAC_SLOT_SIZE 2048
static inline int ethmac_slot_size_read(void) {
	return 2048;
}
#define HDMI_OUT0_DRIVER_CLOCKING_MAX_PIX_CLK 100000000
static inline int hdmi_out0_driver_clocking_max_pix_clk_read(void) {
	return 100000000;
}
#define HDMI_OUT0_DRIVER_CLOCKING_CLKFX_MD_MAX_1000 2000
static inline int hdmi_out0_driver_clocking_clkfx_md_max_1000_read(void) {
	return 2000;
}
#define CONFIG_CLOCK_FREQUENCY 50000000
static inline int config_clock_frequency_read(void) {
	return 50000000;
}
#define CONFIG_CPU_RESET_ADDR 0
static inline int config_cpu_reset_addr_read(void) {
	return 0;
}
#define CONFIG_CPU_TYPE "LM32"
static inline const char * config_cpu_type_read(void) {
	return "LM32";
}
#define CONFIG_CSR_DATA_WIDTH 8
static inline int config_csr_data_width_read(void) {
	return 8;
}

#endif
