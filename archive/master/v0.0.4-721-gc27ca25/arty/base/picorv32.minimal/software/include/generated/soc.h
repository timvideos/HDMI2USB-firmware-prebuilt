//--------------------------------------------------------------------------------
// Auto-generated by Migen (0d0e17a) & LiteX (02bfda5e) on 2020-01-30 16:29:47
//--------------------------------------------------------------------------------
#ifndef __GENERATED_SOC_H
#define __GENERATED_SOC_H
#define SPIFLASH_PAGE_SIZE 256
static inline int spiflash_page_size_read(void) {
	return 256;
}
#define SPIFLASH_SECTOR_SIZE 65536
static inline int spiflash_sector_size_read(void) {
	return 65536;
}
#define FLASH_BOOT_ADDRESS 539131904
static inline int flash_boot_address_read(void) {
	return 539131904;
}
#define READ_LEVELING_BITSLIP 3
static inline int read_leveling_bitslip_read(void) {
	return 3;
}
#define READ_LEVELING_DELAY 14
static inline int read_leveling_delay_read(void) {
	return 14;
}
#define CAS_LEDS_COUNT 4
static inline int cas_leds_count_read(void) {
	return 4;
}
#define CAS_SWITCHES_COUNT 4
static inline int cas_switches_count_read(void) {
	return 4;
}
#define CAS_BUTTONS_COUNT 4
static inline int cas_buttons_count_read(void) {
	return 4;
}
#define CONFIG_CLOCK_FREQUENCY 100000000
static inline int config_clock_frequency_read(void) {
	return 100000000;
}
#define CONFIG_CPU_RESET_ADDR 0
static inline int config_cpu_reset_addr_read(void) {
	return 0;
}
#define CONFIG_CPU_TYPE "PICORV32"
static inline const char * config_cpu_type_read(void) {
	return "PICORV32";
}
#define CONFIG_CPU_TYPE_PICORV32
#define CONFIG_CPU_VARIANT "MINIMAL"
static inline const char * config_cpu_variant_read(void) {
	return "MINIMAL";
}
#define CONFIG_CPU_VARIANT_MINIMAL
#define CONFIG_CSR_ALIGNMENT 32
static inline int config_csr_alignment_read(void) {
	return 32;
}
#define CONFIG_CSR_DATA_WIDTH 8
static inline int config_csr_data_width_read(void) {
	return 8;
}
#define CONFIG_L2_SIZE 8192
static inline int config_l2_size_read(void) {
	return 8192;
}
#define CONFIG_SHADOW_BASE 2147483648
static inline int config_shadow_base_read(void) {
	return 2147483648;
}
#define TIMER0_INTERRUPT 1
static inline int timer0_interrupt_read(void) {
	return 1;
}
#define UART_INTERRUPT 0
static inline int uart_interrupt_read(void) {
	return 0;
}

#endif
