//--------------------------------------------------------------------------------
// Auto-generated by Migen (0d0e17a) & LiteX (02bfda5e) on 2020-01-30 16:18:26
//--------------------------------------------------------------------------------
module top(
	input serial_rx,
	output reg serial_tx,
	input clk12,
	output user_led0,
	output user_led1,
	output user_led2,
	output user_led3,
	output user_led4,
	output user_led5,
	output user_led6,
	output user_led7,
	output user_led8,
	output user_led9,
	output user_led10,
	output user_led11,
	input user_btn0,
	input user_btn1,
	input user_btn2,
	input user_btn3,
	output reg spiflash_cs_n,
	output reg spiflash_clk,
	output reg spiflash_mosi,
	input spiflash_miso
);

wire ctrl_reset_reset_re;
wire ctrl_reset_reset_r;
wire ctrl_reset_reset_we;
reg ctrl_reset_reset_w = 1'd0;
reg [31:0] ctrl_storage = 32'd305419896;
reg ctrl_re = 1'd0;
wire [31:0] ctrl_bus_errors_status;
wire ctrl_bus_errors_we;
wire ctrl_reset;
wire ctrl_bus_error;
reg [31:0] ctrl_bus_errors = 32'd0;
wire cpu_reset;
wire [29:0] cpu_ibus_adr;
wire [31:0] cpu_ibus_dat_w;
wire [31:0] cpu_ibus_dat_r;
wire [3:0] cpu_ibus_sel;
wire cpu_ibus_cyc;
wire cpu_ibus_stb;
wire cpu_ibus_ack;
wire cpu_ibus_we;
wire [2:0] cpu_ibus_cti;
wire [1:0] cpu_ibus_bte;
wire cpu_ibus_err;
wire [29:0] cpu_dbus_adr;
wire [31:0] cpu_dbus_dat_w;
wire [31:0] cpu_dbus_dat_r;
wire [3:0] cpu_dbus_sel;
wire cpu_dbus_cyc;
wire cpu_dbus_stb;
wire cpu_dbus_ack;
wire cpu_dbus_we;
wire [2:0] cpu_dbus_cti;
wire [1:0] cpu_dbus_bte;
wire cpu_dbus_err;
reg [31:0] cpu_interrupt = 32'd0;
wire [31:0] cpu_i_adr_o;
wire [31:0] cpu_d_adr_o;
wire [29:0] interface0_soc_bus_adr;
wire [31:0] interface0_soc_bus_dat_w;
wire [31:0] interface0_soc_bus_dat_r;
wire [3:0] interface0_soc_bus_sel;
wire interface0_soc_bus_cyc;
wire interface0_soc_bus_stb;
wire interface0_soc_bus_ack;
wire interface0_soc_bus_we;
wire [2:0] interface0_soc_bus_cti;
wire [1:0] interface0_soc_bus_bte;
wire interface0_soc_bus_err;
wire [29:0] interface1_soc_bus_adr;
wire [31:0] interface1_soc_bus_dat_w;
wire [31:0] interface1_soc_bus_dat_r;
wire [3:0] interface1_soc_bus_sel;
wire interface1_soc_bus_cyc;
wire interface1_soc_bus_stb;
wire interface1_soc_bus_ack;
wire interface1_soc_bus_we;
wire [2:0] interface1_soc_bus_cti;
wire [1:0] interface1_soc_bus_bte;
wire interface1_soc_bus_err;
wire [29:0] sram_bus_adr;
wire [31:0] sram_bus_dat_w;
wire [31:0] sram_bus_dat_r;
wire [3:0] sram_bus_sel;
wire sram_bus_cyc;
wire sram_bus_stb;
reg sram_bus_ack = 1'd0;
wire sram_bus_we;
wire [2:0] sram_bus_cti;
wire [1:0] sram_bus_bte;
reg sram_bus_err = 1'd0;
wire [11:0] sram_adr;
wire [31:0] sram_dat_r;
reg [3:0] sram_we = 4'd0;
wire [31:0] sram_dat_w;
reg [31:0] uart_phy_storage = 32'd41231686;
reg uart_phy_re = 1'd0;
wire uart_phy_sink_valid;
reg uart_phy_sink_ready = 1'd0;
wire uart_phy_sink_first;
wire uart_phy_sink_last;
wire [7:0] uart_phy_sink_payload_data;
reg uart_phy_uart_clk_txen = 1'd0;
reg [31:0] uart_phy_phase_accumulator_tx = 32'd0;
reg [7:0] uart_phy_tx_reg = 8'd0;
reg [3:0] uart_phy_tx_bitcount = 4'd0;
reg uart_phy_tx_busy = 1'd0;
reg uart_phy_source_valid = 1'd0;
wire uart_phy_source_ready;
reg uart_phy_source_first = 1'd0;
reg uart_phy_source_last = 1'd0;
reg [7:0] uart_phy_source_payload_data = 8'd0;
reg uart_phy_uart_clk_rxen = 1'd0;
reg [31:0] uart_phy_phase_accumulator_rx = 32'd0;
wire uart_phy_rx;
reg uart_phy_rx_r = 1'd0;
reg [7:0] uart_phy_rx_reg = 8'd0;
reg [3:0] uart_phy_rx_bitcount = 4'd0;
reg uart_phy_rx_busy = 1'd0;
wire uart_rxtx_re;
wire [7:0] uart_rxtx_r;
wire uart_rxtx_we;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
wire uart_rxempty_status;
wire uart_rxempty_we;
wire uart_irq;
wire uart_tx_status;
reg uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg uart_tx_clear = 1'd0;
reg uart_tx_old_trigger = 1'd0;
wire uart_rx_status;
reg uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg uart_rx_clear = 1'd0;
reg uart_rx_old_trigger = 1'd0;
wire uart_eventmanager_status_re;
wire [1:0] uart_eventmanager_status_r;
wire uart_eventmanager_status_we;
reg [1:0] uart_eventmanager_status_w = 2'd0;
wire uart_eventmanager_pending_re;
wire [1:0] uart_eventmanager_pending_r;
wire uart_eventmanager_pending_we;
reg [1:0] uart_eventmanager_pending_w = 2'd0;
reg [1:0] uart_eventmanager_storage = 2'd0;
reg uart_eventmanager_re = 1'd0;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg uart_tx_fifo_sink_first = 1'd0;
reg uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg [4:0] uart_tx_fifo_level0 = 5'd0;
reg uart_tx_fifo_replace = 1'd0;
reg [3:0] uart_tx_fifo_produce = 4'd0;
reg [3:0] uart_tx_fifo_consume = 4'd0;
reg [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg [4:0] uart_rx_fifo_level0 = 5'd0;
reg uart_rx_fifo_replace = 1'd0;
reg [3:0] uart_rx_fifo_produce = 4'd0;
reg [3:0] uart_rx_fifo_consume = 4'd0;
reg [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg uart_reset = 1'd0;
reg [31:0] timer0_load_storage = 32'd0;
reg timer0_load_re = 1'd0;
reg [31:0] timer0_reload_storage = 32'd0;
reg timer0_reload_re = 1'd0;
reg timer0_en_storage = 1'd0;
reg timer0_en_re = 1'd0;
reg timer0_update_value_storage = 1'd0;
reg timer0_update_value_re = 1'd0;
reg [31:0] timer0_value_status = 32'd0;
wire timer0_value_we;
wire timer0_irq;
wire timer0_zero_status;
reg timer0_zero_pending = 1'd0;
wire timer0_zero_trigger;
reg timer0_zero_clear = 1'd0;
reg timer0_zero_old_trigger = 1'd0;
wire timer0_eventmanager_status_re;
wire timer0_eventmanager_status_r;
wire timer0_eventmanager_status_we;
wire timer0_eventmanager_status_w;
wire timer0_eventmanager_pending_re;
wire timer0_eventmanager_pending_r;
wire timer0_eventmanager_pending_we;
wire timer0_eventmanager_pending_w;
reg timer0_eventmanager_storage = 1'd0;
reg timer0_eventmanager_re = 1'd0;
reg [31:0] timer0_value = 32'd0;
reg [13:0] interface_adr = 14'd0;
reg interface_we = 1'd0;
wire [7:0] interface_dat_w;
wire [7:0] interface_dat_r;
wire [29:0] bus_wishbone_adr;
wire [31:0] bus_wishbone_dat_w;
wire [31:0] bus_wishbone_dat_r;
wire [3:0] bus_wishbone_sel;
wire bus_wishbone_cyc;
wire bus_wishbone_stb;
reg bus_wishbone_ack = 1'd0;
wire bus_wishbone_we;
wire [2:0] bus_wishbone_cti;
wire [1:0] bus_wishbone_bte;
reg bus_wishbone_err = 1'd0;
wire sys_clk;
wire sys_rst;
reg crg_reset = 1'd0;
wire por_clk;
wire por_rst;
reg [11:0] crg_reset_delay = 12'd4095;
wire [11:0] cas_leds;
reg [11:0] cas_leds_storage = 12'd0;
reg cas_leds_re = 1'd0;
wire cas_irq;
wire cas_eventsourceprocess0_status;
reg cas_eventsourceprocess0_pending = 1'd0;
wire cas_eventsourceprocess0_trigger;
reg cas_eventsourceprocess0_clear = 1'd0;
reg cas_eventsourceprocess0_old_trigger = 1'd0;
wire cas_waittimer0_wait;
wire cas_waittimer0_done;
reg [16:0] cas_waittimer0_count = 17'd120000;
wire cas_eventsourceprocess1_status;
reg cas_eventsourceprocess1_pending = 1'd0;
wire cas_eventsourceprocess1_trigger;
reg cas_eventsourceprocess1_clear = 1'd0;
reg cas_eventsourceprocess1_old_trigger = 1'd0;
wire cas_waittimer1_wait;
wire cas_waittimer1_done;
reg [16:0] cas_waittimer1_count = 17'd120000;
wire cas_eventsourceprocess2_status;
reg cas_eventsourceprocess2_pending = 1'd0;
wire cas_eventsourceprocess2_trigger;
reg cas_eventsourceprocess2_clear = 1'd0;
reg cas_eventsourceprocess2_old_trigger = 1'd0;
wire cas_waittimer2_wait;
wire cas_waittimer2_done;
reg [16:0] cas_waittimer2_count = 17'd120000;
wire cas_eventsourceprocess3_status;
reg cas_eventsourceprocess3_pending = 1'd0;
wire cas_eventsourceprocess3_trigger;
reg cas_eventsourceprocess3_clear = 1'd0;
reg cas_eventsourceprocess3_old_trigger = 1'd0;
wire cas_waittimer3_wait;
wire cas_waittimer3_done;
reg [16:0] cas_waittimer3_count = 17'd120000;
wire cas_eventmanager_status_re;
wire [3:0] cas_eventmanager_status_r;
wire cas_eventmanager_status_we;
reg [3:0] cas_eventmanager_status_w = 4'd0;
wire cas_eventmanager_pending_re;
wire [3:0] cas_eventmanager_pending_r;
wire cas_eventmanager_pending_we;
reg [3:0] cas_eventmanager_pending_w = 4'd0;
reg [3:0] cas_eventmanager_storage = 4'd0;
reg cas_eventmanager_re = 1'd0;
wire [29:0] bus_adr;
wire [31:0] bus_dat_w;
wire [31:0] bus_dat_r;
wire [3:0] bus_sel;
wire bus_cyc;
wire bus_stb;
reg bus_ack = 1'd0;
wire bus_we;
wire [2:0] bus_cti;
wire [1:0] bus_bte;
reg bus_err = 1'd0;
reg [3:0] bitbang_storage = 4'd0;
reg bitbang_re = 1'd0;
reg miso_status = 1'd0;
wire miso_we;
reg bitbang_en_storage = 1'd0;
reg bitbang_en_re = 1'd0;
reg cs_n = 1'd1;
reg clk = 1'd0;
reg [31:0] sr = 32'd0;
reg i = 1'd0;
reg miso = 1'd0;
reg [7:0] counter = 8'd0;
reg state = 1'd0;
reg next_state = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire [1:0] request;
reg grant = 1'd0;
reg [2:0] slave_sel = 3'd0;
reg [2:0] slave_sel_r = 3'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] csrbankarray_interface0_bank_bus_adr;
wire csrbankarray_interface0_bank_bus_we;
wire [7:0] csrbankarray_interface0_bank_bus_dat_w;
reg [7:0] csrbankarray_interface0_bank_bus_dat_r = 8'd0;
wire csrbankarray_csrbank0_leds_out1_re;
wire [3:0] csrbankarray_csrbank0_leds_out1_r;
wire csrbankarray_csrbank0_leds_out1_we;
wire [3:0] csrbankarray_csrbank0_leds_out1_w;
wire csrbankarray_csrbank0_leds_out0_re;
wire [7:0] csrbankarray_csrbank0_leds_out0_r;
wire csrbankarray_csrbank0_leds_out0_we;
wire [7:0] csrbankarray_csrbank0_leds_out0_w;
wire csrbankarray_csrbank0_buttons_ev_enable0_re;
wire [3:0] csrbankarray_csrbank0_buttons_ev_enable0_r;
wire csrbankarray_csrbank0_buttons_ev_enable0_we;
wire [3:0] csrbankarray_csrbank0_buttons_ev_enable0_w;
wire csrbankarray_csrbank0_sel;
wire [13:0] csrbankarray_interface1_bank_bus_adr;
wire csrbankarray_interface1_bank_bus_we;
wire [7:0] csrbankarray_interface1_bank_bus_dat_w;
reg [7:0] csrbankarray_interface1_bank_bus_dat_r = 8'd0;
wire csrbankarray_csrbank1_scratch3_re;
wire [7:0] csrbankarray_csrbank1_scratch3_r;
wire csrbankarray_csrbank1_scratch3_we;
wire [7:0] csrbankarray_csrbank1_scratch3_w;
wire csrbankarray_csrbank1_scratch2_re;
wire [7:0] csrbankarray_csrbank1_scratch2_r;
wire csrbankarray_csrbank1_scratch2_we;
wire [7:0] csrbankarray_csrbank1_scratch2_w;
wire csrbankarray_csrbank1_scratch1_re;
wire [7:0] csrbankarray_csrbank1_scratch1_r;
wire csrbankarray_csrbank1_scratch1_we;
wire [7:0] csrbankarray_csrbank1_scratch1_w;
wire csrbankarray_csrbank1_scratch0_re;
wire [7:0] csrbankarray_csrbank1_scratch0_r;
wire csrbankarray_csrbank1_scratch0_we;
wire [7:0] csrbankarray_csrbank1_scratch0_w;
wire csrbankarray_csrbank1_bus_errors3_re;
wire [7:0] csrbankarray_csrbank1_bus_errors3_r;
wire csrbankarray_csrbank1_bus_errors3_we;
wire [7:0] csrbankarray_csrbank1_bus_errors3_w;
wire csrbankarray_csrbank1_bus_errors2_re;
wire [7:0] csrbankarray_csrbank1_bus_errors2_r;
wire csrbankarray_csrbank1_bus_errors2_we;
wire [7:0] csrbankarray_csrbank1_bus_errors2_w;
wire csrbankarray_csrbank1_bus_errors1_re;
wire [7:0] csrbankarray_csrbank1_bus_errors1_r;
wire csrbankarray_csrbank1_bus_errors1_we;
wire [7:0] csrbankarray_csrbank1_bus_errors1_w;
wire csrbankarray_csrbank1_bus_errors0_re;
wire [7:0] csrbankarray_csrbank1_bus_errors0_r;
wire csrbankarray_csrbank1_bus_errors0_we;
wire [7:0] csrbankarray_csrbank1_bus_errors0_w;
wire csrbankarray_csrbank1_sel;
wire [13:0] csrbankarray_sram_bus_adr;
wire csrbankarray_sram_bus_we;
wire [7:0] csrbankarray_sram_bus_dat_w;
reg [7:0] csrbankarray_sram_bus_dat_r = 8'd0;
wire [2:0] csrbankarray_adr;
wire [7:0] csrbankarray_dat_r;
wire csrbankarray_sel;
reg csrbankarray_sel_r = 1'd0;
wire [13:0] csrbankarray_interface2_bank_bus_adr;
wire csrbankarray_interface2_bank_bus_we;
wire [7:0] csrbankarray_interface2_bank_bus_dat_w;
reg [7:0] csrbankarray_interface2_bank_bus_dat_r = 8'd0;
wire csrbankarray_csrbank2_bitbang0_re;
wire [3:0] csrbankarray_csrbank2_bitbang0_r;
wire csrbankarray_csrbank2_bitbang0_we;
wire [3:0] csrbankarray_csrbank2_bitbang0_w;
wire csrbankarray_csrbank2_miso_re;
wire csrbankarray_csrbank2_miso_r;
wire csrbankarray_csrbank2_miso_we;
wire csrbankarray_csrbank2_miso_w;
wire csrbankarray_csrbank2_bitbang_en0_re;
wire csrbankarray_csrbank2_bitbang_en0_r;
wire csrbankarray_csrbank2_bitbang_en0_we;
wire csrbankarray_csrbank2_bitbang_en0_w;
wire csrbankarray_csrbank2_sel;
wire [13:0] csrbankarray_interface3_bank_bus_adr;
wire csrbankarray_interface3_bank_bus_we;
wire [7:0] csrbankarray_interface3_bank_bus_dat_w;
reg [7:0] csrbankarray_interface3_bank_bus_dat_r = 8'd0;
wire csrbankarray_csrbank3_load3_re;
wire [7:0] csrbankarray_csrbank3_load3_r;
wire csrbankarray_csrbank3_load3_we;
wire [7:0] csrbankarray_csrbank3_load3_w;
wire csrbankarray_csrbank3_load2_re;
wire [7:0] csrbankarray_csrbank3_load2_r;
wire csrbankarray_csrbank3_load2_we;
wire [7:0] csrbankarray_csrbank3_load2_w;
wire csrbankarray_csrbank3_load1_re;
wire [7:0] csrbankarray_csrbank3_load1_r;
wire csrbankarray_csrbank3_load1_we;
wire [7:0] csrbankarray_csrbank3_load1_w;
wire csrbankarray_csrbank3_load0_re;
wire [7:0] csrbankarray_csrbank3_load0_r;
wire csrbankarray_csrbank3_load0_we;
wire [7:0] csrbankarray_csrbank3_load0_w;
wire csrbankarray_csrbank3_reload3_re;
wire [7:0] csrbankarray_csrbank3_reload3_r;
wire csrbankarray_csrbank3_reload3_we;
wire [7:0] csrbankarray_csrbank3_reload3_w;
wire csrbankarray_csrbank3_reload2_re;
wire [7:0] csrbankarray_csrbank3_reload2_r;
wire csrbankarray_csrbank3_reload2_we;
wire [7:0] csrbankarray_csrbank3_reload2_w;
wire csrbankarray_csrbank3_reload1_re;
wire [7:0] csrbankarray_csrbank3_reload1_r;
wire csrbankarray_csrbank3_reload1_we;
wire [7:0] csrbankarray_csrbank3_reload1_w;
wire csrbankarray_csrbank3_reload0_re;
wire [7:0] csrbankarray_csrbank3_reload0_r;
wire csrbankarray_csrbank3_reload0_we;
wire [7:0] csrbankarray_csrbank3_reload0_w;
wire csrbankarray_csrbank3_en0_re;
wire csrbankarray_csrbank3_en0_r;
wire csrbankarray_csrbank3_en0_we;
wire csrbankarray_csrbank3_en0_w;
wire csrbankarray_csrbank3_update_value0_re;
wire csrbankarray_csrbank3_update_value0_r;
wire csrbankarray_csrbank3_update_value0_we;
wire csrbankarray_csrbank3_update_value0_w;
wire csrbankarray_csrbank3_value3_re;
wire [7:0] csrbankarray_csrbank3_value3_r;
wire csrbankarray_csrbank3_value3_we;
wire [7:0] csrbankarray_csrbank3_value3_w;
wire csrbankarray_csrbank3_value2_re;
wire [7:0] csrbankarray_csrbank3_value2_r;
wire csrbankarray_csrbank3_value2_we;
wire [7:0] csrbankarray_csrbank3_value2_w;
wire csrbankarray_csrbank3_value1_re;
wire [7:0] csrbankarray_csrbank3_value1_r;
wire csrbankarray_csrbank3_value1_we;
wire [7:0] csrbankarray_csrbank3_value1_w;
wire csrbankarray_csrbank3_value0_re;
wire [7:0] csrbankarray_csrbank3_value0_r;
wire csrbankarray_csrbank3_value0_we;
wire [7:0] csrbankarray_csrbank3_value0_w;
wire csrbankarray_csrbank3_ev_enable0_re;
wire csrbankarray_csrbank3_ev_enable0_r;
wire csrbankarray_csrbank3_ev_enable0_we;
wire csrbankarray_csrbank3_ev_enable0_w;
wire csrbankarray_csrbank3_sel;
wire [13:0] csrbankarray_interface4_bank_bus_adr;
wire csrbankarray_interface4_bank_bus_we;
wire [7:0] csrbankarray_interface4_bank_bus_dat_w;
reg [7:0] csrbankarray_interface4_bank_bus_dat_r = 8'd0;
wire csrbankarray_csrbank4_txfull_re;
wire csrbankarray_csrbank4_txfull_r;
wire csrbankarray_csrbank4_txfull_we;
wire csrbankarray_csrbank4_txfull_w;
wire csrbankarray_csrbank4_rxempty_re;
wire csrbankarray_csrbank4_rxempty_r;
wire csrbankarray_csrbank4_rxempty_we;
wire csrbankarray_csrbank4_rxempty_w;
wire csrbankarray_csrbank4_ev_enable0_re;
wire [1:0] csrbankarray_csrbank4_ev_enable0_r;
wire csrbankarray_csrbank4_ev_enable0_we;
wire [1:0] csrbankarray_csrbank4_ev_enable0_w;
wire csrbankarray_csrbank4_sel;
wire [13:0] csrbankarray_interface5_bank_bus_adr;
wire csrbankarray_interface5_bank_bus_we;
wire [7:0] csrbankarray_interface5_bank_bus_dat_w;
reg [7:0] csrbankarray_interface5_bank_bus_dat_r = 8'd0;
wire csrbankarray_csrbank5_tuning_word3_re;
wire [7:0] csrbankarray_csrbank5_tuning_word3_r;
wire csrbankarray_csrbank5_tuning_word3_we;
wire [7:0] csrbankarray_csrbank5_tuning_word3_w;
wire csrbankarray_csrbank5_tuning_word2_re;
wire [7:0] csrbankarray_csrbank5_tuning_word2_r;
wire csrbankarray_csrbank5_tuning_word2_we;
wire [7:0] csrbankarray_csrbank5_tuning_word2_w;
wire csrbankarray_csrbank5_tuning_word1_re;
wire [7:0] csrbankarray_csrbank5_tuning_word1_r;
wire csrbankarray_csrbank5_tuning_word1_we;
wire [7:0] csrbankarray_csrbank5_tuning_word1_w;
wire csrbankarray_csrbank5_tuning_word0_re;
wire [7:0] csrbankarray_csrbank5_tuning_word0_r;
wire csrbankarray_csrbank5_tuning_word0_we;
wire [7:0] csrbankarray_csrbank5_tuning_word0_w;
wire csrbankarray_csrbank5_sel;
wire [13:0] csrcon_adr;
wire csrcon_we;
wire [7:0] csrcon_dat_w;
wire [7:0] csrcon_dat_r;
reg [29:0] array_muxed0 = 30'd0;
reg [31:0] array_muxed1 = 32'd0;
reg [3:0] array_muxed2 = 4'd0;
reg array_muxed3 = 1'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg [2:0] array_muxed6 = 3'd0;
reg [1:0] array_muxed7 = 2'd0;
reg regs0 = 1'd0;
reg regs1 = 1'd0;
wire rst1;

assign cpu_reset = ctrl_reset;
assign ctrl_bus_error = error;
always @(*) begin
	cpu_interrupt <= 32'd0;
	cpu_interrupt[1] <= timer0_irq;
	cpu_interrupt[0] <= uart_irq;
end
assign ctrl_reset = ctrl_reset_reset_re;
assign ctrl_bus_errors_status = ctrl_bus_errors;
assign cpu_ibus_adr = cpu_i_adr_o[31:2];
assign cpu_dbus_adr = cpu_d_adr_o[31:2];
assign interface0_soc_bus_adr = cpu_ibus_adr;
assign interface0_soc_bus_dat_w = cpu_ibus_dat_w;
assign cpu_ibus_dat_r = interface0_soc_bus_dat_r;
assign interface0_soc_bus_sel = cpu_ibus_sel;
assign interface0_soc_bus_cyc = cpu_ibus_cyc;
assign interface0_soc_bus_stb = cpu_ibus_stb;
assign cpu_ibus_ack = interface0_soc_bus_ack;
assign interface0_soc_bus_we = cpu_ibus_we;
assign interface0_soc_bus_cti = cpu_ibus_cti;
assign interface0_soc_bus_bte = cpu_ibus_bte;
assign cpu_ibus_err = interface0_soc_bus_err;
assign interface1_soc_bus_adr = cpu_dbus_adr;
assign interface1_soc_bus_dat_w = cpu_dbus_dat_w;
assign cpu_dbus_dat_r = interface1_soc_bus_dat_r;
assign interface1_soc_bus_sel = cpu_dbus_sel;
assign interface1_soc_bus_cyc = cpu_dbus_cyc;
assign interface1_soc_bus_stb = cpu_dbus_stb;
assign cpu_dbus_ack = interface1_soc_bus_ack;
assign interface1_soc_bus_we = cpu_dbus_we;
assign interface1_soc_bus_cti = cpu_dbus_cti;
assign interface1_soc_bus_bte = cpu_dbus_bte;
assign cpu_dbus_err = interface1_soc_bus_err;
always @(*) begin
	sram_we <= 4'd0;
	sram_we[0] <= (((sram_bus_cyc & sram_bus_stb) & sram_bus_we) & sram_bus_sel[0]);
	sram_we[1] <= (((sram_bus_cyc & sram_bus_stb) & sram_bus_we) & sram_bus_sel[1]);
	sram_we[2] <= (((sram_bus_cyc & sram_bus_stb) & sram_bus_we) & sram_bus_sel[2]);
	sram_we[3] <= (((sram_bus_cyc & sram_bus_stb) & sram_bus_we) & sram_bus_sel[3]);
end
assign sram_adr = sram_bus_adr[11:0];
assign sram_bus_dat_r = sram_dat_r;
assign sram_dat_w = sram_bus_dat_w;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_phy_sink_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_phy_sink_ready;
assign uart_phy_sink_first = uart_tx_fifo_source_first;
assign uart_phy_sink_last = uart_tx_fifo_source_last;
assign uart_phy_sink_payload_data = uart_tx_fifo_source_payload_data;
assign uart_tx_trigger = (~uart_tx_fifo_sink_ready);
assign uart_rx_fifo_sink_valid = uart_phy_source_valid;
assign uart_phy_source_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_phy_source_first;
assign uart_rx_fifo_sink_last = uart_phy_source_last;
assign uart_rx_fifo_sink_payload_data = uart_phy_source_payload_data;
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = uart_rx_clear;
assign uart_rx_trigger = (~uart_rx_fifo_source_valid);
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_eventmanager_pending_re & uart_eventmanager_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
always @(*) begin
	uart_eventmanager_status_w <= 2'd0;
	uart_eventmanager_status_w[0] <= uart_tx_status;
	uart_eventmanager_status_w[1] <= uart_rx_status;
end
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_eventmanager_pending_re & uart_eventmanager_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
always @(*) begin
	uart_eventmanager_pending_w <= 2'd0;
	uart_eventmanager_pending_w[0] <= uart_tx_pending;
	uart_eventmanager_pending_w[1] <= uart_rx_pending;
end
assign uart_irq = ((uart_eventmanager_pending_w[0] & uart_eventmanager_storage[0]) | (uart_eventmanager_pending_w[1] & uart_eventmanager_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer0_zero_trigger = (timer0_value != 1'd0);
assign timer0_eventmanager_status_w = timer0_zero_status;
always @(*) begin
	timer0_zero_clear <= 1'd0;
	if ((timer0_eventmanager_pending_re & timer0_eventmanager_pending_r)) begin
		timer0_zero_clear <= 1'd1;
	end
end
assign timer0_eventmanager_pending_w = timer0_zero_pending;
assign timer0_irq = (timer0_eventmanager_pending_w & timer0_eventmanager_storage);
assign timer0_zero_status = timer0_zero_trigger;
assign interface_dat_w = bus_wishbone_dat_w;
assign bus_wishbone_dat_r = interface_dat_r;
always @(*) begin
	interface_adr <= 14'd0;
	interface_we <= 1'd0;
	bus_wishbone_ack <= 1'd0;
	next_state <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			bus_wishbone_ack <= 1'd1;
			next_state <= 1'd0;
		end
		default: begin
			if ((bus_wishbone_cyc & bus_wishbone_stb)) begin
				interface_adr <= bus_wishbone_adr;
				interface_we <= bus_wishbone_we;
				next_state <= 1'd1;
			end
		end
	endcase
end
assign sys_clk = clk12;
assign por_clk = sys_clk;
assign sys_rst = (crg_reset_delay != 1'd0);
assign user_led0 = cas_leds[0];
assign user_led1 = cas_leds[1];
assign user_led2 = cas_leds[2];
assign user_led3 = cas_leds[3];
assign user_led4 = cas_leds[4];
assign user_led5 = cas_leds[5];
assign user_led6 = cas_leds[6];
assign user_led7 = cas_leds[7];
assign user_led8 = cas_leds[8];
assign user_led9 = cas_leds[9];
assign user_led10 = cas_leds[10];
assign user_led11 = cas_leds[11];
assign cas_waittimer0_wait = user_btn0;
assign cas_eventsourceprocess0_trigger = (~cas_waittimer0_done);
assign cas_waittimer1_wait = user_btn1;
assign cas_eventsourceprocess1_trigger = (~cas_waittimer1_done);
assign cas_waittimer2_wait = user_btn2;
assign cas_eventsourceprocess2_trigger = (~cas_waittimer2_done);
assign cas_waittimer3_wait = user_btn3;
assign cas_eventsourceprocess3_trigger = (~cas_waittimer3_done);
assign cas_leds = cas_leds_storage;
always @(*) begin
	cas_eventsourceprocess0_clear <= 1'd0;
	if ((cas_eventmanager_pending_re & cas_eventmanager_pending_r[0])) begin
		cas_eventsourceprocess0_clear <= 1'd1;
	end
end
always @(*) begin
	cas_eventsourceprocess1_clear <= 1'd0;
	if ((cas_eventmanager_pending_re & cas_eventmanager_pending_r[1])) begin
		cas_eventsourceprocess1_clear <= 1'd1;
	end
end
always @(*) begin
	cas_eventsourceprocess2_clear <= 1'd0;
	if ((cas_eventmanager_pending_re & cas_eventmanager_pending_r[2])) begin
		cas_eventsourceprocess2_clear <= 1'd1;
	end
end
always @(*) begin
	cas_eventmanager_status_w <= 4'd0;
	cas_eventmanager_status_w[0] <= cas_eventsourceprocess0_status;
	cas_eventmanager_status_w[1] <= cas_eventsourceprocess1_status;
	cas_eventmanager_status_w[2] <= cas_eventsourceprocess2_status;
	cas_eventmanager_status_w[3] <= cas_eventsourceprocess3_status;
end
always @(*) begin
	cas_eventsourceprocess3_clear <= 1'd0;
	if ((cas_eventmanager_pending_re & cas_eventmanager_pending_r[3])) begin
		cas_eventsourceprocess3_clear <= 1'd1;
	end
end
always @(*) begin
	cas_eventmanager_pending_w <= 4'd0;
	cas_eventmanager_pending_w[0] <= cas_eventsourceprocess0_pending;
	cas_eventmanager_pending_w[1] <= cas_eventsourceprocess1_pending;
	cas_eventmanager_pending_w[2] <= cas_eventsourceprocess2_pending;
	cas_eventmanager_pending_w[3] <= cas_eventsourceprocess3_pending;
end
assign cas_irq = ((((cas_eventmanager_pending_w[0] & cas_eventmanager_storage[0]) | (cas_eventmanager_pending_w[1] & cas_eventmanager_storage[1])) | (cas_eventmanager_pending_w[2] & cas_eventmanager_storage[2])) | (cas_eventmanager_pending_w[3] & cas_eventmanager_storage[3]));
assign cas_eventsourceprocess0_status = cas_eventsourceprocess0_trigger;
assign cas_eventsourceprocess1_status = cas_eventsourceprocess1_trigger;
assign cas_eventsourceprocess2_status = cas_eventsourceprocess2_trigger;
assign cas_eventsourceprocess3_status = cas_eventsourceprocess3_trigger;
assign cas_waittimer0_done = (cas_waittimer0_count == 1'd0);
assign cas_waittimer1_done = (cas_waittimer1_count == 1'd0);
assign cas_waittimer2_done = (cas_waittimer2_count == 1'd0);
assign cas_waittimer3_done = (cas_waittimer3_count == 1'd0);
assign bus_dat_r = sr;
always @(*) begin
	miso_status <= 1'd0;
	spiflash_mosi <= 1'd0;
	spiflash_cs_n <= 1'd0;
	spiflash_clk <= 1'd0;
	if (bitbang_en_storage) begin
		spiflash_clk <= bitbang_storage[1];
		spiflash_cs_n <= bitbang_storage[2];
		if (bitbang_storage[1]) begin
			miso_status <= spiflash_miso;
		end
		spiflash_mosi <= bitbang_storage[0];
	end else begin
		spiflash_clk <= clk;
		spiflash_cs_n <= cs_n;
		spiflash_mosi <= sr[31];
	end
end
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign interface0_soc_bus_dat_r = shared_dat_r;
assign interface1_soc_bus_dat_r = shared_dat_r;
assign interface0_soc_bus_ack = (shared_ack & (grant == 1'd0));
assign interface1_soc_bus_ack = (shared_ack & (grant == 1'd1));
assign interface0_soc_bus_err = (shared_err & (grant == 1'd0));
assign interface1_soc_bus_err = (shared_err & (grant == 1'd1));
assign request = {interface1_soc_bus_cyc, interface0_soc_bus_cyc};
always @(*) begin
	slave_sel <= 3'd0;
	slave_sel[0] <= (shared_adr[28:12] == 11'd1024);
	slave_sel[1] <= (shared_adr[28:22] == 2'd2);
	slave_sel[2] <= (shared_adr[28:18] == 10'd512);
end
assign sram_bus_adr = shared_adr;
assign sram_bus_dat_w = shared_dat_w;
assign sram_bus_sel = shared_sel;
assign sram_bus_stb = shared_stb;
assign sram_bus_we = shared_we;
assign sram_bus_cti = shared_cti;
assign sram_bus_bte = shared_bte;
assign bus_wishbone_adr = shared_adr;
assign bus_wishbone_dat_w = shared_dat_w;
assign bus_wishbone_sel = shared_sel;
assign bus_wishbone_stb = shared_stb;
assign bus_wishbone_we = shared_we;
assign bus_wishbone_cti = shared_cti;
assign bus_wishbone_bte = shared_bte;
assign bus_adr = shared_adr;
assign bus_dat_w = shared_dat_w;
assign bus_sel = shared_sel;
assign bus_stb = shared_stb;
assign bus_we = shared_we;
assign bus_cti = shared_cti;
assign bus_bte = shared_bte;
assign sram_bus_cyc = (shared_cyc & slave_sel[0]);
assign bus_wishbone_cyc = (shared_cyc & slave_sel[1]);
assign bus_cyc = (shared_cyc & slave_sel[2]);
assign shared_err = ((sram_bus_err | bus_wishbone_err) | bus_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	shared_ack <= 1'd0;
	shared_dat_r <= 32'd0;
	error <= 1'd0;
	shared_ack <= ((sram_bus_ack | bus_wishbone_ack) | bus_ack);
	shared_dat_r <= ((({32{slave_sel_r[0]}} & sram_bus_dat_r) | ({32{slave_sel_r[1]}} & bus_wishbone_dat_r)) | ({32{slave_sel_r[2]}} & bus_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbankarray_csrbank0_sel = (csrbankarray_interface0_bank_bus_adr[13:9] == 1'd1);
assign csrbankarray_csrbank0_leds_out1_r = csrbankarray_interface0_bank_bus_dat_w[3:0];
assign csrbankarray_csrbank0_leds_out1_re = ((csrbankarray_csrbank0_sel & csrbankarray_interface0_bank_bus_we) & (csrbankarray_interface0_bank_bus_adr[2:0] == 1'd0));
assign csrbankarray_csrbank0_leds_out1_we = ((csrbankarray_csrbank0_sel & (~csrbankarray_interface0_bank_bus_we)) & (csrbankarray_interface0_bank_bus_adr[2:0] == 1'd0));
assign csrbankarray_csrbank0_leds_out0_r = csrbankarray_interface0_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank0_leds_out0_re = ((csrbankarray_csrbank0_sel & csrbankarray_interface0_bank_bus_we) & (csrbankarray_interface0_bank_bus_adr[2:0] == 1'd1));
assign csrbankarray_csrbank0_leds_out0_we = ((csrbankarray_csrbank0_sel & (~csrbankarray_interface0_bank_bus_we)) & (csrbankarray_interface0_bank_bus_adr[2:0] == 1'd1));
assign cas_eventmanager_status_r = csrbankarray_interface0_bank_bus_dat_w[3:0];
assign cas_eventmanager_status_re = ((csrbankarray_csrbank0_sel & csrbankarray_interface0_bank_bus_we) & (csrbankarray_interface0_bank_bus_adr[2:0] == 2'd2));
assign cas_eventmanager_status_we = ((csrbankarray_csrbank0_sel & (~csrbankarray_interface0_bank_bus_we)) & (csrbankarray_interface0_bank_bus_adr[2:0] == 2'd2));
assign cas_eventmanager_pending_r = csrbankarray_interface0_bank_bus_dat_w[3:0];
assign cas_eventmanager_pending_re = ((csrbankarray_csrbank0_sel & csrbankarray_interface0_bank_bus_we) & (csrbankarray_interface0_bank_bus_adr[2:0] == 2'd3));
assign cas_eventmanager_pending_we = ((csrbankarray_csrbank0_sel & (~csrbankarray_interface0_bank_bus_we)) & (csrbankarray_interface0_bank_bus_adr[2:0] == 2'd3));
assign csrbankarray_csrbank0_buttons_ev_enable0_r = csrbankarray_interface0_bank_bus_dat_w[3:0];
assign csrbankarray_csrbank0_buttons_ev_enable0_re = ((csrbankarray_csrbank0_sel & csrbankarray_interface0_bank_bus_we) & (csrbankarray_interface0_bank_bus_adr[2:0] == 3'd4));
assign csrbankarray_csrbank0_buttons_ev_enable0_we = ((csrbankarray_csrbank0_sel & (~csrbankarray_interface0_bank_bus_we)) & (csrbankarray_interface0_bank_bus_adr[2:0] == 3'd4));
assign csrbankarray_csrbank0_leds_out1_w = cas_leds_storage[11:8];
assign csrbankarray_csrbank0_leds_out0_w = cas_leds_storage[7:0];
assign csrbankarray_csrbank0_buttons_ev_enable0_w = cas_eventmanager_storage[3:0];
assign csrbankarray_csrbank1_sel = (csrbankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign ctrl_reset_reset_r = csrbankarray_interface1_bank_bus_dat_w[0];
assign ctrl_reset_reset_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 1'd0));
assign ctrl_reset_reset_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 1'd0));
assign csrbankarray_csrbank1_scratch3_r = csrbankarray_interface1_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank1_scratch3_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 1'd1));
assign csrbankarray_csrbank1_scratch3_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 1'd1));
assign csrbankarray_csrbank1_scratch2_r = csrbankarray_interface1_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank1_scratch2_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 2'd2));
assign csrbankarray_csrbank1_scratch2_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 2'd2));
assign csrbankarray_csrbank1_scratch1_r = csrbankarray_interface1_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank1_scratch1_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 2'd3));
assign csrbankarray_csrbank1_scratch1_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 2'd3));
assign csrbankarray_csrbank1_scratch0_r = csrbankarray_interface1_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank1_scratch0_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 3'd4));
assign csrbankarray_csrbank1_scratch0_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 3'd4));
assign csrbankarray_csrbank1_bus_errors3_r = csrbankarray_interface1_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank1_bus_errors3_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 3'd5));
assign csrbankarray_csrbank1_bus_errors3_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 3'd5));
assign csrbankarray_csrbank1_bus_errors2_r = csrbankarray_interface1_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank1_bus_errors2_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 3'd6));
assign csrbankarray_csrbank1_bus_errors2_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 3'd6));
assign csrbankarray_csrbank1_bus_errors1_r = csrbankarray_interface1_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank1_bus_errors1_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 3'd7));
assign csrbankarray_csrbank1_bus_errors1_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 3'd7));
assign csrbankarray_csrbank1_bus_errors0_r = csrbankarray_interface1_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank1_bus_errors0_re = ((csrbankarray_csrbank1_sel & csrbankarray_interface1_bank_bus_we) & (csrbankarray_interface1_bank_bus_adr[3:0] == 4'd8));
assign csrbankarray_csrbank1_bus_errors0_we = ((csrbankarray_csrbank1_sel & (~csrbankarray_interface1_bank_bus_we)) & (csrbankarray_interface1_bank_bus_adr[3:0] == 4'd8));
assign csrbankarray_csrbank1_scratch3_w = ctrl_storage[31:24];
assign csrbankarray_csrbank1_scratch2_w = ctrl_storage[23:16];
assign csrbankarray_csrbank1_scratch1_w = ctrl_storage[15:8];
assign csrbankarray_csrbank1_scratch0_w = ctrl_storage[7:0];
assign csrbankarray_csrbank1_bus_errors3_w = ctrl_bus_errors_status[31:24];
assign csrbankarray_csrbank1_bus_errors2_w = ctrl_bus_errors_status[23:16];
assign csrbankarray_csrbank1_bus_errors1_w = ctrl_bus_errors_status[15:8];
assign csrbankarray_csrbank1_bus_errors0_w = ctrl_bus_errors_status[7:0];
assign ctrl_bus_errors_we = csrbankarray_csrbank1_bus_errors0_we;
assign csrbankarray_sel = (csrbankarray_sram_bus_adr[13:9] == 3'd6);
always @(*) begin
	csrbankarray_sram_bus_dat_r <= 8'd0;
	if (csrbankarray_sel_r) begin
		csrbankarray_sram_bus_dat_r <= csrbankarray_dat_r;
	end
end
assign csrbankarray_adr = csrbankarray_sram_bus_adr[2:0];
assign csrbankarray_csrbank2_sel = (csrbankarray_interface2_bank_bus_adr[13:9] == 1'd0);
assign csrbankarray_csrbank2_bitbang0_r = csrbankarray_interface2_bank_bus_dat_w[3:0];
assign csrbankarray_csrbank2_bitbang0_re = ((csrbankarray_csrbank2_sel & csrbankarray_interface2_bank_bus_we) & (csrbankarray_interface2_bank_bus_adr[1:0] == 1'd0));
assign csrbankarray_csrbank2_bitbang0_we = ((csrbankarray_csrbank2_sel & (~csrbankarray_interface2_bank_bus_we)) & (csrbankarray_interface2_bank_bus_adr[1:0] == 1'd0));
assign csrbankarray_csrbank2_miso_r = csrbankarray_interface2_bank_bus_dat_w[0];
assign csrbankarray_csrbank2_miso_re = ((csrbankarray_csrbank2_sel & csrbankarray_interface2_bank_bus_we) & (csrbankarray_interface2_bank_bus_adr[1:0] == 1'd1));
assign csrbankarray_csrbank2_miso_we = ((csrbankarray_csrbank2_sel & (~csrbankarray_interface2_bank_bus_we)) & (csrbankarray_interface2_bank_bus_adr[1:0] == 1'd1));
assign csrbankarray_csrbank2_bitbang_en0_r = csrbankarray_interface2_bank_bus_dat_w[0];
assign csrbankarray_csrbank2_bitbang_en0_re = ((csrbankarray_csrbank2_sel & csrbankarray_interface2_bank_bus_we) & (csrbankarray_interface2_bank_bus_adr[1:0] == 2'd2));
assign csrbankarray_csrbank2_bitbang_en0_we = ((csrbankarray_csrbank2_sel & (~csrbankarray_interface2_bank_bus_we)) & (csrbankarray_interface2_bank_bus_adr[1:0] == 2'd2));
assign csrbankarray_csrbank2_bitbang0_w = bitbang_storage[3:0];
assign csrbankarray_csrbank2_miso_w = miso_status;
assign miso_we = csrbankarray_csrbank2_miso_we;
assign csrbankarray_csrbank2_bitbang_en0_w = bitbang_en_storage;
assign csrbankarray_csrbank3_sel = (csrbankarray_interface3_bank_bus_adr[13:9] == 3'd7);
assign csrbankarray_csrbank3_load3_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_load3_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 1'd0));
assign csrbankarray_csrbank3_load3_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 1'd0));
assign csrbankarray_csrbank3_load2_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_load2_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 1'd1));
assign csrbankarray_csrbank3_load2_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 1'd1));
assign csrbankarray_csrbank3_load1_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_load1_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 2'd2));
assign csrbankarray_csrbank3_load1_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 2'd2));
assign csrbankarray_csrbank3_load0_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_load0_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 2'd3));
assign csrbankarray_csrbank3_load0_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 2'd3));
assign csrbankarray_csrbank3_reload3_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_reload3_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 3'd4));
assign csrbankarray_csrbank3_reload3_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 3'd4));
assign csrbankarray_csrbank3_reload2_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_reload2_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 3'd5));
assign csrbankarray_csrbank3_reload2_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 3'd5));
assign csrbankarray_csrbank3_reload1_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_reload1_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 3'd6));
assign csrbankarray_csrbank3_reload1_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 3'd6));
assign csrbankarray_csrbank3_reload0_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_reload0_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 3'd7));
assign csrbankarray_csrbank3_reload0_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 3'd7));
assign csrbankarray_csrbank3_en0_r = csrbankarray_interface3_bank_bus_dat_w[0];
assign csrbankarray_csrbank3_en0_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd8));
assign csrbankarray_csrbank3_en0_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd8));
assign csrbankarray_csrbank3_update_value0_r = csrbankarray_interface3_bank_bus_dat_w[0];
assign csrbankarray_csrbank3_update_value0_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd9));
assign csrbankarray_csrbank3_update_value0_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd9));
assign csrbankarray_csrbank3_value3_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_value3_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd10));
assign csrbankarray_csrbank3_value3_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd10));
assign csrbankarray_csrbank3_value2_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_value2_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd11));
assign csrbankarray_csrbank3_value2_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd11));
assign csrbankarray_csrbank3_value1_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_value1_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd12));
assign csrbankarray_csrbank3_value1_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd12));
assign csrbankarray_csrbank3_value0_r = csrbankarray_interface3_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank3_value0_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd13));
assign csrbankarray_csrbank3_value0_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd13));
assign timer0_eventmanager_status_r = csrbankarray_interface3_bank_bus_dat_w[0];
assign timer0_eventmanager_status_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd14));
assign timer0_eventmanager_status_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd14));
assign timer0_eventmanager_pending_r = csrbankarray_interface3_bank_bus_dat_w[0];
assign timer0_eventmanager_pending_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd15));
assign timer0_eventmanager_pending_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 4'd15));
assign csrbankarray_csrbank3_ev_enable0_r = csrbankarray_interface3_bank_bus_dat_w[0];
assign csrbankarray_csrbank3_ev_enable0_re = ((csrbankarray_csrbank3_sel & csrbankarray_interface3_bank_bus_we) & (csrbankarray_interface3_bank_bus_adr[4:0] == 5'd16));
assign csrbankarray_csrbank3_ev_enable0_we = ((csrbankarray_csrbank3_sel & (~csrbankarray_interface3_bank_bus_we)) & (csrbankarray_interface3_bank_bus_adr[4:0] == 5'd16));
assign csrbankarray_csrbank3_load3_w = timer0_load_storage[31:24];
assign csrbankarray_csrbank3_load2_w = timer0_load_storage[23:16];
assign csrbankarray_csrbank3_load1_w = timer0_load_storage[15:8];
assign csrbankarray_csrbank3_load0_w = timer0_load_storage[7:0];
assign csrbankarray_csrbank3_reload3_w = timer0_reload_storage[31:24];
assign csrbankarray_csrbank3_reload2_w = timer0_reload_storage[23:16];
assign csrbankarray_csrbank3_reload1_w = timer0_reload_storage[15:8];
assign csrbankarray_csrbank3_reload0_w = timer0_reload_storage[7:0];
assign csrbankarray_csrbank3_en0_w = timer0_en_storage;
assign csrbankarray_csrbank3_update_value0_w = timer0_update_value_storage;
assign csrbankarray_csrbank3_value3_w = timer0_value_status[31:24];
assign csrbankarray_csrbank3_value2_w = timer0_value_status[23:16];
assign csrbankarray_csrbank3_value1_w = timer0_value_status[15:8];
assign csrbankarray_csrbank3_value0_w = timer0_value_status[7:0];
assign timer0_value_we = csrbankarray_csrbank3_value0_we;
assign csrbankarray_csrbank3_ev_enable0_w = timer0_eventmanager_storage;
assign csrbankarray_csrbank4_sel = (csrbankarray_interface4_bank_bus_adr[13:9] == 3'd5);
assign uart_rxtx_r = csrbankarray_interface4_bank_bus_dat_w[7:0];
assign uart_rxtx_re = ((csrbankarray_csrbank4_sel & csrbankarray_interface4_bank_bus_we) & (csrbankarray_interface4_bank_bus_adr[2:0] == 1'd0));
assign uart_rxtx_we = ((csrbankarray_csrbank4_sel & (~csrbankarray_interface4_bank_bus_we)) & (csrbankarray_interface4_bank_bus_adr[2:0] == 1'd0));
assign csrbankarray_csrbank4_txfull_r = csrbankarray_interface4_bank_bus_dat_w[0];
assign csrbankarray_csrbank4_txfull_re = ((csrbankarray_csrbank4_sel & csrbankarray_interface4_bank_bus_we) & (csrbankarray_interface4_bank_bus_adr[2:0] == 1'd1));
assign csrbankarray_csrbank4_txfull_we = ((csrbankarray_csrbank4_sel & (~csrbankarray_interface4_bank_bus_we)) & (csrbankarray_interface4_bank_bus_adr[2:0] == 1'd1));
assign csrbankarray_csrbank4_rxempty_r = csrbankarray_interface4_bank_bus_dat_w[0];
assign csrbankarray_csrbank4_rxempty_re = ((csrbankarray_csrbank4_sel & csrbankarray_interface4_bank_bus_we) & (csrbankarray_interface4_bank_bus_adr[2:0] == 2'd2));
assign csrbankarray_csrbank4_rxempty_we = ((csrbankarray_csrbank4_sel & (~csrbankarray_interface4_bank_bus_we)) & (csrbankarray_interface4_bank_bus_adr[2:0] == 2'd2));
assign uart_eventmanager_status_r = csrbankarray_interface4_bank_bus_dat_w[1:0];
assign uart_eventmanager_status_re = ((csrbankarray_csrbank4_sel & csrbankarray_interface4_bank_bus_we) & (csrbankarray_interface4_bank_bus_adr[2:0] == 2'd3));
assign uart_eventmanager_status_we = ((csrbankarray_csrbank4_sel & (~csrbankarray_interface4_bank_bus_we)) & (csrbankarray_interface4_bank_bus_adr[2:0] == 2'd3));
assign uart_eventmanager_pending_r = csrbankarray_interface4_bank_bus_dat_w[1:0];
assign uart_eventmanager_pending_re = ((csrbankarray_csrbank4_sel & csrbankarray_interface4_bank_bus_we) & (csrbankarray_interface4_bank_bus_adr[2:0] == 3'd4));
assign uart_eventmanager_pending_we = ((csrbankarray_csrbank4_sel & (~csrbankarray_interface4_bank_bus_we)) & (csrbankarray_interface4_bank_bus_adr[2:0] == 3'd4));
assign csrbankarray_csrbank4_ev_enable0_r = csrbankarray_interface4_bank_bus_dat_w[1:0];
assign csrbankarray_csrbank4_ev_enable0_re = ((csrbankarray_csrbank4_sel & csrbankarray_interface4_bank_bus_we) & (csrbankarray_interface4_bank_bus_adr[2:0] == 3'd5));
assign csrbankarray_csrbank4_ev_enable0_we = ((csrbankarray_csrbank4_sel & (~csrbankarray_interface4_bank_bus_we)) & (csrbankarray_interface4_bank_bus_adr[2:0] == 3'd5));
assign csrbankarray_csrbank4_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbankarray_csrbank4_txfull_we;
assign csrbankarray_csrbank4_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbankarray_csrbank4_rxempty_we;
assign csrbankarray_csrbank4_ev_enable0_w = uart_eventmanager_storage[1:0];
assign csrbankarray_csrbank5_sel = (csrbankarray_interface5_bank_bus_adr[13:9] == 3'd4);
assign csrbankarray_csrbank5_tuning_word3_r = csrbankarray_interface5_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank5_tuning_word3_re = ((csrbankarray_csrbank5_sel & csrbankarray_interface5_bank_bus_we) & (csrbankarray_interface5_bank_bus_adr[1:0] == 1'd0));
assign csrbankarray_csrbank5_tuning_word3_we = ((csrbankarray_csrbank5_sel & (~csrbankarray_interface5_bank_bus_we)) & (csrbankarray_interface5_bank_bus_adr[1:0] == 1'd0));
assign csrbankarray_csrbank5_tuning_word2_r = csrbankarray_interface5_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank5_tuning_word2_re = ((csrbankarray_csrbank5_sel & csrbankarray_interface5_bank_bus_we) & (csrbankarray_interface5_bank_bus_adr[1:0] == 1'd1));
assign csrbankarray_csrbank5_tuning_word2_we = ((csrbankarray_csrbank5_sel & (~csrbankarray_interface5_bank_bus_we)) & (csrbankarray_interface5_bank_bus_adr[1:0] == 1'd1));
assign csrbankarray_csrbank5_tuning_word1_r = csrbankarray_interface5_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank5_tuning_word1_re = ((csrbankarray_csrbank5_sel & csrbankarray_interface5_bank_bus_we) & (csrbankarray_interface5_bank_bus_adr[1:0] == 2'd2));
assign csrbankarray_csrbank5_tuning_word1_we = ((csrbankarray_csrbank5_sel & (~csrbankarray_interface5_bank_bus_we)) & (csrbankarray_interface5_bank_bus_adr[1:0] == 2'd2));
assign csrbankarray_csrbank5_tuning_word0_r = csrbankarray_interface5_bank_bus_dat_w[7:0];
assign csrbankarray_csrbank5_tuning_word0_re = ((csrbankarray_csrbank5_sel & csrbankarray_interface5_bank_bus_we) & (csrbankarray_interface5_bank_bus_adr[1:0] == 2'd3));
assign csrbankarray_csrbank5_tuning_word0_we = ((csrbankarray_csrbank5_sel & (~csrbankarray_interface5_bank_bus_we)) & (csrbankarray_interface5_bank_bus_adr[1:0] == 2'd3));
assign csrbankarray_csrbank5_tuning_word3_w = uart_phy_storage[31:24];
assign csrbankarray_csrbank5_tuning_word2_w = uart_phy_storage[23:16];
assign csrbankarray_csrbank5_tuning_word1_w = uart_phy_storage[15:8];
assign csrbankarray_csrbank5_tuning_word0_w = uart_phy_storage[7:0];
assign csrcon_adr = interface_adr;
assign csrcon_we = interface_we;
assign csrcon_dat_w = interface_dat_w;
assign interface_dat_r = csrcon_dat_r;
assign csrbankarray_interface0_bank_bus_adr = csrcon_adr;
assign csrbankarray_interface1_bank_bus_adr = csrcon_adr;
assign csrbankarray_interface2_bank_bus_adr = csrcon_adr;
assign csrbankarray_interface3_bank_bus_adr = csrcon_adr;
assign csrbankarray_interface4_bank_bus_adr = csrcon_adr;
assign csrbankarray_interface5_bank_bus_adr = csrcon_adr;
assign csrbankarray_sram_bus_adr = csrcon_adr;
assign csrbankarray_interface0_bank_bus_we = csrcon_we;
assign csrbankarray_interface1_bank_bus_we = csrcon_we;
assign csrbankarray_interface2_bank_bus_we = csrcon_we;
assign csrbankarray_interface3_bank_bus_we = csrcon_we;
assign csrbankarray_interface4_bank_bus_we = csrcon_we;
assign csrbankarray_interface5_bank_bus_we = csrcon_we;
assign csrbankarray_sram_bus_we = csrcon_we;
assign csrbankarray_interface0_bank_bus_dat_w = csrcon_dat_w;
assign csrbankarray_interface1_bank_bus_dat_w = csrcon_dat_w;
assign csrbankarray_interface2_bank_bus_dat_w = csrcon_dat_w;
assign csrbankarray_interface3_bank_bus_dat_w = csrcon_dat_w;
assign csrbankarray_interface4_bank_bus_dat_w = csrcon_dat_w;
assign csrbankarray_interface5_bank_bus_dat_w = csrcon_dat_w;
assign csrbankarray_sram_bus_dat_w = csrcon_dat_w;
assign csrcon_dat_r = ((((((csrbankarray_interface0_bank_bus_dat_r | csrbankarray_interface1_bank_bus_dat_r) | csrbankarray_interface2_bank_bus_dat_r) | csrbankarray_interface3_bank_bus_dat_r) | csrbankarray_interface4_bank_bus_dat_r) | csrbankarray_interface5_bank_bus_dat_r) | csrbankarray_sram_bus_dat_r);
always @(*) begin
	array_muxed0 <= 30'd0;
	case (grant)
		1'd0: begin
			array_muxed0 <= interface0_soc_bus_adr;
		end
		default: begin
			array_muxed0 <= interface1_soc_bus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (grant)
		1'd0: begin
			array_muxed1 <= interface0_soc_bus_dat_w;
		end
		default: begin
			array_muxed1 <= interface1_soc_bus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (grant)
		1'd0: begin
			array_muxed2 <= interface0_soc_bus_sel;
		end
		default: begin
			array_muxed2 <= interface1_soc_bus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed3 <= interface0_soc_bus_cyc;
		end
		default: begin
			array_muxed3 <= interface1_soc_bus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed4 <= interface0_soc_bus_stb;
		end
		default: begin
			array_muxed4 <= interface1_soc_bus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed5 <= interface0_soc_bus_we;
		end
		default: begin
			array_muxed5 <= interface1_soc_bus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (grant)
		1'd0: begin
			array_muxed6 <= interface0_soc_bus_cti;
		end
		default: begin
			array_muxed6 <= interface1_soc_bus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (grant)
		1'd0: begin
			array_muxed7 <= interface0_soc_bus_bte;
		end
		default: begin
			array_muxed7 <= interface1_soc_bus_bte;
		end
	endcase
end
assign uart_phy_rx = regs1;

always @(posedge por_clk) begin
	if ((crg_reset_delay != 1'd0)) begin
		crg_reset_delay <= (crg_reset_delay - 1'd1);
	end
	if (por_rst) begin
		crg_reset_delay <= 12'd4095;
	end
end

always @(posedge sys_clk) begin
	if ((ctrl_bus_errors != 32'd4294967295)) begin
		if (ctrl_bus_error) begin
			ctrl_bus_errors <= (ctrl_bus_errors + 1'd1);
		end
	end
	sram_bus_ack <= 1'd0;
	if (((sram_bus_cyc & sram_bus_stb) & (~sram_bus_ack))) begin
		sram_bus_ack <= 1'd1;
	end
	uart_phy_sink_ready <= 1'd0;
	if (((uart_phy_sink_valid & (~uart_phy_tx_busy)) & (~uart_phy_sink_ready))) begin
		uart_phy_tx_reg <= uart_phy_sink_payload_data;
		uart_phy_tx_bitcount <= 1'd0;
		uart_phy_tx_busy <= 1'd1;
		serial_tx <= 1'd0;
	end else begin
		if ((uart_phy_uart_clk_txen & uart_phy_tx_busy)) begin
			uart_phy_tx_bitcount <= (uart_phy_tx_bitcount + 1'd1);
			if ((uart_phy_tx_bitcount == 4'd8)) begin
				serial_tx <= 1'd1;
			end else begin
				if ((uart_phy_tx_bitcount == 4'd9)) begin
					serial_tx <= 1'd1;
					uart_phy_tx_busy <= 1'd0;
					uart_phy_sink_ready <= 1'd1;
				end else begin
					serial_tx <= uart_phy_tx_reg[0];
					uart_phy_tx_reg <= {1'd0, uart_phy_tx_reg[7:1]};
				end
			end
		end
	end
	if (uart_phy_tx_busy) begin
		{uart_phy_uart_clk_txen, uart_phy_phase_accumulator_tx} <= (uart_phy_phase_accumulator_tx + uart_phy_storage);
	end else begin
		{uart_phy_uart_clk_txen, uart_phy_phase_accumulator_tx} <= 1'd0;
	end
	uart_phy_source_valid <= 1'd0;
	uart_phy_rx_r <= uart_phy_rx;
	if ((~uart_phy_rx_busy)) begin
		if (((~uart_phy_rx) & uart_phy_rx_r)) begin
			uart_phy_rx_busy <= 1'd1;
			uart_phy_rx_bitcount <= 1'd0;
		end
	end else begin
		if (uart_phy_uart_clk_rxen) begin
			uart_phy_rx_bitcount <= (uart_phy_rx_bitcount + 1'd1);
			if ((uart_phy_rx_bitcount == 1'd0)) begin
				if (uart_phy_rx) begin
					uart_phy_rx_busy <= 1'd0;
				end
			end else begin
				if ((uart_phy_rx_bitcount == 4'd9)) begin
					uart_phy_rx_busy <= 1'd0;
					if (uart_phy_rx) begin
						uart_phy_source_payload_data <= uart_phy_rx_reg;
						uart_phy_source_valid <= 1'd1;
					end
				end else begin
					uart_phy_rx_reg <= {uart_phy_rx, uart_phy_rx_reg[7:1]};
				end
			end
		end
	end
	if (uart_phy_rx_busy) begin
		{uart_phy_uart_clk_rxen, uart_phy_phase_accumulator_rx} <= (uart_phy_phase_accumulator_rx + uart_phy_storage);
	end else begin
		{uart_phy_uart_clk_rxen, uart_phy_phase_accumulator_rx} <= 32'd2147483648;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_old_trigger <= uart_tx_trigger;
	if (((~uart_tx_trigger) & uart_tx_old_trigger)) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_old_trigger <= uart_rx_trigger;
	if (((~uart_rx_trigger) & uart_rx_old_trigger)) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (uart_reset) begin
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
	end
	if (timer0_en_storage) begin
		if ((timer0_value == 1'd0)) begin
			timer0_value <= timer0_reload_storage;
		end else begin
			timer0_value <= (timer0_value - 1'd1);
		end
	end else begin
		timer0_value <= timer0_load_storage;
	end
	if (timer0_update_value_re) begin
		timer0_value_status <= timer0_value;
	end
	if (timer0_zero_clear) begin
		timer0_zero_pending <= 1'd0;
	end
	timer0_zero_old_trigger <= timer0_zero_trigger;
	if (((~timer0_zero_trigger) & timer0_zero_old_trigger)) begin
		timer0_zero_pending <= 1'd1;
	end
	state <= next_state;
	if (cas_eventsourceprocess0_clear) begin
		cas_eventsourceprocess0_pending <= 1'd0;
	end
	cas_eventsourceprocess0_old_trigger <= cas_eventsourceprocess0_trigger;
	if (((~cas_eventsourceprocess0_trigger) & cas_eventsourceprocess0_old_trigger)) begin
		cas_eventsourceprocess0_pending <= 1'd1;
	end
	if (cas_eventsourceprocess1_clear) begin
		cas_eventsourceprocess1_pending <= 1'd0;
	end
	cas_eventsourceprocess1_old_trigger <= cas_eventsourceprocess1_trigger;
	if (((~cas_eventsourceprocess1_trigger) & cas_eventsourceprocess1_old_trigger)) begin
		cas_eventsourceprocess1_pending <= 1'd1;
	end
	if (cas_eventsourceprocess2_clear) begin
		cas_eventsourceprocess2_pending <= 1'd0;
	end
	cas_eventsourceprocess2_old_trigger <= cas_eventsourceprocess2_trigger;
	if (((~cas_eventsourceprocess2_trigger) & cas_eventsourceprocess2_old_trigger)) begin
		cas_eventsourceprocess2_pending <= 1'd1;
	end
	if (cas_eventsourceprocess3_clear) begin
		cas_eventsourceprocess3_pending <= 1'd0;
	end
	cas_eventsourceprocess3_old_trigger <= cas_eventsourceprocess3_trigger;
	if (((~cas_eventsourceprocess3_trigger) & cas_eventsourceprocess3_old_trigger)) begin
		cas_eventsourceprocess3_pending <= 1'd1;
	end
	if (cas_waittimer0_wait) begin
		if ((~cas_waittimer0_done)) begin
			cas_waittimer0_count <= (cas_waittimer0_count - 1'd1);
		end
	end else begin
		cas_waittimer0_count <= 17'd120000;
	end
	if (cas_waittimer1_wait) begin
		if ((~cas_waittimer1_done)) begin
			cas_waittimer1_count <= (cas_waittimer1_count - 1'd1);
		end
	end else begin
		cas_waittimer1_count <= 17'd120000;
	end
	if (cas_waittimer2_wait) begin
		if ((~cas_waittimer2_done)) begin
			cas_waittimer2_count <= (cas_waittimer2_count - 1'd1);
		end
	end else begin
		cas_waittimer2_count <= 17'd120000;
	end
	if (cas_waittimer3_wait) begin
		if ((~cas_waittimer3_done)) begin
			cas_waittimer3_count <= (cas_waittimer3_count - 1'd1);
		end
	end else begin
		cas_waittimer3_count <= 17'd120000;
	end
	if ((i == 1'd0)) begin
		clk <= 1'd1;
		miso <= spiflash_miso;
	end
	if ((i == 1'd1)) begin
		i <= 1'd0;
		clk <= 1'd0;
		sr <= {sr[30:0], miso};
	end else begin
		i <= (i + 1'd1);
	end
	if ((((bus_cyc & bus_stb) & (i == 1'd1)) & (counter == 1'd0))) begin
		cs_n <= 1'd0;
		sr[31:24] <= 4'd11;
	end
	if ((counter == 5'd16)) begin
		sr[31:8] <= {bus_adr, {2{1'd0}}};
	end
	if ((counter == 7'd64)) begin
	end
	if ((counter == 8'd144)) begin
		bus_ack <= 1'd1;
		cs_n <= 1'd1;
	end
	if ((counter == 8'd145)) begin
		bus_ack <= 1'd0;
	end
	if ((counter == 8'd147)) begin
	end
	if ((counter == 8'd147)) begin
		counter <= 1'd0;
	end else begin
		if ((counter != 1'd0)) begin
			counter <= (counter + 1'd1);
		end else begin
			if (((bus_cyc & bus_stb) & (i == 1'd1))) begin
				counter <= 1'd1;
			end
		end
	end
	case (grant)
		1'd0: begin
			if ((~request[0])) begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~request[1])) begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		end
	endcase
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	csrbankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (csrbankarray_csrbank0_sel) begin
		case (csrbankarray_interface0_bank_bus_adr[2:0])
			1'd0: begin
				csrbankarray_interface0_bank_bus_dat_r <= csrbankarray_csrbank0_leds_out1_w;
			end
			1'd1: begin
				csrbankarray_interface0_bank_bus_dat_r <= csrbankarray_csrbank0_leds_out0_w;
			end
			2'd2: begin
				csrbankarray_interface0_bank_bus_dat_r <= cas_eventmanager_status_w;
			end
			2'd3: begin
				csrbankarray_interface0_bank_bus_dat_r <= cas_eventmanager_pending_w;
			end
			3'd4: begin
				csrbankarray_interface0_bank_bus_dat_r <= csrbankarray_csrbank0_buttons_ev_enable0_w;
			end
		endcase
	end
	if (csrbankarray_csrbank0_leds_out1_re) begin
		cas_leds_storage[11:8] <= csrbankarray_csrbank0_leds_out1_r;
	end
	if (csrbankarray_csrbank0_leds_out0_re) begin
		cas_leds_storage[7:0] <= csrbankarray_csrbank0_leds_out0_r;
	end
	cas_leds_re <= csrbankarray_csrbank0_leds_out0_re;
	if (csrbankarray_csrbank0_buttons_ev_enable0_re) begin
		cas_eventmanager_storage[3:0] <= csrbankarray_csrbank0_buttons_ev_enable0_r;
	end
	cas_eventmanager_re <= csrbankarray_csrbank0_buttons_ev_enable0_re;
	csrbankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (csrbankarray_csrbank1_sel) begin
		case (csrbankarray_interface1_bank_bus_adr[3:0])
			1'd0: begin
				csrbankarray_interface1_bank_bus_dat_r <= ctrl_reset_reset_w;
			end
			1'd1: begin
				csrbankarray_interface1_bank_bus_dat_r <= csrbankarray_csrbank1_scratch3_w;
			end
			2'd2: begin
				csrbankarray_interface1_bank_bus_dat_r <= csrbankarray_csrbank1_scratch2_w;
			end
			2'd3: begin
				csrbankarray_interface1_bank_bus_dat_r <= csrbankarray_csrbank1_scratch1_w;
			end
			3'd4: begin
				csrbankarray_interface1_bank_bus_dat_r <= csrbankarray_csrbank1_scratch0_w;
			end
			3'd5: begin
				csrbankarray_interface1_bank_bus_dat_r <= csrbankarray_csrbank1_bus_errors3_w;
			end
			3'd6: begin
				csrbankarray_interface1_bank_bus_dat_r <= csrbankarray_csrbank1_bus_errors2_w;
			end
			3'd7: begin
				csrbankarray_interface1_bank_bus_dat_r <= csrbankarray_csrbank1_bus_errors1_w;
			end
			4'd8: begin
				csrbankarray_interface1_bank_bus_dat_r <= csrbankarray_csrbank1_bus_errors0_w;
			end
		endcase
	end
	if (csrbankarray_csrbank1_scratch3_re) begin
		ctrl_storage[31:24] <= csrbankarray_csrbank1_scratch3_r;
	end
	if (csrbankarray_csrbank1_scratch2_re) begin
		ctrl_storage[23:16] <= csrbankarray_csrbank1_scratch2_r;
	end
	if (csrbankarray_csrbank1_scratch1_re) begin
		ctrl_storage[15:8] <= csrbankarray_csrbank1_scratch1_r;
	end
	if (csrbankarray_csrbank1_scratch0_re) begin
		ctrl_storage[7:0] <= csrbankarray_csrbank1_scratch0_r;
	end
	ctrl_re <= csrbankarray_csrbank1_scratch0_re;
	csrbankarray_sel_r <= csrbankarray_sel;
	csrbankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (csrbankarray_csrbank2_sel) begin
		case (csrbankarray_interface2_bank_bus_adr[1:0])
			1'd0: begin
				csrbankarray_interface2_bank_bus_dat_r <= csrbankarray_csrbank2_bitbang0_w;
			end
			1'd1: begin
				csrbankarray_interface2_bank_bus_dat_r <= csrbankarray_csrbank2_miso_w;
			end
			2'd2: begin
				csrbankarray_interface2_bank_bus_dat_r <= csrbankarray_csrbank2_bitbang_en0_w;
			end
		endcase
	end
	if (csrbankarray_csrbank2_bitbang0_re) begin
		bitbang_storage[3:0] <= csrbankarray_csrbank2_bitbang0_r;
	end
	bitbang_re <= csrbankarray_csrbank2_bitbang0_re;
	if (csrbankarray_csrbank2_bitbang_en0_re) begin
		bitbang_en_storage <= csrbankarray_csrbank2_bitbang_en0_r;
	end
	bitbang_en_re <= csrbankarray_csrbank2_bitbang_en0_re;
	csrbankarray_interface3_bank_bus_dat_r <= 1'd0;
	if (csrbankarray_csrbank3_sel) begin
		case (csrbankarray_interface3_bank_bus_adr[4:0])
			1'd0: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_load3_w;
			end
			1'd1: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_load2_w;
			end
			2'd2: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_load1_w;
			end
			2'd3: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_load0_w;
			end
			3'd4: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_reload3_w;
			end
			3'd5: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_reload2_w;
			end
			3'd6: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_reload1_w;
			end
			3'd7: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_reload0_w;
			end
			4'd8: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_en0_w;
			end
			4'd9: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_update_value0_w;
			end
			4'd10: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_value3_w;
			end
			4'd11: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_value2_w;
			end
			4'd12: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_value1_w;
			end
			4'd13: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_value0_w;
			end
			4'd14: begin
				csrbankarray_interface3_bank_bus_dat_r <= timer0_eventmanager_status_w;
			end
			4'd15: begin
				csrbankarray_interface3_bank_bus_dat_r <= timer0_eventmanager_pending_w;
			end
			5'd16: begin
				csrbankarray_interface3_bank_bus_dat_r <= csrbankarray_csrbank3_ev_enable0_w;
			end
		endcase
	end
	if (csrbankarray_csrbank3_load3_re) begin
		timer0_load_storage[31:24] <= csrbankarray_csrbank3_load3_r;
	end
	if (csrbankarray_csrbank3_load2_re) begin
		timer0_load_storage[23:16] <= csrbankarray_csrbank3_load2_r;
	end
	if (csrbankarray_csrbank3_load1_re) begin
		timer0_load_storage[15:8] <= csrbankarray_csrbank3_load1_r;
	end
	if (csrbankarray_csrbank3_load0_re) begin
		timer0_load_storage[7:0] <= csrbankarray_csrbank3_load0_r;
	end
	timer0_load_re <= csrbankarray_csrbank3_load0_re;
	if (csrbankarray_csrbank3_reload3_re) begin
		timer0_reload_storage[31:24] <= csrbankarray_csrbank3_reload3_r;
	end
	if (csrbankarray_csrbank3_reload2_re) begin
		timer0_reload_storage[23:16] <= csrbankarray_csrbank3_reload2_r;
	end
	if (csrbankarray_csrbank3_reload1_re) begin
		timer0_reload_storage[15:8] <= csrbankarray_csrbank3_reload1_r;
	end
	if (csrbankarray_csrbank3_reload0_re) begin
		timer0_reload_storage[7:0] <= csrbankarray_csrbank3_reload0_r;
	end
	timer0_reload_re <= csrbankarray_csrbank3_reload0_re;
	if (csrbankarray_csrbank3_en0_re) begin
		timer0_en_storage <= csrbankarray_csrbank3_en0_r;
	end
	timer0_en_re <= csrbankarray_csrbank3_en0_re;
	if (csrbankarray_csrbank3_update_value0_re) begin
		timer0_update_value_storage <= csrbankarray_csrbank3_update_value0_r;
	end
	timer0_update_value_re <= csrbankarray_csrbank3_update_value0_re;
	if (csrbankarray_csrbank3_ev_enable0_re) begin
		timer0_eventmanager_storage <= csrbankarray_csrbank3_ev_enable0_r;
	end
	timer0_eventmanager_re <= csrbankarray_csrbank3_ev_enable0_re;
	csrbankarray_interface4_bank_bus_dat_r <= 1'd0;
	if (csrbankarray_csrbank4_sel) begin
		case (csrbankarray_interface4_bank_bus_adr[2:0])
			1'd0: begin
				csrbankarray_interface4_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				csrbankarray_interface4_bank_bus_dat_r <= csrbankarray_csrbank4_txfull_w;
			end
			2'd2: begin
				csrbankarray_interface4_bank_bus_dat_r <= csrbankarray_csrbank4_rxempty_w;
			end
			2'd3: begin
				csrbankarray_interface4_bank_bus_dat_r <= uart_eventmanager_status_w;
			end
			3'd4: begin
				csrbankarray_interface4_bank_bus_dat_r <= uart_eventmanager_pending_w;
			end
			3'd5: begin
				csrbankarray_interface4_bank_bus_dat_r <= csrbankarray_csrbank4_ev_enable0_w;
			end
		endcase
	end
	if (csrbankarray_csrbank4_ev_enable0_re) begin
		uart_eventmanager_storage[1:0] <= csrbankarray_csrbank4_ev_enable0_r;
	end
	uart_eventmanager_re <= csrbankarray_csrbank4_ev_enable0_re;
	csrbankarray_interface5_bank_bus_dat_r <= 1'd0;
	if (csrbankarray_csrbank5_sel) begin
		case (csrbankarray_interface5_bank_bus_adr[1:0])
			1'd0: begin
				csrbankarray_interface5_bank_bus_dat_r <= csrbankarray_csrbank5_tuning_word3_w;
			end
			1'd1: begin
				csrbankarray_interface5_bank_bus_dat_r <= csrbankarray_csrbank5_tuning_word2_w;
			end
			2'd2: begin
				csrbankarray_interface5_bank_bus_dat_r <= csrbankarray_csrbank5_tuning_word1_w;
			end
			2'd3: begin
				csrbankarray_interface5_bank_bus_dat_r <= csrbankarray_csrbank5_tuning_word0_w;
			end
		endcase
	end
	if (csrbankarray_csrbank5_tuning_word3_re) begin
		uart_phy_storage[31:24] <= csrbankarray_csrbank5_tuning_word3_r;
	end
	if (csrbankarray_csrbank5_tuning_word2_re) begin
		uart_phy_storage[23:16] <= csrbankarray_csrbank5_tuning_word2_r;
	end
	if (csrbankarray_csrbank5_tuning_word1_re) begin
		uart_phy_storage[15:8] <= csrbankarray_csrbank5_tuning_word1_r;
	end
	if (csrbankarray_csrbank5_tuning_word0_re) begin
		uart_phy_storage[7:0] <= csrbankarray_csrbank5_tuning_word0_r;
	end
	uart_phy_re <= csrbankarray_csrbank5_tuning_word0_re;
	if (sys_rst) begin
		ctrl_storage <= 32'd305419896;
		ctrl_re <= 1'd0;
		ctrl_bus_errors <= 32'd0;
		sram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		uart_phy_storage <= 32'd41231686;
		uart_phy_re <= 1'd0;
		uart_phy_sink_ready <= 1'd0;
		uart_phy_uart_clk_txen <= 1'd0;
		uart_phy_phase_accumulator_tx <= 32'd0;
		uart_phy_tx_reg <= 8'd0;
		uart_phy_tx_bitcount <= 4'd0;
		uart_phy_tx_busy <= 1'd0;
		uart_phy_source_valid <= 1'd0;
		uart_phy_source_payload_data <= 8'd0;
		uart_phy_uart_clk_rxen <= 1'd0;
		uart_phy_phase_accumulator_rx <= 32'd0;
		uart_phy_rx_r <= 1'd0;
		uart_phy_rx_reg <= 8'd0;
		uart_phy_rx_bitcount <= 4'd0;
		uart_phy_rx_busy <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_eventmanager_storage <= 2'd0;
		uart_eventmanager_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer0_load_storage <= 32'd0;
		timer0_load_re <= 1'd0;
		timer0_reload_storage <= 32'd0;
		timer0_reload_re <= 1'd0;
		timer0_en_storage <= 1'd0;
		timer0_en_re <= 1'd0;
		timer0_update_value_storage <= 1'd0;
		timer0_update_value_re <= 1'd0;
		timer0_value_status <= 32'd0;
		timer0_zero_pending <= 1'd0;
		timer0_zero_old_trigger <= 1'd0;
		timer0_eventmanager_storage <= 1'd0;
		timer0_eventmanager_re <= 1'd0;
		timer0_value <= 32'd0;
		cas_leds_storage <= 12'd0;
		cas_leds_re <= 1'd0;
		cas_eventsourceprocess0_pending <= 1'd0;
		cas_eventsourceprocess0_old_trigger <= 1'd0;
		cas_waittimer0_count <= 17'd120000;
		cas_eventsourceprocess1_pending <= 1'd0;
		cas_eventsourceprocess1_old_trigger <= 1'd0;
		cas_waittimer1_count <= 17'd120000;
		cas_eventsourceprocess2_pending <= 1'd0;
		cas_eventsourceprocess2_old_trigger <= 1'd0;
		cas_waittimer2_count <= 17'd120000;
		cas_eventsourceprocess3_pending <= 1'd0;
		cas_eventsourceprocess3_old_trigger <= 1'd0;
		cas_waittimer3_count <= 17'd120000;
		cas_eventmanager_storage <= 4'd0;
		cas_eventmanager_re <= 1'd0;
		bus_ack <= 1'd0;
		bitbang_storage <= 4'd0;
		bitbang_re <= 1'd0;
		bitbang_en_storage <= 1'd0;
		bitbang_en_re <= 1'd0;
		cs_n <= 1'd1;
		clk <= 1'd0;
		sr <= 32'd0;
		i <= 1'd0;
		miso <= 1'd0;
		counter <= 8'd0;
		state <= 1'd0;
		grant <= 1'd0;
		slave_sel_r <= 3'd0;
		count <= 20'd1000000;
		csrbankarray_interface0_bank_bus_dat_r <= 8'd0;
		csrbankarray_interface1_bank_bus_dat_r <= 8'd0;
		csrbankarray_sel_r <= 1'd0;
		csrbankarray_interface2_bank_bus_dat_r <= 8'd0;
		csrbankarray_interface3_bank_bus_dat_r <= 8'd0;
		csrbankarray_interface4_bank_bus_dat_r <= 8'd0;
		csrbankarray_interface5_bank_bus_dat_r <= 8'd0;
	end
	regs0 <= serial_rx;
	regs1 <= regs0;
end

reg [31:0] mem[0:2559];
reg [11:0] memadr;
always @(posedge sys_clk) begin
	if (sram_we[0])
		mem[sram_adr][7:0] <= sram_dat_w[7:0];
	if (sram_we[1])
		mem[sram_adr][15:8] <= sram_dat_w[15:8];
	if (sram_we[2])
		mem[sram_adr][23:16] <= sram_dat_w[23:16];
	if (sram_we[3])
		mem[sram_adr][31:24] <= sram_dat_w[31:24];
	memadr <= sram_adr;
end

assign sram_dat_r = mem[memadr];

initial begin
	$readmemh("mem.init", mem);
end

reg [9:0] storage[0:15];
reg [9:0] memdat;
reg [9:0] memdat_1;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	memdat <= storage[uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		memdat_1 <= storage[uart_tx_fifo_rdport_adr];
end

assign uart_tx_fifo_wrport_dat_r = memdat;
assign uart_tx_fifo_rdport_dat_r = memdat_1;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_2;
reg [9:0] memdat_3;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	memdat_2 <= storage_1[uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		memdat_3 <= storage_1[uart_rx_fifo_rdport_adr];
end

assign uart_rx_fifo_wrport_dat_r = memdat_2;
assign uart_rx_fifo_rdport_dat_r = memdat_3;

reg [7:0] mem_1[0:7];
reg [2:0] memadr_1;
always @(posedge sys_clk) begin
	memadr_1 <= csrbankarray_adr;
end

assign csrbankarray_dat_r = mem_1[memadr_1];

initial begin
	$readmemh("mem_1.init", mem_1);
end

lm32_cpu #(
	.eba_reset(32'h20028000)
) lm32_cpu (
	.D_ACK_I(cpu_dbus_ack),
	.D_DAT_I(cpu_dbus_dat_r),
	.D_ERR_I(cpu_dbus_err),
	.D_RTY_I(1'd0),
	.I_ACK_I(cpu_ibus_ack),
	.I_DAT_I(cpu_ibus_dat_r),
	.I_ERR_I(cpu_ibus_err),
	.I_RTY_I(1'd0),
	.clk_i(sys_clk),
	.interrupt(cpu_interrupt),
	.rst_i((sys_rst | cpu_reset)),
	.D_ADR_O(cpu_d_adr_o),
	.D_BTE_O(cpu_dbus_bte),
	.D_CTI_O(cpu_dbus_cti),
	.D_CYC_O(cpu_dbus_cyc),
	.D_DAT_O(cpu_dbus_dat_w),
	.D_SEL_O(cpu_dbus_sel),
	.D_STB_O(cpu_dbus_stb),
	.D_WE_O(cpu_dbus_we),
	.I_ADR_O(cpu_i_adr_o),
	.I_BTE_O(cpu_ibus_bte),
	.I_CTI_O(cpu_ibus_cti),
	.I_CYC_O(cpu_ibus_cyc),
	.I_DAT_O(cpu_ibus_dat_w),
	.I_SEL_O(cpu_ibus_sel),
	.I_STB_O(cpu_ibus_stb),
	.I_WE_O(cpu_ibus_we)
);

SB_DFFS SB_DFFS(
	.C(por_clk),
	.D(1'd0),
	.S(crg_reset),
	.Q(rst1)
);

SB_DFFS SB_DFFS_1(
	.C(por_clk),
	.D(rst1),
	.S(crg_reset),
	.Q(por_rst)
);

endmodule
