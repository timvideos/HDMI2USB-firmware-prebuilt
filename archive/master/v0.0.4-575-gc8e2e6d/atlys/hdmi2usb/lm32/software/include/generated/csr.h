//--------------------------------------------------------------------------------
// Auto-generated by Migen (5585912) & LiteX (e637aa65) on 2019-08-02 13:17:20
//--------------------------------------------------------------------------------
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_writeb(uint8_t value, unsigned long addr);
extern uint8_t csr_readb(unsigned long addr);
extern void csr_writew(uint16_t value, unsigned long addr);
extern uint16_t csr_readw(unsigned long addr);
extern void csr_writel(uint32_t value, unsigned long addr);
extern uint32_t csr_readl(unsigned long addr);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* ctrl */
#define CSR_CTRL_BASE 0x82000000L
#define CSR_CTRL_RESET_ADDR 0x82000000L
#define CSR_CTRL_RESET_SIZE 1
static inline unsigned char ctrl_reset_read(void) {
	unsigned char r = csr_readl(0x82000000L);
	return r;
}
static inline void ctrl_reset_write(unsigned char value) {
	csr_writel(value, 0x82000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0x82000004L
#define CSR_CTRL_SCRATCH_SIZE 4
static inline unsigned int ctrl_scratch_read(void) {
	unsigned int r = csr_readl(0x82000004L);
	r <<= 8;
	r |= csr_readl(0x82000008L);
	r <<= 8;
	r |= csr_readl(0x8200000cL);
	r <<= 8;
	r |= csr_readl(0x82000010L);
	return r;
}
static inline void ctrl_scratch_write(unsigned int value) {
	csr_writel(value >> 24, 0x82000004L);
	csr_writel(value >> 16, 0x82000008L);
	csr_writel(value >> 8, 0x8200000cL);
	csr_writel(value, 0x82000010L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0x82000014L
#define CSR_CTRL_BUS_ERRORS_SIZE 4
static inline unsigned int ctrl_bus_errors_read(void) {
	unsigned int r = csr_readl(0x82000014L);
	r <<= 8;
	r |= csr_readl(0x82000018L);
	r <<= 8;
	r |= csr_readl(0x8200001cL);
	r <<= 8;
	r |= csr_readl(0x82000020L);
	return r;
}

/* encoder_reader */
#define CSR_ENCODER_READER_BASE 0x82009800L
#define CSR_ENCODER_READER_BASE_ADDR 0x82009800L
#define CSR_ENCODER_READER_BASE_SIZE 4
static inline unsigned int encoder_reader_base_read(void) {
	unsigned int r = csr_readl(0x82009800L);
	r <<= 8;
	r |= csr_readl(0x82009804L);
	r <<= 8;
	r |= csr_readl(0x82009808L);
	r <<= 8;
	r |= csr_readl(0x8200980cL);
	return r;
}
static inline void encoder_reader_base_write(unsigned int value) {
	csr_writel(value >> 24, 0x82009800L);
	csr_writel(value >> 16, 0x82009804L);
	csr_writel(value >> 8, 0x82009808L);
	csr_writel(value, 0x8200980cL);
}
#define CSR_ENCODER_READER_H_WIDTH_ADDR 0x82009810L
#define CSR_ENCODER_READER_H_WIDTH_SIZE 2
static inline unsigned short int encoder_reader_h_width_read(void) {
	unsigned short int r = csr_readl(0x82009810L);
	r <<= 8;
	r |= csr_readl(0x82009814L);
	return r;
}
static inline void encoder_reader_h_width_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82009810L);
	csr_writel(value, 0x82009814L);
}
#define CSR_ENCODER_READER_V_WIDTH_ADDR 0x82009818L
#define CSR_ENCODER_READER_V_WIDTH_SIZE 2
static inline unsigned short int encoder_reader_v_width_read(void) {
	unsigned short int r = csr_readl(0x82009818L);
	r <<= 8;
	r |= csr_readl(0x8200981cL);
	return r;
}
static inline void encoder_reader_v_width_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82009818L);
	csr_writel(value, 0x8200981cL);
}
#define CSR_ENCODER_READER_START_ADDR 0x82009820L
#define CSR_ENCODER_READER_START_SIZE 1
static inline unsigned char encoder_reader_start_read(void) {
	unsigned char r = csr_readl(0x82009820L);
	return r;
}
static inline void encoder_reader_start_write(unsigned char value) {
	csr_writel(value, 0x82009820L);
}
#define CSR_ENCODER_READER_DONE_ADDR 0x82009824L
#define CSR_ENCODER_READER_DONE_SIZE 1
static inline unsigned char encoder_reader_done_read(void) {
	unsigned char r = csr_readl(0x82009824L);
	return r;
}

/* hdmi_in0 */
#define CSR_HDMI_IN0_BASE 0x82007800L
#define CSR_HDMI_IN0_EDID_HPD_NOTIF_ADDR 0x82007800L
#define CSR_HDMI_IN0_EDID_HPD_NOTIF_SIZE 1
static inline unsigned char hdmi_in0_edid_hpd_notif_read(void) {
	unsigned char r = csr_readl(0x82007800L);
	return r;
}
#define CSR_HDMI_IN0_EDID_HPD_EN_ADDR 0x82007804L
#define CSR_HDMI_IN0_EDID_HPD_EN_SIZE 1
static inline unsigned char hdmi_in0_edid_hpd_en_read(void) {
	unsigned char r = csr_readl(0x82007804L);
	return r;
}
static inline void hdmi_in0_edid_hpd_en_write(unsigned char value) {
	csr_writel(value, 0x82007804L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_RESET_ADDR 0x82007808L
#define CSR_HDMI_IN0_CLOCKING_PLL_RESET_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_reset_read(void) {
	unsigned char r = csr_readl(0x82007808L);
	return r;
}
static inline void hdmi_in0_clocking_pll_reset_write(unsigned char value) {
	csr_writel(value, 0x82007808L);
}
#define CSR_HDMI_IN0_CLOCKING_LOCKED_ADDR 0x8200780cL
#define CSR_HDMI_IN0_CLOCKING_LOCKED_SIZE 1
static inline unsigned char hdmi_in0_clocking_locked_read(void) {
	unsigned char r = csr_readl(0x8200780cL);
	return r;
}
#define CSR_HDMI_IN0_CLOCKING_PLL_ADR_ADDR 0x82007810L
#define CSR_HDMI_IN0_CLOCKING_PLL_ADR_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_adr_read(void) {
	unsigned char r = csr_readl(0x82007810L);
	return r;
}
static inline void hdmi_in0_clocking_pll_adr_write(unsigned char value) {
	csr_writel(value, 0x82007810L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_DAT_R_ADDR 0x82007814L
#define CSR_HDMI_IN0_CLOCKING_PLL_DAT_R_SIZE 2
static inline unsigned short int hdmi_in0_clocking_pll_dat_r_read(void) {
	unsigned short int r = csr_readl(0x82007814L);
	r <<= 8;
	r |= csr_readl(0x82007818L);
	return r;
}
#define CSR_HDMI_IN0_CLOCKING_PLL_DAT_W_ADDR 0x8200781cL
#define CSR_HDMI_IN0_CLOCKING_PLL_DAT_W_SIZE 2
static inline unsigned short int hdmi_in0_clocking_pll_dat_w_read(void) {
	unsigned short int r = csr_readl(0x8200781cL);
	r <<= 8;
	r |= csr_readl(0x82007820L);
	return r;
}
static inline void hdmi_in0_clocking_pll_dat_w_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200781cL);
	csr_writel(value, 0x82007820L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_READ_ADDR 0x82007824L
#define CSR_HDMI_IN0_CLOCKING_PLL_READ_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_read_read(void) {
	unsigned char r = csr_readl(0x82007824L);
	return r;
}
static inline void hdmi_in0_clocking_pll_read_write(unsigned char value) {
	csr_writel(value, 0x82007824L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_WRITE_ADDR 0x82007828L
#define CSR_HDMI_IN0_CLOCKING_PLL_WRITE_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_write_read(void) {
	unsigned char r = csr_readl(0x82007828L);
	return r;
}
static inline void hdmi_in0_clocking_pll_write_write(unsigned char value) {
	csr_writel(value, 0x82007828L);
}
#define CSR_HDMI_IN0_CLOCKING_PLL_DRDY_ADDR 0x8200782cL
#define CSR_HDMI_IN0_CLOCKING_PLL_DRDY_SIZE 1
static inline unsigned char hdmi_in0_clocking_pll_drdy_read(void) {
	unsigned char r = csr_readl(0x8200782cL);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_DLY_CTL_ADDR 0x82007830L
#define CSR_HDMI_IN0_DATA0_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0x82007830L);
	return r;
}
static inline void hdmi_in0_data0_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0x82007830L);
}
#define CSR_HDMI_IN0_DATA0_CAP_DLY_BUSY_ADDR 0x82007834L
#define CSR_HDMI_IN0_DATA0_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0x82007834L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_ADDR 0x82007838L
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_phase_read(void) {
	unsigned char r = csr_readl(0x82007838L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_RESET_ADDR 0x8200783cL
#define CSR_HDMI_IN0_DATA0_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data0_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0x8200783cL);
	return r;
}
static inline void hdmi_in0_data0_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0x8200783cL);
}
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CHAR_SYNCED_ADDR 0x82007840L
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data0_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0x82007840L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CTL_POS_ADDR 0x82007844L
#define CSR_HDMI_IN0_DATA0_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data0_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0x82007844L);
	return r;
}
#define CSR_HDMI_IN0_DATA0_WER_UPDATE_ADDR 0x82007848L
#define CSR_HDMI_IN0_DATA0_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data0_wer_update_read(void) {
	unsigned char r = csr_readl(0x82007848L);
	return r;
}
static inline void hdmi_in0_data0_wer_update_write(unsigned char value) {
	csr_writel(value, 0x82007848L);
}
#define CSR_HDMI_IN0_DATA0_WER_VALUE_ADDR 0x8200784cL
#define CSR_HDMI_IN0_DATA0_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data0_wer_value_read(void) {
	unsigned int r = csr_readl(0x8200784cL);
	r <<= 8;
	r |= csr_readl(0x82007850L);
	r <<= 8;
	r |= csr_readl(0x82007854L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_DLY_CTL_ADDR 0x82007858L
#define CSR_HDMI_IN0_DATA1_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0x82007858L);
	return r;
}
static inline void hdmi_in0_data1_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0x82007858L);
}
#define CSR_HDMI_IN0_DATA1_CAP_DLY_BUSY_ADDR 0x8200785cL
#define CSR_HDMI_IN0_DATA1_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0x8200785cL);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_ADDR 0x82007860L
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_phase_read(void) {
	unsigned char r = csr_readl(0x82007860L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_RESET_ADDR 0x82007864L
#define CSR_HDMI_IN0_DATA1_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data1_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0x82007864L);
	return r;
}
static inline void hdmi_in0_data1_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0x82007864L);
}
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CHAR_SYNCED_ADDR 0x82007868L
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data1_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0x82007868L);
	return r;
}
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CTL_POS_ADDR 0x8200786cL
#define CSR_HDMI_IN0_DATA1_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data1_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0x8200786cL);
	return r;
}
#define CSR_HDMI_IN0_DATA1_WER_UPDATE_ADDR 0x82007870L
#define CSR_HDMI_IN0_DATA1_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data1_wer_update_read(void) {
	unsigned char r = csr_readl(0x82007870L);
	return r;
}
static inline void hdmi_in0_data1_wer_update_write(unsigned char value) {
	csr_writel(value, 0x82007870L);
}
#define CSR_HDMI_IN0_DATA1_WER_VALUE_ADDR 0x82007874L
#define CSR_HDMI_IN0_DATA1_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data1_wer_value_read(void) {
	unsigned int r = csr_readl(0x82007874L);
	r <<= 8;
	r |= csr_readl(0x82007878L);
	r <<= 8;
	r |= csr_readl(0x8200787cL);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_DLY_CTL_ADDR 0x82007880L
#define CSR_HDMI_IN0_DATA2_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0x82007880L);
	return r;
}
static inline void hdmi_in0_data2_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0x82007880L);
}
#define CSR_HDMI_IN0_DATA2_CAP_DLY_BUSY_ADDR 0x82007884L
#define CSR_HDMI_IN0_DATA2_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0x82007884L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_ADDR 0x82007888L
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_phase_read(void) {
	unsigned char r = csr_readl(0x82007888L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_RESET_ADDR 0x8200788cL
#define CSR_HDMI_IN0_DATA2_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in0_data2_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0x8200788cL);
	return r;
}
static inline void hdmi_in0_data2_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0x8200788cL);
}
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CHAR_SYNCED_ADDR 0x82007890L
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_data2_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0x82007890L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CTL_POS_ADDR 0x82007894L
#define CSR_HDMI_IN0_DATA2_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in0_data2_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0x82007894L);
	return r;
}
#define CSR_HDMI_IN0_DATA2_WER_UPDATE_ADDR 0x82007898L
#define CSR_HDMI_IN0_DATA2_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in0_data2_wer_update_read(void) {
	unsigned char r = csr_readl(0x82007898L);
	return r;
}
static inline void hdmi_in0_data2_wer_update_write(unsigned char value) {
	csr_writel(value, 0x82007898L);
}
#define CSR_HDMI_IN0_DATA2_WER_VALUE_ADDR 0x8200789cL
#define CSR_HDMI_IN0_DATA2_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in0_data2_wer_value_read(void) {
	unsigned int r = csr_readl(0x8200789cL);
	r <<= 8;
	r |= csr_readl(0x820078a0L);
	r <<= 8;
	r |= csr_readl(0x820078a4L);
	return r;
}
#define CSR_HDMI_IN0_CHANSYNC_CHANNELS_SYNCED_ADDR 0x820078a8L
#define CSR_HDMI_IN0_CHANSYNC_CHANNELS_SYNCED_SIZE 1
static inline unsigned char hdmi_in0_chansync_channels_synced_read(void) {
	unsigned char r = csr_readl(0x820078a8L);
	return r;
}
#define CSR_HDMI_IN0_RESDETECTION_HRES_ADDR 0x820078acL
#define CSR_HDMI_IN0_RESDETECTION_HRES_SIZE 2
static inline unsigned short int hdmi_in0_resdetection_hres_read(void) {
	unsigned short int r = csr_readl(0x820078acL);
	r <<= 8;
	r |= csr_readl(0x820078b0L);
	return r;
}
#define CSR_HDMI_IN0_RESDETECTION_VRES_ADDR 0x820078b4L
#define CSR_HDMI_IN0_RESDETECTION_VRES_SIZE 2
static inline unsigned short int hdmi_in0_resdetection_vres_read(void) {
	unsigned short int r = csr_readl(0x820078b4L);
	r <<= 8;
	r |= csr_readl(0x820078b8L);
	return r;
}
#define CSR_HDMI_IN0_FRAME_OVERFLOW_ADDR 0x820078bcL
#define CSR_HDMI_IN0_FRAME_OVERFLOW_SIZE 1
static inline unsigned char hdmi_in0_frame_overflow_read(void) {
	unsigned char r = csr_readl(0x820078bcL);
	return r;
}
static inline void hdmi_in0_frame_overflow_write(unsigned char value) {
	csr_writel(value, 0x820078bcL);
}
#define CSR_HDMI_IN0_DMA_FRAME_SIZE_ADDR 0x820078c0L
#define CSR_HDMI_IN0_DMA_FRAME_SIZE_SIZE 4
static inline unsigned int hdmi_in0_dma_frame_size_read(void) {
	unsigned int r = csr_readl(0x820078c0L);
	r <<= 8;
	r |= csr_readl(0x820078c4L);
	r <<= 8;
	r |= csr_readl(0x820078c8L);
	r <<= 8;
	r |= csr_readl(0x820078ccL);
	return r;
}
static inline void hdmi_in0_dma_frame_size_write(unsigned int value) {
	csr_writel(value >> 24, 0x820078c0L);
	csr_writel(value >> 16, 0x820078c4L);
	csr_writel(value >> 8, 0x820078c8L);
	csr_writel(value, 0x820078ccL);
}
#define CSR_HDMI_IN0_DMA_SLOT0_STATUS_ADDR 0x820078d0L
#define CSR_HDMI_IN0_DMA_SLOT0_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_slot0_status_read(void) {
	unsigned char r = csr_readl(0x820078d0L);
	return r;
}
static inline void hdmi_in0_dma_slot0_status_write(unsigned char value) {
	csr_writel(value, 0x820078d0L);
}
#define CSR_HDMI_IN0_DMA_SLOT0_ADDRESS_ADDR 0x820078d4L
#define CSR_HDMI_IN0_DMA_SLOT0_ADDRESS_SIZE 4
static inline unsigned int hdmi_in0_dma_slot0_address_read(void) {
	unsigned int r = csr_readl(0x820078d4L);
	r <<= 8;
	r |= csr_readl(0x820078d8L);
	r <<= 8;
	r |= csr_readl(0x820078dcL);
	r <<= 8;
	r |= csr_readl(0x820078e0L);
	return r;
}
static inline void hdmi_in0_dma_slot0_address_write(unsigned int value) {
	csr_writel(value >> 24, 0x820078d4L);
	csr_writel(value >> 16, 0x820078d8L);
	csr_writel(value >> 8, 0x820078dcL);
	csr_writel(value, 0x820078e0L);
}
#define CSR_HDMI_IN0_DMA_SLOT1_STATUS_ADDR 0x820078e4L
#define CSR_HDMI_IN0_DMA_SLOT1_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_slot1_status_read(void) {
	unsigned char r = csr_readl(0x820078e4L);
	return r;
}
static inline void hdmi_in0_dma_slot1_status_write(unsigned char value) {
	csr_writel(value, 0x820078e4L);
}
#define CSR_HDMI_IN0_DMA_SLOT1_ADDRESS_ADDR 0x820078e8L
#define CSR_HDMI_IN0_DMA_SLOT1_ADDRESS_SIZE 4
static inline unsigned int hdmi_in0_dma_slot1_address_read(void) {
	unsigned int r = csr_readl(0x820078e8L);
	r <<= 8;
	r |= csr_readl(0x820078ecL);
	r <<= 8;
	r |= csr_readl(0x820078f0L);
	r <<= 8;
	r |= csr_readl(0x820078f4L);
	return r;
}
static inline void hdmi_in0_dma_slot1_address_write(unsigned int value) {
	csr_writel(value >> 24, 0x820078e8L);
	csr_writel(value >> 16, 0x820078ecL);
	csr_writel(value >> 8, 0x820078f0L);
	csr_writel(value, 0x820078f4L);
}
#define CSR_HDMI_IN0_DMA_EV_STATUS_ADDR 0x820078f8L
#define CSR_HDMI_IN0_DMA_EV_STATUS_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_status_read(void) {
	unsigned char r = csr_readl(0x820078f8L);
	return r;
}
static inline void hdmi_in0_dma_ev_status_write(unsigned char value) {
	csr_writel(value, 0x820078f8L);
}
#define CSR_HDMI_IN0_DMA_EV_PENDING_ADDR 0x820078fcL
#define CSR_HDMI_IN0_DMA_EV_PENDING_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_pending_read(void) {
	unsigned char r = csr_readl(0x820078fcL);
	return r;
}
static inline void hdmi_in0_dma_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x820078fcL);
}
#define CSR_HDMI_IN0_DMA_EV_ENABLE_ADDR 0x82007900L
#define CSR_HDMI_IN0_DMA_EV_ENABLE_SIZE 1
static inline unsigned char hdmi_in0_dma_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82007900L);
	return r;
}
static inline void hdmi_in0_dma_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82007900L);
}

/* hdmi_in1 */
#define CSR_HDMI_IN1_BASE 0x82008800L
#define CSR_HDMI_IN1_EDID_HPD_NOTIF_ADDR 0x82008800L
#define CSR_HDMI_IN1_EDID_HPD_NOTIF_SIZE 1
static inline unsigned char hdmi_in1_edid_hpd_notif_read(void) {
	unsigned char r = csr_readl(0x82008800L);
	return r;
}
#define CSR_HDMI_IN1_EDID_HPD_EN_ADDR 0x82008804L
#define CSR_HDMI_IN1_EDID_HPD_EN_SIZE 1
static inline unsigned char hdmi_in1_edid_hpd_en_read(void) {
	unsigned char r = csr_readl(0x82008804L);
	return r;
}
static inline void hdmi_in1_edid_hpd_en_write(unsigned char value) {
	csr_writel(value, 0x82008804L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_RESET_ADDR 0x82008808L
#define CSR_HDMI_IN1_CLOCKING_PLL_RESET_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_reset_read(void) {
	unsigned char r = csr_readl(0x82008808L);
	return r;
}
static inline void hdmi_in1_clocking_pll_reset_write(unsigned char value) {
	csr_writel(value, 0x82008808L);
}
#define CSR_HDMI_IN1_CLOCKING_LOCKED_ADDR 0x8200880cL
#define CSR_HDMI_IN1_CLOCKING_LOCKED_SIZE 1
static inline unsigned char hdmi_in1_clocking_locked_read(void) {
	unsigned char r = csr_readl(0x8200880cL);
	return r;
}
#define CSR_HDMI_IN1_CLOCKING_PLL_ADR_ADDR 0x82008810L
#define CSR_HDMI_IN1_CLOCKING_PLL_ADR_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_adr_read(void) {
	unsigned char r = csr_readl(0x82008810L);
	return r;
}
static inline void hdmi_in1_clocking_pll_adr_write(unsigned char value) {
	csr_writel(value, 0x82008810L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_DAT_R_ADDR 0x82008814L
#define CSR_HDMI_IN1_CLOCKING_PLL_DAT_R_SIZE 2
static inline unsigned short int hdmi_in1_clocking_pll_dat_r_read(void) {
	unsigned short int r = csr_readl(0x82008814L);
	r <<= 8;
	r |= csr_readl(0x82008818L);
	return r;
}
#define CSR_HDMI_IN1_CLOCKING_PLL_DAT_W_ADDR 0x8200881cL
#define CSR_HDMI_IN1_CLOCKING_PLL_DAT_W_SIZE 2
static inline unsigned short int hdmi_in1_clocking_pll_dat_w_read(void) {
	unsigned short int r = csr_readl(0x8200881cL);
	r <<= 8;
	r |= csr_readl(0x82008820L);
	return r;
}
static inline void hdmi_in1_clocking_pll_dat_w_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200881cL);
	csr_writel(value, 0x82008820L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_READ_ADDR 0x82008824L
#define CSR_HDMI_IN1_CLOCKING_PLL_READ_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_read_read(void) {
	unsigned char r = csr_readl(0x82008824L);
	return r;
}
static inline void hdmi_in1_clocking_pll_read_write(unsigned char value) {
	csr_writel(value, 0x82008824L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_WRITE_ADDR 0x82008828L
#define CSR_HDMI_IN1_CLOCKING_PLL_WRITE_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_write_read(void) {
	unsigned char r = csr_readl(0x82008828L);
	return r;
}
static inline void hdmi_in1_clocking_pll_write_write(unsigned char value) {
	csr_writel(value, 0x82008828L);
}
#define CSR_HDMI_IN1_CLOCKING_PLL_DRDY_ADDR 0x8200882cL
#define CSR_HDMI_IN1_CLOCKING_PLL_DRDY_SIZE 1
static inline unsigned char hdmi_in1_clocking_pll_drdy_read(void) {
	unsigned char r = csr_readl(0x8200882cL);
	return r;
}
#define CSR_HDMI_IN1_DATA0_CAP_DLY_CTL_ADDR 0x82008830L
#define CSR_HDMI_IN1_DATA0_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in1_data0_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0x82008830L);
	return r;
}
static inline void hdmi_in1_data0_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0x82008830L);
}
#define CSR_HDMI_IN1_DATA0_CAP_DLY_BUSY_ADDR 0x82008834L
#define CSR_HDMI_IN1_DATA0_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in1_data0_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0x82008834L);
	return r;
}
#define CSR_HDMI_IN1_DATA0_CAP_PHASE_ADDR 0x82008838L
#define CSR_HDMI_IN1_DATA0_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in1_data0_cap_phase_read(void) {
	unsigned char r = csr_readl(0x82008838L);
	return r;
}
#define CSR_HDMI_IN1_DATA0_CAP_PHASE_RESET_ADDR 0x8200883cL
#define CSR_HDMI_IN1_DATA0_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in1_data0_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0x8200883cL);
	return r;
}
static inline void hdmi_in1_data0_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0x8200883cL);
}
#define CSR_HDMI_IN1_DATA0_CHARSYNC_CHAR_SYNCED_ADDR 0x82008840L
#define CSR_HDMI_IN1_DATA0_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in1_data0_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0x82008840L);
	return r;
}
#define CSR_HDMI_IN1_DATA0_CHARSYNC_CTL_POS_ADDR 0x82008844L
#define CSR_HDMI_IN1_DATA0_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in1_data0_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0x82008844L);
	return r;
}
#define CSR_HDMI_IN1_DATA0_WER_UPDATE_ADDR 0x82008848L
#define CSR_HDMI_IN1_DATA0_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in1_data0_wer_update_read(void) {
	unsigned char r = csr_readl(0x82008848L);
	return r;
}
static inline void hdmi_in1_data0_wer_update_write(unsigned char value) {
	csr_writel(value, 0x82008848L);
}
#define CSR_HDMI_IN1_DATA0_WER_VALUE_ADDR 0x8200884cL
#define CSR_HDMI_IN1_DATA0_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in1_data0_wer_value_read(void) {
	unsigned int r = csr_readl(0x8200884cL);
	r <<= 8;
	r |= csr_readl(0x82008850L);
	r <<= 8;
	r |= csr_readl(0x82008854L);
	return r;
}
#define CSR_HDMI_IN1_DATA1_CAP_DLY_CTL_ADDR 0x82008858L
#define CSR_HDMI_IN1_DATA1_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in1_data1_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0x82008858L);
	return r;
}
static inline void hdmi_in1_data1_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0x82008858L);
}
#define CSR_HDMI_IN1_DATA1_CAP_DLY_BUSY_ADDR 0x8200885cL
#define CSR_HDMI_IN1_DATA1_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in1_data1_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0x8200885cL);
	return r;
}
#define CSR_HDMI_IN1_DATA1_CAP_PHASE_ADDR 0x82008860L
#define CSR_HDMI_IN1_DATA1_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in1_data1_cap_phase_read(void) {
	unsigned char r = csr_readl(0x82008860L);
	return r;
}
#define CSR_HDMI_IN1_DATA1_CAP_PHASE_RESET_ADDR 0x82008864L
#define CSR_HDMI_IN1_DATA1_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in1_data1_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0x82008864L);
	return r;
}
static inline void hdmi_in1_data1_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0x82008864L);
}
#define CSR_HDMI_IN1_DATA1_CHARSYNC_CHAR_SYNCED_ADDR 0x82008868L
#define CSR_HDMI_IN1_DATA1_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in1_data1_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0x82008868L);
	return r;
}
#define CSR_HDMI_IN1_DATA1_CHARSYNC_CTL_POS_ADDR 0x8200886cL
#define CSR_HDMI_IN1_DATA1_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in1_data1_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0x8200886cL);
	return r;
}
#define CSR_HDMI_IN1_DATA1_WER_UPDATE_ADDR 0x82008870L
#define CSR_HDMI_IN1_DATA1_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in1_data1_wer_update_read(void) {
	unsigned char r = csr_readl(0x82008870L);
	return r;
}
static inline void hdmi_in1_data1_wer_update_write(unsigned char value) {
	csr_writel(value, 0x82008870L);
}
#define CSR_HDMI_IN1_DATA1_WER_VALUE_ADDR 0x82008874L
#define CSR_HDMI_IN1_DATA1_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in1_data1_wer_value_read(void) {
	unsigned int r = csr_readl(0x82008874L);
	r <<= 8;
	r |= csr_readl(0x82008878L);
	r <<= 8;
	r |= csr_readl(0x8200887cL);
	return r;
}
#define CSR_HDMI_IN1_DATA2_CAP_DLY_CTL_ADDR 0x82008880L
#define CSR_HDMI_IN1_DATA2_CAP_DLY_CTL_SIZE 1
static inline unsigned char hdmi_in1_data2_cap_dly_ctl_read(void) {
	unsigned char r = csr_readl(0x82008880L);
	return r;
}
static inline void hdmi_in1_data2_cap_dly_ctl_write(unsigned char value) {
	csr_writel(value, 0x82008880L);
}
#define CSR_HDMI_IN1_DATA2_CAP_DLY_BUSY_ADDR 0x82008884L
#define CSR_HDMI_IN1_DATA2_CAP_DLY_BUSY_SIZE 1
static inline unsigned char hdmi_in1_data2_cap_dly_busy_read(void) {
	unsigned char r = csr_readl(0x82008884L);
	return r;
}
#define CSR_HDMI_IN1_DATA2_CAP_PHASE_ADDR 0x82008888L
#define CSR_HDMI_IN1_DATA2_CAP_PHASE_SIZE 1
static inline unsigned char hdmi_in1_data2_cap_phase_read(void) {
	unsigned char r = csr_readl(0x82008888L);
	return r;
}
#define CSR_HDMI_IN1_DATA2_CAP_PHASE_RESET_ADDR 0x8200888cL
#define CSR_HDMI_IN1_DATA2_CAP_PHASE_RESET_SIZE 1
static inline unsigned char hdmi_in1_data2_cap_phase_reset_read(void) {
	unsigned char r = csr_readl(0x8200888cL);
	return r;
}
static inline void hdmi_in1_data2_cap_phase_reset_write(unsigned char value) {
	csr_writel(value, 0x8200888cL);
}
#define CSR_HDMI_IN1_DATA2_CHARSYNC_CHAR_SYNCED_ADDR 0x82008890L
#define CSR_HDMI_IN1_DATA2_CHARSYNC_CHAR_SYNCED_SIZE 1
static inline unsigned char hdmi_in1_data2_charsync_char_synced_read(void) {
	unsigned char r = csr_readl(0x82008890L);
	return r;
}
#define CSR_HDMI_IN1_DATA2_CHARSYNC_CTL_POS_ADDR 0x82008894L
#define CSR_HDMI_IN1_DATA2_CHARSYNC_CTL_POS_SIZE 1
static inline unsigned char hdmi_in1_data2_charsync_ctl_pos_read(void) {
	unsigned char r = csr_readl(0x82008894L);
	return r;
}
#define CSR_HDMI_IN1_DATA2_WER_UPDATE_ADDR 0x82008898L
#define CSR_HDMI_IN1_DATA2_WER_UPDATE_SIZE 1
static inline unsigned char hdmi_in1_data2_wer_update_read(void) {
	unsigned char r = csr_readl(0x82008898L);
	return r;
}
static inline void hdmi_in1_data2_wer_update_write(unsigned char value) {
	csr_writel(value, 0x82008898L);
}
#define CSR_HDMI_IN1_DATA2_WER_VALUE_ADDR 0x8200889cL
#define CSR_HDMI_IN1_DATA2_WER_VALUE_SIZE 3
static inline unsigned int hdmi_in1_data2_wer_value_read(void) {
	unsigned int r = csr_readl(0x8200889cL);
	r <<= 8;
	r |= csr_readl(0x820088a0L);
	r <<= 8;
	r |= csr_readl(0x820088a4L);
	return r;
}
#define CSR_HDMI_IN1_CHANSYNC_CHANNELS_SYNCED_ADDR 0x820088a8L
#define CSR_HDMI_IN1_CHANSYNC_CHANNELS_SYNCED_SIZE 1
static inline unsigned char hdmi_in1_chansync_channels_synced_read(void) {
	unsigned char r = csr_readl(0x820088a8L);
	return r;
}
#define CSR_HDMI_IN1_RESDETECTION_HRES_ADDR 0x820088acL
#define CSR_HDMI_IN1_RESDETECTION_HRES_SIZE 2
static inline unsigned short int hdmi_in1_resdetection_hres_read(void) {
	unsigned short int r = csr_readl(0x820088acL);
	r <<= 8;
	r |= csr_readl(0x820088b0L);
	return r;
}
#define CSR_HDMI_IN1_RESDETECTION_VRES_ADDR 0x820088b4L
#define CSR_HDMI_IN1_RESDETECTION_VRES_SIZE 2
static inline unsigned short int hdmi_in1_resdetection_vres_read(void) {
	unsigned short int r = csr_readl(0x820088b4L);
	r <<= 8;
	r |= csr_readl(0x820088b8L);
	return r;
}
#define CSR_HDMI_IN1_FRAME_OVERFLOW_ADDR 0x820088bcL
#define CSR_HDMI_IN1_FRAME_OVERFLOW_SIZE 1
static inline unsigned char hdmi_in1_frame_overflow_read(void) {
	unsigned char r = csr_readl(0x820088bcL);
	return r;
}
static inline void hdmi_in1_frame_overflow_write(unsigned char value) {
	csr_writel(value, 0x820088bcL);
}
#define CSR_HDMI_IN1_DMA_FRAME_SIZE_ADDR 0x820088c0L
#define CSR_HDMI_IN1_DMA_FRAME_SIZE_SIZE 4
static inline unsigned int hdmi_in1_dma_frame_size_read(void) {
	unsigned int r = csr_readl(0x820088c0L);
	r <<= 8;
	r |= csr_readl(0x820088c4L);
	r <<= 8;
	r |= csr_readl(0x820088c8L);
	r <<= 8;
	r |= csr_readl(0x820088ccL);
	return r;
}
static inline void hdmi_in1_dma_frame_size_write(unsigned int value) {
	csr_writel(value >> 24, 0x820088c0L);
	csr_writel(value >> 16, 0x820088c4L);
	csr_writel(value >> 8, 0x820088c8L);
	csr_writel(value, 0x820088ccL);
}
#define CSR_HDMI_IN1_DMA_SLOT0_STATUS_ADDR 0x820088d0L
#define CSR_HDMI_IN1_DMA_SLOT0_STATUS_SIZE 1
static inline unsigned char hdmi_in1_dma_slot0_status_read(void) {
	unsigned char r = csr_readl(0x820088d0L);
	return r;
}
static inline void hdmi_in1_dma_slot0_status_write(unsigned char value) {
	csr_writel(value, 0x820088d0L);
}
#define CSR_HDMI_IN1_DMA_SLOT0_ADDRESS_ADDR 0x820088d4L
#define CSR_HDMI_IN1_DMA_SLOT0_ADDRESS_SIZE 4
static inline unsigned int hdmi_in1_dma_slot0_address_read(void) {
	unsigned int r = csr_readl(0x820088d4L);
	r <<= 8;
	r |= csr_readl(0x820088d8L);
	r <<= 8;
	r |= csr_readl(0x820088dcL);
	r <<= 8;
	r |= csr_readl(0x820088e0L);
	return r;
}
static inline void hdmi_in1_dma_slot0_address_write(unsigned int value) {
	csr_writel(value >> 24, 0x820088d4L);
	csr_writel(value >> 16, 0x820088d8L);
	csr_writel(value >> 8, 0x820088dcL);
	csr_writel(value, 0x820088e0L);
}
#define CSR_HDMI_IN1_DMA_SLOT1_STATUS_ADDR 0x820088e4L
#define CSR_HDMI_IN1_DMA_SLOT1_STATUS_SIZE 1
static inline unsigned char hdmi_in1_dma_slot1_status_read(void) {
	unsigned char r = csr_readl(0x820088e4L);
	return r;
}
static inline void hdmi_in1_dma_slot1_status_write(unsigned char value) {
	csr_writel(value, 0x820088e4L);
}
#define CSR_HDMI_IN1_DMA_SLOT1_ADDRESS_ADDR 0x820088e8L
#define CSR_HDMI_IN1_DMA_SLOT1_ADDRESS_SIZE 4
static inline unsigned int hdmi_in1_dma_slot1_address_read(void) {
	unsigned int r = csr_readl(0x820088e8L);
	r <<= 8;
	r |= csr_readl(0x820088ecL);
	r <<= 8;
	r |= csr_readl(0x820088f0L);
	r <<= 8;
	r |= csr_readl(0x820088f4L);
	return r;
}
static inline void hdmi_in1_dma_slot1_address_write(unsigned int value) {
	csr_writel(value >> 24, 0x820088e8L);
	csr_writel(value >> 16, 0x820088ecL);
	csr_writel(value >> 8, 0x820088f0L);
	csr_writel(value, 0x820088f4L);
}
#define CSR_HDMI_IN1_DMA_EV_STATUS_ADDR 0x820088f8L
#define CSR_HDMI_IN1_DMA_EV_STATUS_SIZE 1
static inline unsigned char hdmi_in1_dma_ev_status_read(void) {
	unsigned char r = csr_readl(0x820088f8L);
	return r;
}
static inline void hdmi_in1_dma_ev_status_write(unsigned char value) {
	csr_writel(value, 0x820088f8L);
}
#define CSR_HDMI_IN1_DMA_EV_PENDING_ADDR 0x820088fcL
#define CSR_HDMI_IN1_DMA_EV_PENDING_SIZE 1
static inline unsigned char hdmi_in1_dma_ev_pending_read(void) {
	unsigned char r = csr_readl(0x820088fcL);
	return r;
}
static inline void hdmi_in1_dma_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x820088fcL);
}
#define CSR_HDMI_IN1_DMA_EV_ENABLE_ADDR 0x82008900L
#define CSR_HDMI_IN1_DMA_EV_ENABLE_SIZE 1
static inline unsigned char hdmi_in1_dma_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82008900L);
	return r;
}
static inline void hdmi_in1_dma_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82008900L);
}

/* hdmi_out0 */
#define CSR_HDMI_OUT0_BASE 0x82006800L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_ENABLE_ADDR 0x82006800L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_ENABLE_SIZE 1
static inline unsigned char hdmi_out0_core_underflow_enable_read(void) {
	unsigned char r = csr_readl(0x82006800L);
	return r;
}
static inline void hdmi_out0_core_underflow_enable_write(unsigned char value) {
	csr_writel(value, 0x82006800L);
}
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_UPDATE_ADDR 0x82006804L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_UPDATE_SIZE 1
static inline unsigned char hdmi_out0_core_underflow_update_read(void) {
	unsigned char r = csr_readl(0x82006804L);
	return r;
}
static inline void hdmi_out0_core_underflow_update_write(unsigned char value) {
	csr_writel(value, 0x82006804L);
}
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_COUNTER_ADDR 0x82006808L
#define CSR_HDMI_OUT0_CORE_UNDERFLOW_COUNTER_SIZE 4
static inline unsigned int hdmi_out0_core_underflow_counter_read(void) {
	unsigned int r = csr_readl(0x82006808L);
	r <<= 8;
	r |= csr_readl(0x8200680cL);
	r <<= 8;
	r |= csr_readl(0x82006810L);
	r <<= 8;
	r |= csr_readl(0x82006814L);
	return r;
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_ENABLE_ADDR 0x82006818L
#define CSR_HDMI_OUT0_CORE_INITIATOR_ENABLE_SIZE 1
static inline unsigned char hdmi_out0_core_initiator_enable_read(void) {
	unsigned char r = csr_readl(0x82006818L);
	return r;
}
static inline void hdmi_out0_core_initiator_enable_write(unsigned char value) {
	csr_writel(value, 0x82006818L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HRES_ADDR 0x8200681cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_HRES_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hres_read(void) {
	unsigned short int r = csr_readl(0x8200681cL);
	r <<= 8;
	r |= csr_readl(0x82006820L);
	return r;
}
static inline void hdmi_out0_core_initiator_hres_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200681cL);
	csr_writel(value, 0x82006820L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_START_ADDR 0x82006824L
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_START_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hsync_start_read(void) {
	unsigned short int r = csr_readl(0x82006824L);
	r <<= 8;
	r |= csr_readl(0x82006828L);
	return r;
}
static inline void hdmi_out0_core_initiator_hsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82006824L);
	csr_writel(value, 0x82006828L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_END_ADDR 0x8200682cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSYNC_END_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hsync_end_read(void) {
	unsigned short int r = csr_readl(0x8200682cL);
	r <<= 8;
	r |= csr_readl(0x82006830L);
	return r;
}
static inline void hdmi_out0_core_initiator_hsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200682cL);
	csr_writel(value, 0x82006830L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSCAN_ADDR 0x82006834L
#define CSR_HDMI_OUT0_CORE_INITIATOR_HSCAN_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_hscan_read(void) {
	unsigned short int r = csr_readl(0x82006834L);
	r <<= 8;
	r |= csr_readl(0x82006838L);
	return r;
}
static inline void hdmi_out0_core_initiator_hscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82006834L);
	csr_writel(value, 0x82006838L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VRES_ADDR 0x8200683cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_VRES_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vres_read(void) {
	unsigned short int r = csr_readl(0x8200683cL);
	r <<= 8;
	r |= csr_readl(0x82006840L);
	return r;
}
static inline void hdmi_out0_core_initiator_vres_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200683cL);
	csr_writel(value, 0x82006840L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_START_ADDR 0x82006844L
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_START_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vsync_start_read(void) {
	unsigned short int r = csr_readl(0x82006844L);
	r <<= 8;
	r |= csr_readl(0x82006848L);
	return r;
}
static inline void hdmi_out0_core_initiator_vsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82006844L);
	csr_writel(value, 0x82006848L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_END_ADDR 0x8200684cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSYNC_END_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vsync_end_read(void) {
	unsigned short int r = csr_readl(0x8200684cL);
	r <<= 8;
	r |= csr_readl(0x82006850L);
	return r;
}
static inline void hdmi_out0_core_initiator_vsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200684cL);
	csr_writel(value, 0x82006850L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSCAN_ADDR 0x82006854L
#define CSR_HDMI_OUT0_CORE_INITIATOR_VSCAN_SIZE 2
static inline unsigned short int hdmi_out0_core_initiator_vscan_read(void) {
	unsigned short int r = csr_readl(0x82006854L);
	r <<= 8;
	r |= csr_readl(0x82006858L);
	return r;
}
static inline void hdmi_out0_core_initiator_vscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82006854L);
	csr_writel(value, 0x82006858L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_BASE_ADDR 0x8200685cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_BASE_SIZE 4
static inline unsigned int hdmi_out0_core_initiator_base_read(void) {
	unsigned int r = csr_readl(0x8200685cL);
	r <<= 8;
	r |= csr_readl(0x82006860L);
	r <<= 8;
	r |= csr_readl(0x82006864L);
	r <<= 8;
	r |= csr_readl(0x82006868L);
	return r;
}
static inline void hdmi_out0_core_initiator_base_write(unsigned int value) {
	csr_writel(value >> 24, 0x8200685cL);
	csr_writel(value >> 16, 0x82006860L);
	csr_writel(value >> 8, 0x82006864L);
	csr_writel(value, 0x82006868L);
}
#define CSR_HDMI_OUT0_CORE_INITIATOR_LENGTH_ADDR 0x8200686cL
#define CSR_HDMI_OUT0_CORE_INITIATOR_LENGTH_SIZE 4
static inline unsigned int hdmi_out0_core_initiator_length_read(void) {
	unsigned int r = csr_readl(0x8200686cL);
	r <<= 8;
	r |= csr_readl(0x82006870L);
	r <<= 8;
	r |= csr_readl(0x82006874L);
	r <<= 8;
	r |= csr_readl(0x82006878L);
	return r;
}
static inline void hdmi_out0_core_initiator_length_write(unsigned int value) {
	csr_writel(value >> 24, 0x8200686cL);
	csr_writel(value >> 16, 0x82006870L);
	csr_writel(value >> 8, 0x82006874L);
	csr_writel(value, 0x82006878L);
}
#define CSR_HDMI_OUT0_CORE_DMA_DELAY_BASE_ADDR 0x8200687cL
#define CSR_HDMI_OUT0_CORE_DMA_DELAY_BASE_SIZE 4
static inline unsigned int hdmi_out0_core_dma_delay_base_read(void) {
	unsigned int r = csr_readl(0x8200687cL);
	r <<= 8;
	r |= csr_readl(0x82006880L);
	r <<= 8;
	r |= csr_readl(0x82006884L);
	r <<= 8;
	r |= csr_readl(0x82006888L);
	return r;
}
static inline void hdmi_out0_core_dma_delay_base_write(unsigned int value) {
	csr_writel(value >> 24, 0x8200687cL);
	csr_writel(value >> 16, 0x82006880L);
	csr_writel(value >> 8, 0x82006884L);
	csr_writel(value, 0x82006888L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_CMD_DATA_ADDR 0x8200688cL
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_CMD_DATA_SIZE 2
static inline unsigned short int hdmi_out0_driver_clocking_cmd_data_read(void) {
	unsigned short int r = csr_readl(0x8200688cL);
	r <<= 8;
	r |= csr_readl(0x82006890L);
	return r;
}
static inline void hdmi_out0_driver_clocking_cmd_data_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200688cL);
	csr_writel(value, 0x82006890L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_SEND_CMD_DATA_ADDR 0x82006894L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_SEND_CMD_DATA_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_send_cmd_data_read(void) {
	unsigned char r = csr_readl(0x82006894L);
	return r;
}
static inline void hdmi_out0_driver_clocking_send_cmd_data_write(unsigned char value) {
	csr_writel(value, 0x82006894L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_SEND_GO_ADDR 0x82006898L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_SEND_GO_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_send_go_read(void) {
	unsigned char r = csr_readl(0x82006898L);
	return r;
}
static inline void hdmi_out0_driver_clocking_send_go_write(unsigned char value) {
	csr_writel(value, 0x82006898L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_STATUS_ADDR 0x8200689cL
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_STATUS_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_status_read(void) {
	unsigned char r = csr_readl(0x8200689cL);
	return r;
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_RESET_ADDR 0x820068a0L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_RESET_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_reset_read(void) {
	unsigned char r = csr_readl(0x820068a0L);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_reset_write(unsigned char value) {
	csr_writel(value, 0x820068a0L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_ADR_ADDR 0x820068a4L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_ADR_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_adr_read(void) {
	unsigned char r = csr_readl(0x820068a4L);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_adr_write(unsigned char value) {
	csr_writel(value, 0x820068a4L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DAT_R_ADDR 0x820068a8L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DAT_R_SIZE 2
static inline unsigned short int hdmi_out0_driver_clocking_pll_dat_r_read(void) {
	unsigned short int r = csr_readl(0x820068a8L);
	r <<= 8;
	r |= csr_readl(0x820068acL);
	return r;
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DAT_W_ADDR 0x820068b0L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DAT_W_SIZE 2
static inline unsigned short int hdmi_out0_driver_clocking_pll_dat_w_read(void) {
	unsigned short int r = csr_readl(0x820068b0L);
	r <<= 8;
	r |= csr_readl(0x820068b4L);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_dat_w_write(unsigned short int value) {
	csr_writel(value >> 8, 0x820068b0L);
	csr_writel(value, 0x820068b4L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_READ_ADDR 0x820068b8L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_READ_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_read_read(void) {
	unsigned char r = csr_readl(0x820068b8L);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_read_write(unsigned char value) {
	csr_writel(value, 0x820068b8L);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_WRITE_ADDR 0x820068bcL
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_WRITE_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_write_read(void) {
	unsigned char r = csr_readl(0x820068bcL);
	return r;
}
static inline void hdmi_out0_driver_clocking_pll_write_write(unsigned char value) {
	csr_writel(value, 0x820068bcL);
}
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DRDY_ADDR 0x820068c0L
#define CSR_HDMI_OUT0_DRIVER_CLOCKING_PLL_DRDY_SIZE 1
static inline unsigned char hdmi_out0_driver_clocking_pll_drdy_read(void) {
	unsigned char r = csr_readl(0x820068c0L);
	return r;
}

/* hdmi_out1 */
#define CSR_HDMI_OUT1_BASE 0x82007000L
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_ENABLE_ADDR 0x82007000L
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_ENABLE_SIZE 1
static inline unsigned char hdmi_out1_core_underflow_enable_read(void) {
	unsigned char r = csr_readl(0x82007000L);
	return r;
}
static inline void hdmi_out1_core_underflow_enable_write(unsigned char value) {
	csr_writel(value, 0x82007000L);
}
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_UPDATE_ADDR 0x82007004L
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_UPDATE_SIZE 1
static inline unsigned char hdmi_out1_core_underflow_update_read(void) {
	unsigned char r = csr_readl(0x82007004L);
	return r;
}
static inline void hdmi_out1_core_underflow_update_write(unsigned char value) {
	csr_writel(value, 0x82007004L);
}
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_COUNTER_ADDR 0x82007008L
#define CSR_HDMI_OUT1_CORE_UNDERFLOW_COUNTER_SIZE 4
static inline unsigned int hdmi_out1_core_underflow_counter_read(void) {
	unsigned int r = csr_readl(0x82007008L);
	r <<= 8;
	r |= csr_readl(0x8200700cL);
	r <<= 8;
	r |= csr_readl(0x82007010L);
	r <<= 8;
	r |= csr_readl(0x82007014L);
	return r;
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_ENABLE_ADDR 0x82007018L
#define CSR_HDMI_OUT1_CORE_INITIATOR_ENABLE_SIZE 1
static inline unsigned char hdmi_out1_core_initiator_enable_read(void) {
	unsigned char r = csr_readl(0x82007018L);
	return r;
}
static inline void hdmi_out1_core_initiator_enable_write(unsigned char value) {
	csr_writel(value, 0x82007018L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_HRES_ADDR 0x8200701cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_HRES_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_hres_read(void) {
	unsigned short int r = csr_readl(0x8200701cL);
	r <<= 8;
	r |= csr_readl(0x82007020L);
	return r;
}
static inline void hdmi_out1_core_initiator_hres_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200701cL);
	csr_writel(value, 0x82007020L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSYNC_START_ADDR 0x82007024L
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSYNC_START_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_hsync_start_read(void) {
	unsigned short int r = csr_readl(0x82007024L);
	r <<= 8;
	r |= csr_readl(0x82007028L);
	return r;
}
static inline void hdmi_out1_core_initiator_hsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82007024L);
	csr_writel(value, 0x82007028L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSYNC_END_ADDR 0x8200702cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSYNC_END_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_hsync_end_read(void) {
	unsigned short int r = csr_readl(0x8200702cL);
	r <<= 8;
	r |= csr_readl(0x82007030L);
	return r;
}
static inline void hdmi_out1_core_initiator_hsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200702cL);
	csr_writel(value, 0x82007030L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSCAN_ADDR 0x82007034L
#define CSR_HDMI_OUT1_CORE_INITIATOR_HSCAN_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_hscan_read(void) {
	unsigned short int r = csr_readl(0x82007034L);
	r <<= 8;
	r |= csr_readl(0x82007038L);
	return r;
}
static inline void hdmi_out1_core_initiator_hscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82007034L);
	csr_writel(value, 0x82007038L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_VRES_ADDR 0x8200703cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_VRES_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_vres_read(void) {
	unsigned short int r = csr_readl(0x8200703cL);
	r <<= 8;
	r |= csr_readl(0x82007040L);
	return r;
}
static inline void hdmi_out1_core_initiator_vres_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200703cL);
	csr_writel(value, 0x82007040L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSYNC_START_ADDR 0x82007044L
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSYNC_START_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_vsync_start_read(void) {
	unsigned short int r = csr_readl(0x82007044L);
	r <<= 8;
	r |= csr_readl(0x82007048L);
	return r;
}
static inline void hdmi_out1_core_initiator_vsync_start_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82007044L);
	csr_writel(value, 0x82007048L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSYNC_END_ADDR 0x8200704cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSYNC_END_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_vsync_end_read(void) {
	unsigned short int r = csr_readl(0x8200704cL);
	r <<= 8;
	r |= csr_readl(0x82007050L);
	return r;
}
static inline void hdmi_out1_core_initiator_vsync_end_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200704cL);
	csr_writel(value, 0x82007050L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSCAN_ADDR 0x82007054L
#define CSR_HDMI_OUT1_CORE_INITIATOR_VSCAN_SIZE 2
static inline unsigned short int hdmi_out1_core_initiator_vscan_read(void) {
	unsigned short int r = csr_readl(0x82007054L);
	r <<= 8;
	r |= csr_readl(0x82007058L);
	return r;
}
static inline void hdmi_out1_core_initiator_vscan_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82007054L);
	csr_writel(value, 0x82007058L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_BASE_ADDR 0x8200705cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_BASE_SIZE 4
static inline unsigned int hdmi_out1_core_initiator_base_read(void) {
	unsigned int r = csr_readl(0x8200705cL);
	r <<= 8;
	r |= csr_readl(0x82007060L);
	r <<= 8;
	r |= csr_readl(0x82007064L);
	r <<= 8;
	r |= csr_readl(0x82007068L);
	return r;
}
static inline void hdmi_out1_core_initiator_base_write(unsigned int value) {
	csr_writel(value >> 24, 0x8200705cL);
	csr_writel(value >> 16, 0x82007060L);
	csr_writel(value >> 8, 0x82007064L);
	csr_writel(value, 0x82007068L);
}
#define CSR_HDMI_OUT1_CORE_INITIATOR_LENGTH_ADDR 0x8200706cL
#define CSR_HDMI_OUT1_CORE_INITIATOR_LENGTH_SIZE 4
static inline unsigned int hdmi_out1_core_initiator_length_read(void) {
	unsigned int r = csr_readl(0x8200706cL);
	r <<= 8;
	r |= csr_readl(0x82007070L);
	r <<= 8;
	r |= csr_readl(0x82007074L);
	r <<= 8;
	r |= csr_readl(0x82007078L);
	return r;
}
static inline void hdmi_out1_core_initiator_length_write(unsigned int value) {
	csr_writel(value >> 24, 0x8200706cL);
	csr_writel(value >> 16, 0x82007070L);
	csr_writel(value >> 8, 0x82007074L);
	csr_writel(value, 0x82007078L);
}
#define CSR_HDMI_OUT1_CORE_DMA_DELAY_BASE_ADDR 0x8200707cL
#define CSR_HDMI_OUT1_CORE_DMA_DELAY_BASE_SIZE 4
static inline unsigned int hdmi_out1_core_dma_delay_base_read(void) {
	unsigned int r = csr_readl(0x8200707cL);
	r <<= 8;
	r |= csr_readl(0x82007080L);
	r <<= 8;
	r |= csr_readl(0x82007084L);
	r <<= 8;
	r |= csr_readl(0x82007088L);
	return r;
}
static inline void hdmi_out1_core_dma_delay_base_write(unsigned int value) {
	csr_writel(value >> 24, 0x8200707cL);
	csr_writel(value >> 16, 0x82007080L);
	csr_writel(value >> 8, 0x82007084L);
	csr_writel(value, 0x82007088L);
}

/* info */
#define CSR_INFO_BASE 0x82006000L
#define CSR_INFO_DNA_ID_ADDR 0x82006000L
#define CSR_INFO_DNA_ID_SIZE 8
static inline unsigned long long int info_dna_id_read(void) {
	unsigned long long int r = csr_readl(0x82006000L);
	r <<= 8;
	r |= csr_readl(0x82006004L);
	r <<= 8;
	r |= csr_readl(0x82006008L);
	r <<= 8;
	r |= csr_readl(0x8200600cL);
	r <<= 8;
	r |= csr_readl(0x82006010L);
	r <<= 8;
	r |= csr_readl(0x82006014L);
	r <<= 8;
	r |= csr_readl(0x82006018L);
	r <<= 8;
	r |= csr_readl(0x8200601cL);
	return r;
}
#define CSR_INFO_GIT_COMMIT_ADDR 0x82006020L
#define CSR_INFO_GIT_COMMIT_SIZE 20
#define CSR_INFO_PLATFORM_PLATFORM_ADDR 0x82006070L
#define CSR_INFO_PLATFORM_PLATFORM_SIZE 8
static inline unsigned long long int info_platform_platform_read(void) {
	unsigned long long int r = csr_readl(0x82006070L);
	r <<= 8;
	r |= csr_readl(0x82006074L);
	r <<= 8;
	r |= csr_readl(0x82006078L);
	r <<= 8;
	r |= csr_readl(0x8200607cL);
	r <<= 8;
	r |= csr_readl(0x82006080L);
	r <<= 8;
	r |= csr_readl(0x82006084L);
	r <<= 8;
	r |= csr_readl(0x82006088L);
	r <<= 8;
	r |= csr_readl(0x8200608cL);
	return r;
}
#define CSR_INFO_PLATFORM_TARGET_ADDR 0x82006090L
#define CSR_INFO_PLATFORM_TARGET_SIZE 8
static inline unsigned long long int info_platform_target_read(void) {
	unsigned long long int r = csr_readl(0x82006090L);
	r <<= 8;
	r |= csr_readl(0x82006094L);
	r <<= 8;
	r |= csr_readl(0x82006098L);
	r <<= 8;
	r |= csr_readl(0x8200609cL);
	r <<= 8;
	r |= csr_readl(0x820060a0L);
	r <<= 8;
	r |= csr_readl(0x820060a4L);
	r <<= 8;
	r |= csr_readl(0x820060a8L);
	r <<= 8;
	r |= csr_readl(0x820060acL);
	return r;
}

/* sdram */
#define CSR_SDRAM_BASE 0x82004000L
#define CSR_SDRAM_DFII_CONTROL_ADDR 0x82004000L
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline unsigned char sdram_dfii_control_read(void) {
	unsigned char r = csr_readl(0x82004000L);
	return r;
}
static inline void sdram_dfii_control_write(unsigned char value) {
	csr_writel(value, 0x82004000L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR 0x82004004L
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_read(void) {
	unsigned char r = csr_readl(0x82004004L);
	return r;
}
static inline void sdram_dfii_pi0_command_write(unsigned char value) {
	csr_writel(value, 0x82004004L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR 0x82004008L
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_issue_read(void) {
	unsigned char r = csr_readl(0x82004008L);
	return r;
}
static inline void sdram_dfii_pi0_command_issue_write(unsigned char value) {
	csr_writel(value, 0x82004008L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR 0x8200400cL
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi0_address_read(void) {
	unsigned short int r = csr_readl(0x8200400cL);
	r <<= 8;
	r |= csr_readl(0x82004010L);
	return r;
}
static inline void sdram_dfii_pi0_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200400cL);
	csr_writel(value, 0x82004010L);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR 0x82004014L
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi0_baddress_read(void) {
	unsigned char r = csr_readl(0x82004014L);
	return r;
}
static inline void sdram_dfii_pi0_baddress_write(unsigned char value) {
	csr_writel(value, 0x82004014L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR 0x82004018L
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi0_wrdata_read(void) {
	unsigned int r = csr_readl(0x82004018L);
	r <<= 8;
	r |= csr_readl(0x8200401cL);
	r <<= 8;
	r |= csr_readl(0x82004020L);
	r <<= 8;
	r |= csr_readl(0x82004024L);
	return r;
}
static inline void sdram_dfii_pi0_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0x82004018L);
	csr_writel(value >> 16, 0x8200401cL);
	csr_writel(value >> 8, 0x82004020L);
	csr_writel(value, 0x82004024L);
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR 0x82004028L
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi0_rddata_read(void) {
	unsigned int r = csr_readl(0x82004028L);
	r <<= 8;
	r |= csr_readl(0x8200402cL);
	r <<= 8;
	r |= csr_readl(0x82004030L);
	r <<= 8;
	r |= csr_readl(0x82004034L);
	return r;
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR 0x82004038L
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi1_command_read(void) {
	unsigned char r = csr_readl(0x82004038L);
	return r;
}
static inline void sdram_dfii_pi1_command_write(unsigned char value) {
	csr_writel(value, 0x82004038L);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR 0x8200403cL
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi1_command_issue_read(void) {
	unsigned char r = csr_readl(0x8200403cL);
	return r;
}
static inline void sdram_dfii_pi1_command_issue_write(unsigned char value) {
	csr_writel(value, 0x8200403cL);
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR 0x82004040L
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi1_address_read(void) {
	unsigned short int r = csr_readl(0x82004040L);
	r <<= 8;
	r |= csr_readl(0x82004044L);
	return r;
}
static inline void sdram_dfii_pi1_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82004040L);
	csr_writel(value, 0x82004044L);
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR 0x82004048L
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi1_baddress_read(void) {
	unsigned char r = csr_readl(0x82004048L);
	return r;
}
static inline void sdram_dfii_pi1_baddress_write(unsigned char value) {
	csr_writel(value, 0x82004048L);
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR 0x8200404cL
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi1_wrdata_read(void) {
	unsigned int r = csr_readl(0x8200404cL);
	r <<= 8;
	r |= csr_readl(0x82004050L);
	r <<= 8;
	r |= csr_readl(0x82004054L);
	r <<= 8;
	r |= csr_readl(0x82004058L);
	return r;
}
static inline void sdram_dfii_pi1_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0x8200404cL);
	csr_writel(value >> 16, 0x82004050L);
	csr_writel(value >> 8, 0x82004054L);
	csr_writel(value, 0x82004058L);
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR 0x8200405cL
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi1_rddata_read(void) {
	unsigned int r = csr_readl(0x8200405cL);
	r <<= 8;
	r |= csr_readl(0x82004060L);
	r <<= 8;
	r |= csr_readl(0x82004064L);
	r <<= 8;
	r |= csr_readl(0x82004068L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_UPDATE_ADDR 0x8200406cL
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_UPDATE_SIZE 1
static inline unsigned char sdram_controller_bandwidth_update_read(void) {
	unsigned char r = csr_readl(0x8200406cL);
	return r;
}
static inline void sdram_controller_bandwidth_update_write(unsigned char value) {
	csr_writel(value, 0x8200406cL);
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NREADS_ADDR 0x82004070L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NREADS_SIZE 3
static inline unsigned int sdram_controller_bandwidth_nreads_read(void) {
	unsigned int r = csr_readl(0x82004070L);
	r <<= 8;
	r |= csr_readl(0x82004074L);
	r <<= 8;
	r |= csr_readl(0x82004078L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NWRITES_ADDR 0x8200407cL
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NWRITES_SIZE 3
static inline unsigned int sdram_controller_bandwidth_nwrites_read(void) {
	unsigned int r = csr_readl(0x8200407cL);
	r <<= 8;
	r |= csr_readl(0x82004080L);
	r <<= 8;
	r |= csr_readl(0x82004084L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_DATA_WIDTH_ADDR 0x82004088L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_DATA_WIDTH_SIZE 1
static inline unsigned char sdram_controller_bandwidth_data_width_read(void) {
	unsigned char r = csr_readl(0x82004088L);
	return r;
}

/* spiflash */
#define CSR_SPIFLASH_BASE 0x82005000L
#define CSR_SPIFLASH_BITBANG_ADDR 0x82005000L
#define CSR_SPIFLASH_BITBANG_SIZE 1
static inline unsigned char spiflash_bitbang_read(void) {
	unsigned char r = csr_readl(0x82005000L);
	return r;
}
static inline void spiflash_bitbang_write(unsigned char value) {
	csr_writel(value, 0x82005000L);
}
#define CSR_SPIFLASH_MISO_ADDR 0x82005004L
#define CSR_SPIFLASH_MISO_SIZE 1
static inline unsigned char spiflash_miso_read(void) {
	unsigned char r = csr_readl(0x82005004L);
	return r;
}
#define CSR_SPIFLASH_BITBANG_EN_ADDR 0x82005008L
#define CSR_SPIFLASH_BITBANG_EN_SIZE 1
static inline unsigned char spiflash_bitbang_en_read(void) {
	unsigned char r = csr_readl(0x82005008L);
	return r;
}
static inline void spiflash_bitbang_en_write(unsigned char value) {
	csr_writel(value, 0x82005008L);
}

/* timer0 */
#define CSR_TIMER0_BASE 0x82002800L
#define CSR_TIMER0_LOAD_ADDR 0x82002800L
#define CSR_TIMER0_LOAD_SIZE 4
static inline unsigned int timer0_load_read(void) {
	unsigned int r = csr_readl(0x82002800L);
	r <<= 8;
	r |= csr_readl(0x82002804L);
	r <<= 8;
	r |= csr_readl(0x82002808L);
	r <<= 8;
	r |= csr_readl(0x8200280cL);
	return r;
}
static inline void timer0_load_write(unsigned int value) {
	csr_writel(value >> 24, 0x82002800L);
	csr_writel(value >> 16, 0x82002804L);
	csr_writel(value >> 8, 0x82002808L);
	csr_writel(value, 0x8200280cL);
}
#define CSR_TIMER0_RELOAD_ADDR 0x82002810L
#define CSR_TIMER0_RELOAD_SIZE 4
static inline unsigned int timer0_reload_read(void) {
	unsigned int r = csr_readl(0x82002810L);
	r <<= 8;
	r |= csr_readl(0x82002814L);
	r <<= 8;
	r |= csr_readl(0x82002818L);
	r <<= 8;
	r |= csr_readl(0x8200281cL);
	return r;
}
static inline void timer0_reload_write(unsigned int value) {
	csr_writel(value >> 24, 0x82002810L);
	csr_writel(value >> 16, 0x82002814L);
	csr_writel(value >> 8, 0x82002818L);
	csr_writel(value, 0x8200281cL);
}
#define CSR_TIMER0_EN_ADDR 0x82002820L
#define CSR_TIMER0_EN_SIZE 1
static inline unsigned char timer0_en_read(void) {
	unsigned char r = csr_readl(0x82002820L);
	return r;
}
static inline void timer0_en_write(unsigned char value) {
	csr_writel(value, 0x82002820L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0x82002824L
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline unsigned char timer0_update_value_read(void) {
	unsigned char r = csr_readl(0x82002824L);
	return r;
}
static inline void timer0_update_value_write(unsigned char value) {
	csr_writel(value, 0x82002824L);
}
#define CSR_TIMER0_VALUE_ADDR 0x82002828L
#define CSR_TIMER0_VALUE_SIZE 4
static inline unsigned int timer0_value_read(void) {
	unsigned int r = csr_readl(0x82002828L);
	r <<= 8;
	r |= csr_readl(0x8200282cL);
	r <<= 8;
	r |= csr_readl(0x82002830L);
	r <<= 8;
	r |= csr_readl(0x82002834L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0x82002838L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline unsigned char timer0_ev_status_read(void) {
	unsigned char r = csr_readl(0x82002838L);
	return r;
}
static inline void timer0_ev_status_write(unsigned char value) {
	csr_writel(value, 0x82002838L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0x8200283cL
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline unsigned char timer0_ev_pending_read(void) {
	unsigned char r = csr_readl(0x8200283cL);
	return r;
}
static inline void timer0_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x8200283cL);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0x82002840L
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline unsigned char timer0_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82002840L);
	return r;
}
static inline void timer0_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82002840L);
}

/* uart */
#define CSR_UART_BASE 0x82001800L
#define CSR_UART_RXTX_ADDR 0x82001800L
#define CSR_UART_RXTX_SIZE 1
static inline unsigned char uart_rxtx_read(void) {
	unsigned char r = csr_readl(0x82001800L);
	return r;
}
static inline void uart_rxtx_write(unsigned char value) {
	csr_writel(value, 0x82001800L);
}
#define CSR_UART_TXFULL_ADDR 0x82001804L
#define CSR_UART_TXFULL_SIZE 1
static inline unsigned char uart_txfull_read(void) {
	unsigned char r = csr_readl(0x82001804L);
	return r;
}
#define CSR_UART_RXEMPTY_ADDR 0x82001808L
#define CSR_UART_RXEMPTY_SIZE 1
static inline unsigned char uart_rxempty_read(void) {
	unsigned char r = csr_readl(0x82001808L);
	return r;
}
#define CSR_UART_EV_STATUS_ADDR 0x8200180cL
#define CSR_UART_EV_STATUS_SIZE 1
static inline unsigned char uart_ev_status_read(void) {
	unsigned char r = csr_readl(0x8200180cL);
	return r;
}
static inline void uart_ev_status_write(unsigned char value) {
	csr_writel(value, 0x8200180cL);
}
#define CSR_UART_EV_PENDING_ADDR 0x82001810L
#define CSR_UART_EV_PENDING_SIZE 1
static inline unsigned char uart_ev_pending_read(void) {
	unsigned char r = csr_readl(0x82001810L);
	return r;
}
static inline void uart_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x82001810L);
}
#define CSR_UART_EV_ENABLE_ADDR 0x82001814L
#define CSR_UART_EV_ENABLE_SIZE 1
static inline unsigned char uart_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82001814L);
	return r;
}
static inline void uart_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82001814L);
}

/* uart_phy */
#define CSR_UART_PHY_BASE 0x82001000L
#define CSR_UART_PHY_TUNING_WORD_ADDR 0x82001000L
#define CSR_UART_PHY_TUNING_WORD_SIZE 4
static inline unsigned int uart_phy_tuning_word_read(void) {
	unsigned int r = csr_readl(0x82001000L);
	r <<= 8;
	r |= csr_readl(0x82001004L);
	r <<= 8;
	r |= csr_readl(0x82001008L);
	r <<= 8;
	r |= csr_readl(0x8200100cL);
	return r;
}
static inline void uart_phy_tuning_word_write(unsigned int value) {
	csr_writel(value >> 24, 0x82001000L);
	csr_writel(value >> 16, 0x82001004L);
	csr_writel(value >> 8, 0x82001008L);
	csr_writel(value, 0x8200100cL);
}

/* hdmi_in0_edid_mem */
#define CSR_HDMI_IN0_EDID_MEM_BASE 0x82008000L

/* hdmi_in1_edid_mem */
#define CSR_HDMI_IN1_EDID_MEM_BASE 0x82009000L

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE 0x82002000L

/* constants */
#define HDMI_IN0_INTERRUPT 2
static inline int hdmi_in0_interrupt_read(void) {
	return 2;
}
#define HDMI_IN1_INTERRUPT 3
static inline int hdmi_in1_interrupt_read(void) {
	return 3;
}
#define TIMER0_INTERRUPT 1
static inline int timer0_interrupt_read(void) {
	return 1;
}
#define UART_INTERRUPT 0
static inline int uart_interrupt_read(void) {
	return 0;
}
#define SPIFLASH_PAGE_SIZE 256
static inline int spiflash_page_size_read(void) {
	return 256;
}
#define SPIFLASH_SECTOR_SIZE 65536
static inline int spiflash_sector_size_read(void) {
	return 65536;
}
#define HDMI_IN0_DESCRIPTION "  Type A connector, marked as J1, on side with USB connectors.\r\n  To use J1, make sure:\r\n   * JP4 has a jumper (it connects / disconnects 5V to HDMI pin 18).\r\n   * JP2 (marked only as SDA/SCL - not to be confused with JP6 and JP6)\r\n     has *two* jumpers (horizontally).\r\n   * JP5 has a jumper (it enables the HDMI input buffer).\r\n"
static inline const char * hdmi_in0_description_read(void) {
	return "  Type A connector, marked as J1, on side with USB connectors.\r\n  To use J1, make sure:\r\n   * JP4 has a jumper (it connects / disconnects 5V to HDMI pin 18).\r\n   * JP2 (marked only as SDA/SCL - not to be confused with JP6 and JP6)\r\n     has *two* jumpers (horizontally).\r\n   * JP5 has a jumper (it enables the HDMI input buffer).\r\n";
}
#define HDMI_IN0_MNEMONIC "J1"
static inline const char * hdmi_in0_mnemonic_read(void) {
	return "J1";
}
#define HDMI_IN1_DESCRIPTION "  Type A connector, marked as J3, between audio connectors and\r\n  Ethernet RJ45 connector.\r\n  To use J3, make sure:\r\n  * JP8 has a jumper (it connects / disconnects 5V to HDMI pin 18)\r\n  * JP6 and JP7 do *not* have any jumpers (it connect J3's and J2's\r\n    EDID lines together).\r\n"
static inline const char * hdmi_in1_description_read(void) {
	return "  Type A connector, marked as J3, between audio connectors and\r\n  Ethernet RJ45 connector.\r\n  To use J3, make sure:\r\n  * JP8 has a jumper (it connects / disconnects 5V to HDMI pin 18)\r\n  * JP6 and JP7 do *not* have any jumpers (it connect J3's and J2's\r\n    EDID lines together).\r\n";
}
#define HDMI_IN1_MNEMONIC "J3"
static inline const char * hdmi_in1_mnemonic_read(void) {
	return "J3";
}
#define HDMI_OUT0_DESCRIPTION "  Type A connector, marked as J2, next to the power connector.\r\n  To use J2, make sure:\r\n  * JP8 has a jumper (it connects / disconnects 5V to HDMI pin 18)\r\n  * JP6 and JP7 do *not* have any jumpers (it connect J3's and J2's\r\n    EDID lines together).\r\n"
static inline const char * hdmi_out0_description_read(void) {
	return "  Type A connector, marked as J2, next to the power connector.\r\n  To use J2, make sure:\r\n  * JP8 has a jumper (it connects / disconnects 5V to HDMI pin 18)\r\n  * JP6 and JP7 do *not* have any jumpers (it connect J3's and J2's\r\n    EDID lines together).\r\n";
}
#define HDMI_OUT0_MNEMONIC "J2"
static inline const char * hdmi_out0_mnemonic_read(void) {
	return "J2";
}
#define HDMI_OUT1_DESCRIPTION "  Micro-D connector, marked as JB, on the same side as switches\r\n  + LEDs but on the underside of the board below MOD connector.\r\n  Works as either output or input because it isn't buffered.\r\n  Also often referred to as 'JA'.\r\n"
static inline const char * hdmi_out1_description_read(void) {
	return "  Micro-D connector, marked as JB, on the same side as switches\r\n  + LEDs but on the underside of the board below MOD connector.\r\n  Works as either output or input because it isn't buffered.\r\n  Also often referred to as 'JA'.\r\n";
}
#define HDMI_OUT1_MNEMONIC "JB"
static inline const char * hdmi_out1_mnemonic_read(void) {
	return "JB";
}
#define HDMI_OUT0_DRIVER_CLOCKING_MAX_PIX_CLK 100000000
static inline int hdmi_out0_driver_clocking_max_pix_clk_read(void) {
	return 100000000;
}
#define HDMI_OUT0_DRIVER_CLOCKING_CLKFX_MD_MAX_1000 2000
static inline int hdmi_out0_driver_clocking_clkfx_md_max_1000_read(void) {
	return 2000;
}
#define CONFIG_CLOCK_FREQUENCY 75000000
static inline int config_clock_frequency_read(void) {
	return 75000000;
}
#define CONFIG_CPU_RESET_ADDR 0
static inline int config_cpu_reset_addr_read(void) {
	return 0;
}
#define CONFIG_CPU_TYPE "LM32"
static inline const char * config_cpu_type_read(void) {
	return "LM32";
}
#define CONFIG_CPU_TYPE_LM32 1
static inline int config_cpu_type_lm32_read(void) {
	return 1;
}
#define CONFIG_CSR_ALIGNMENT 32
static inline int config_csr_alignment_read(void) {
	return 32;
}
#define CONFIG_CSR_DATA_WIDTH 8
static inline int config_csr_data_width_read(void) {
	return 8;
}
#define CONFIG_L2_SIZE 8192
static inline int config_l2_size_read(void) {
	return 8192;
}

#endif
