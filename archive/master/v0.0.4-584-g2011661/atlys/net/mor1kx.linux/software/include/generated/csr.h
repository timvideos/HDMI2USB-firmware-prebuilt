//--------------------------------------------------------------------------------
// Auto-generated by Migen (5585912) & LiteX (e637aa65) on 2020-01-13 03:03:19
//--------------------------------------------------------------------------------
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#ifdef CSR_ACCESSORS_DEFINED
extern void csr_writeb(uint8_t value, unsigned long addr);
extern uint8_t csr_readb(unsigned long addr);
extern void csr_writew(uint16_t value, unsigned long addr);
extern uint16_t csr_readw(unsigned long addr);
extern void csr_writel(uint32_t value, unsigned long addr);
extern uint32_t csr_readl(unsigned long addr);
#else /* ! CSR_ACCESSORS_DEFINED */
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */

/* ctrl */
#define CSR_CTRL_BASE 0x82000000L
#define CSR_CTRL_RESET_ADDR 0x82000000L
#define CSR_CTRL_RESET_SIZE 1
static inline unsigned char ctrl_reset_read(void) {
	unsigned char r = csr_readl(0x82000000L);
	return r;
}
static inline void ctrl_reset_write(unsigned char value) {
	csr_writel(value, 0x82000000L);
}
#define CSR_CTRL_SCRATCH_ADDR 0x82000004L
#define CSR_CTRL_SCRATCH_SIZE 4
static inline unsigned int ctrl_scratch_read(void) {
	unsigned int r = csr_readl(0x82000004L);
	r <<= 8;
	r |= csr_readl(0x82000008L);
	r <<= 8;
	r |= csr_readl(0x8200000cL);
	r <<= 8;
	r |= csr_readl(0x82000010L);
	return r;
}
static inline void ctrl_scratch_write(unsigned int value) {
	csr_writel(value >> 24, 0x82000004L);
	csr_writel(value >> 16, 0x82000008L);
	csr_writel(value >> 8, 0x8200000cL);
	csr_writel(value, 0x82000010L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR 0x82000014L
#define CSR_CTRL_BUS_ERRORS_SIZE 4
static inline unsigned int ctrl_bus_errors_read(void) {
	unsigned int r = csr_readl(0x82000014L);
	r <<= 8;
	r |= csr_readl(0x82000018L);
	r <<= 8;
	r |= csr_readl(0x8200001cL);
	r <<= 8;
	r |= csr_readl(0x82000020L);
	return r;
}

/* ethmac */
#define CSR_ETHMAC_BASE 0x82007000L
#define CSR_ETHMAC_SRAM_WRITER_SLOT_ADDR 0x82007000L
#define CSR_ETHMAC_SRAM_WRITER_SLOT_SIZE 1
static inline unsigned char ethmac_sram_writer_slot_read(void) {
	unsigned char r = csr_readl(0x82007000L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_ADDR 0x82007004L
#define CSR_ETHMAC_SRAM_WRITER_LENGTH_SIZE 4
static inline unsigned int ethmac_sram_writer_length_read(void) {
	unsigned int r = csr_readl(0x82007004L);
	r <<= 8;
	r |= csr_readl(0x82007008L);
	r <<= 8;
	r |= csr_readl(0x8200700cL);
	r <<= 8;
	r |= csr_readl(0x82007010L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_ADDR 0x82007014L
#define CSR_ETHMAC_SRAM_WRITER_ERRORS_SIZE 4
static inline unsigned int ethmac_sram_writer_errors_read(void) {
	unsigned int r = csr_readl(0x82007014L);
	r <<= 8;
	r |= csr_readl(0x82007018L);
	r <<= 8;
	r |= csr_readl(0x8200701cL);
	r <<= 8;
	r |= csr_readl(0x82007020L);
	return r;
}
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_ADDR 0x82007024L
#define CSR_ETHMAC_SRAM_WRITER_EV_STATUS_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_status_read(void) {
	unsigned char r = csr_readl(0x82007024L);
	return r;
}
static inline void ethmac_sram_writer_ev_status_write(unsigned char value) {
	csr_writel(value, 0x82007024L);
}
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_ADDR 0x82007028L
#define CSR_ETHMAC_SRAM_WRITER_EV_PENDING_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_pending_read(void) {
	unsigned char r = csr_readl(0x82007028L);
	return r;
}
static inline void ethmac_sram_writer_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x82007028L);
}
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_ADDR 0x8200702cL
#define CSR_ETHMAC_SRAM_WRITER_EV_ENABLE_SIZE 1
static inline unsigned char ethmac_sram_writer_ev_enable_read(void) {
	unsigned char r = csr_readl(0x8200702cL);
	return r;
}
static inline void ethmac_sram_writer_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x8200702cL);
}
#define CSR_ETHMAC_SRAM_READER_START_ADDR 0x82007030L
#define CSR_ETHMAC_SRAM_READER_START_SIZE 1
static inline unsigned char ethmac_sram_reader_start_read(void) {
	unsigned char r = csr_readl(0x82007030L);
	return r;
}
static inline void ethmac_sram_reader_start_write(unsigned char value) {
	csr_writel(value, 0x82007030L);
}
#define CSR_ETHMAC_SRAM_READER_READY_ADDR 0x82007034L
#define CSR_ETHMAC_SRAM_READER_READY_SIZE 1
static inline unsigned char ethmac_sram_reader_ready_read(void) {
	unsigned char r = csr_readl(0x82007034L);
	return r;
}
#define CSR_ETHMAC_SRAM_READER_LEVEL_ADDR 0x82007038L
#define CSR_ETHMAC_SRAM_READER_LEVEL_SIZE 1
static inline unsigned char ethmac_sram_reader_level_read(void) {
	unsigned char r = csr_readl(0x82007038L);
	return r;
}
#define CSR_ETHMAC_SRAM_READER_SLOT_ADDR 0x8200703cL
#define CSR_ETHMAC_SRAM_READER_SLOT_SIZE 1
static inline unsigned char ethmac_sram_reader_slot_read(void) {
	unsigned char r = csr_readl(0x8200703cL);
	return r;
}
static inline void ethmac_sram_reader_slot_write(unsigned char value) {
	csr_writel(value, 0x8200703cL);
}
#define CSR_ETHMAC_SRAM_READER_LENGTH_ADDR 0x82007040L
#define CSR_ETHMAC_SRAM_READER_LENGTH_SIZE 2
static inline unsigned short int ethmac_sram_reader_length_read(void) {
	unsigned short int r = csr_readl(0x82007040L);
	r <<= 8;
	r |= csr_readl(0x82007044L);
	return r;
}
static inline void ethmac_sram_reader_length_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82007040L);
	csr_writel(value, 0x82007044L);
}
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_ADDR 0x82007048L
#define CSR_ETHMAC_SRAM_READER_EV_STATUS_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_status_read(void) {
	unsigned char r = csr_readl(0x82007048L);
	return r;
}
static inline void ethmac_sram_reader_ev_status_write(unsigned char value) {
	csr_writel(value, 0x82007048L);
}
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_ADDR 0x8200704cL
#define CSR_ETHMAC_SRAM_READER_EV_PENDING_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_pending_read(void) {
	unsigned char r = csr_readl(0x8200704cL);
	return r;
}
static inline void ethmac_sram_reader_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x8200704cL);
}
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_ADDR 0x82007050L
#define CSR_ETHMAC_SRAM_READER_EV_ENABLE_SIZE 1
static inline unsigned char ethmac_sram_reader_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82007050L);
	return r;
}
static inline void ethmac_sram_reader_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82007050L);
}
#define CSR_ETHMAC_PREAMBLE_CRC_ADDR 0x82007054L
#define CSR_ETHMAC_PREAMBLE_CRC_SIZE 1
static inline unsigned char ethmac_preamble_crc_read(void) {
	unsigned char r = csr_readl(0x82007054L);
	return r;
}
#define CSR_ETHMAC_PREAMBLE_ERRORS_ADDR 0x82007058L
#define CSR_ETHMAC_PREAMBLE_ERRORS_SIZE 4
static inline unsigned int ethmac_preamble_errors_read(void) {
	unsigned int r = csr_readl(0x82007058L);
	r <<= 8;
	r |= csr_readl(0x8200705cL);
	r <<= 8;
	r |= csr_readl(0x82007060L);
	r <<= 8;
	r |= csr_readl(0x82007064L);
	return r;
}
#define CSR_ETHMAC_CRC_ERRORS_ADDR 0x82007068L
#define CSR_ETHMAC_CRC_ERRORS_SIZE 4
static inline unsigned int ethmac_crc_errors_read(void) {
	unsigned int r = csr_readl(0x82007068L);
	r <<= 8;
	r |= csr_readl(0x8200706cL);
	r <<= 8;
	r |= csr_readl(0x82007070L);
	r <<= 8;
	r |= csr_readl(0x82007074L);
	return r;
}

/* ethphy */
#define CSR_ETHPHY_BASE 0x82006800L
#define CSR_ETHPHY_MODE_DETECTION_MODE_ADDR 0x82006800L
#define CSR_ETHPHY_MODE_DETECTION_MODE_SIZE 1
static inline unsigned char ethphy_mode_detection_mode_read(void) {
	unsigned char r = csr_readl(0x82006800L);
	return r;
}
#define CSR_ETHPHY_CRG_RESET_ADDR 0x82006804L
#define CSR_ETHPHY_CRG_RESET_SIZE 1
static inline unsigned char ethphy_crg_reset_read(void) {
	unsigned char r = csr_readl(0x82006804L);
	return r;
}
static inline void ethphy_crg_reset_write(unsigned char value) {
	csr_writel(value, 0x82006804L);
}
#define CSR_ETHPHY_MDIO_W_ADDR 0x82006808L
#define CSR_ETHPHY_MDIO_W_SIZE 1
static inline unsigned char ethphy_mdio_w_read(void) {
	unsigned char r = csr_readl(0x82006808L);
	return r;
}
static inline void ethphy_mdio_w_write(unsigned char value) {
	csr_writel(value, 0x82006808L);
}
#define CSR_ETHPHY_MDIO_R_ADDR 0x8200680cL
#define CSR_ETHPHY_MDIO_R_SIZE 1
static inline unsigned char ethphy_mdio_r_read(void) {
	unsigned char r = csr_readl(0x8200680cL);
	return r;
}

/* info */
#define CSR_INFO_BASE 0x82006000L
#define CSR_INFO_DNA_ID_ADDR 0x82006000L
#define CSR_INFO_DNA_ID_SIZE 8
static inline unsigned long long int info_dna_id_read(void) {
	unsigned long long int r = csr_readl(0x82006000L);
	r <<= 8;
	r |= csr_readl(0x82006004L);
	r <<= 8;
	r |= csr_readl(0x82006008L);
	r <<= 8;
	r |= csr_readl(0x8200600cL);
	r <<= 8;
	r |= csr_readl(0x82006010L);
	r <<= 8;
	r |= csr_readl(0x82006014L);
	r <<= 8;
	r |= csr_readl(0x82006018L);
	r <<= 8;
	r |= csr_readl(0x8200601cL);
	return r;
}
#define CSR_INFO_GIT_COMMIT_ADDR 0x82006020L
#define CSR_INFO_GIT_COMMIT_SIZE 20
#define CSR_INFO_PLATFORM_PLATFORM_ADDR 0x82006070L
#define CSR_INFO_PLATFORM_PLATFORM_SIZE 8
static inline unsigned long long int info_platform_platform_read(void) {
	unsigned long long int r = csr_readl(0x82006070L);
	r <<= 8;
	r |= csr_readl(0x82006074L);
	r <<= 8;
	r |= csr_readl(0x82006078L);
	r <<= 8;
	r |= csr_readl(0x8200607cL);
	r <<= 8;
	r |= csr_readl(0x82006080L);
	r <<= 8;
	r |= csr_readl(0x82006084L);
	r <<= 8;
	r |= csr_readl(0x82006088L);
	r <<= 8;
	r |= csr_readl(0x8200608cL);
	return r;
}
#define CSR_INFO_PLATFORM_TARGET_ADDR 0x82006090L
#define CSR_INFO_PLATFORM_TARGET_SIZE 8
static inline unsigned long long int info_platform_target_read(void) {
	unsigned long long int r = csr_readl(0x82006090L);
	r <<= 8;
	r |= csr_readl(0x82006094L);
	r <<= 8;
	r |= csr_readl(0x82006098L);
	r <<= 8;
	r |= csr_readl(0x8200609cL);
	r <<= 8;
	r |= csr_readl(0x820060a0L);
	r <<= 8;
	r |= csr_readl(0x820060a4L);
	r <<= 8;
	r |= csr_readl(0x820060a8L);
	r <<= 8;
	r |= csr_readl(0x820060acL);
	return r;
}

/* sdram */
#define CSR_SDRAM_BASE 0x82004000L
#define CSR_SDRAM_DFII_CONTROL_ADDR 0x82004000L
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline unsigned char sdram_dfii_control_read(void) {
	unsigned char r = csr_readl(0x82004000L);
	return r;
}
static inline void sdram_dfii_control_write(unsigned char value) {
	csr_writel(value, 0x82004000L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR 0x82004004L
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_read(void) {
	unsigned char r = csr_readl(0x82004004L);
	return r;
}
static inline void sdram_dfii_pi0_command_write(unsigned char value) {
	csr_writel(value, 0x82004004L);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR 0x82004008L
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi0_command_issue_read(void) {
	unsigned char r = csr_readl(0x82004008L);
	return r;
}
static inline void sdram_dfii_pi0_command_issue_write(unsigned char value) {
	csr_writel(value, 0x82004008L);
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR 0x8200400cL
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi0_address_read(void) {
	unsigned short int r = csr_readl(0x8200400cL);
	r <<= 8;
	r |= csr_readl(0x82004010L);
	return r;
}
static inline void sdram_dfii_pi0_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0x8200400cL);
	csr_writel(value, 0x82004010L);
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR 0x82004014L
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi0_baddress_read(void) {
	unsigned char r = csr_readl(0x82004014L);
	return r;
}
static inline void sdram_dfii_pi0_baddress_write(unsigned char value) {
	csr_writel(value, 0x82004014L);
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR 0x82004018L
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi0_wrdata_read(void) {
	unsigned int r = csr_readl(0x82004018L);
	r <<= 8;
	r |= csr_readl(0x8200401cL);
	r <<= 8;
	r |= csr_readl(0x82004020L);
	r <<= 8;
	r |= csr_readl(0x82004024L);
	return r;
}
static inline void sdram_dfii_pi0_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0x82004018L);
	csr_writel(value >> 16, 0x8200401cL);
	csr_writel(value >> 8, 0x82004020L);
	csr_writel(value, 0x82004024L);
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR 0x82004028L
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi0_rddata_read(void) {
	unsigned int r = csr_readl(0x82004028L);
	r <<= 8;
	r |= csr_readl(0x8200402cL);
	r <<= 8;
	r |= csr_readl(0x82004030L);
	r <<= 8;
	r |= csr_readl(0x82004034L);
	return r;
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR 0x82004038L
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline unsigned char sdram_dfii_pi1_command_read(void) {
	unsigned char r = csr_readl(0x82004038L);
	return r;
}
static inline void sdram_dfii_pi1_command_write(unsigned char value) {
	csr_writel(value, 0x82004038L);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR 0x8200403cL
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline unsigned char sdram_dfii_pi1_command_issue_read(void) {
	unsigned char r = csr_readl(0x8200403cL);
	return r;
}
static inline void sdram_dfii_pi1_command_issue_write(unsigned char value) {
	csr_writel(value, 0x8200403cL);
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR 0x82004040L
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 2
static inline unsigned short int sdram_dfii_pi1_address_read(void) {
	unsigned short int r = csr_readl(0x82004040L);
	r <<= 8;
	r |= csr_readl(0x82004044L);
	return r;
}
static inline void sdram_dfii_pi1_address_write(unsigned short int value) {
	csr_writel(value >> 8, 0x82004040L);
	csr_writel(value, 0x82004044L);
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR 0x82004048L
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline unsigned char sdram_dfii_pi1_baddress_read(void) {
	unsigned char r = csr_readl(0x82004048L);
	return r;
}
static inline void sdram_dfii_pi1_baddress_write(unsigned char value) {
	csr_writel(value, 0x82004048L);
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR 0x8200404cL
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 4
static inline unsigned int sdram_dfii_pi1_wrdata_read(void) {
	unsigned int r = csr_readl(0x8200404cL);
	r <<= 8;
	r |= csr_readl(0x82004050L);
	r <<= 8;
	r |= csr_readl(0x82004054L);
	r <<= 8;
	r |= csr_readl(0x82004058L);
	return r;
}
static inline void sdram_dfii_pi1_wrdata_write(unsigned int value) {
	csr_writel(value >> 24, 0x8200404cL);
	csr_writel(value >> 16, 0x82004050L);
	csr_writel(value >> 8, 0x82004054L);
	csr_writel(value, 0x82004058L);
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR 0x8200405cL
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 4
static inline unsigned int sdram_dfii_pi1_rddata_read(void) {
	unsigned int r = csr_readl(0x8200405cL);
	r <<= 8;
	r |= csr_readl(0x82004060L);
	r <<= 8;
	r |= csr_readl(0x82004064L);
	r <<= 8;
	r |= csr_readl(0x82004068L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_UPDATE_ADDR 0x8200406cL
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_UPDATE_SIZE 1
static inline unsigned char sdram_controller_bandwidth_update_read(void) {
	unsigned char r = csr_readl(0x8200406cL);
	return r;
}
static inline void sdram_controller_bandwidth_update_write(unsigned char value) {
	csr_writel(value, 0x8200406cL);
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NREADS_ADDR 0x82004070L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NREADS_SIZE 3
static inline unsigned int sdram_controller_bandwidth_nreads_read(void) {
	unsigned int r = csr_readl(0x82004070L);
	r <<= 8;
	r |= csr_readl(0x82004074L);
	r <<= 8;
	r |= csr_readl(0x82004078L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NWRITES_ADDR 0x8200407cL
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_NWRITES_SIZE 3
static inline unsigned int sdram_controller_bandwidth_nwrites_read(void) {
	unsigned int r = csr_readl(0x8200407cL);
	r <<= 8;
	r |= csr_readl(0x82004080L);
	r <<= 8;
	r |= csr_readl(0x82004084L);
	return r;
}
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_DATA_WIDTH_ADDR 0x82004088L
#define CSR_SDRAM_CONTROLLER_BANDWIDTH_DATA_WIDTH_SIZE 1
static inline unsigned char sdram_controller_bandwidth_data_width_read(void) {
	unsigned char r = csr_readl(0x82004088L);
	return r;
}

/* spiflash */
#define CSR_SPIFLASH_BASE 0x82005000L
#define CSR_SPIFLASH_BITBANG_ADDR 0x82005000L
#define CSR_SPIFLASH_BITBANG_SIZE 1
static inline unsigned char spiflash_bitbang_read(void) {
	unsigned char r = csr_readl(0x82005000L);
	return r;
}
static inline void spiflash_bitbang_write(unsigned char value) {
	csr_writel(value, 0x82005000L);
}
#define CSR_SPIFLASH_MISO_ADDR 0x82005004L
#define CSR_SPIFLASH_MISO_SIZE 1
static inline unsigned char spiflash_miso_read(void) {
	unsigned char r = csr_readl(0x82005004L);
	return r;
}
#define CSR_SPIFLASH_BITBANG_EN_ADDR 0x82005008L
#define CSR_SPIFLASH_BITBANG_EN_SIZE 1
static inline unsigned char spiflash_bitbang_en_read(void) {
	unsigned char r = csr_readl(0x82005008L);
	return r;
}
static inline void spiflash_bitbang_en_write(unsigned char value) {
	csr_writel(value, 0x82005008L);
}

/* timer0 */
#define CSR_TIMER0_BASE 0x82002800L
#define CSR_TIMER0_LOAD_ADDR 0x82002800L
#define CSR_TIMER0_LOAD_SIZE 4
static inline unsigned int timer0_load_read(void) {
	unsigned int r = csr_readl(0x82002800L);
	r <<= 8;
	r |= csr_readl(0x82002804L);
	r <<= 8;
	r |= csr_readl(0x82002808L);
	r <<= 8;
	r |= csr_readl(0x8200280cL);
	return r;
}
static inline void timer0_load_write(unsigned int value) {
	csr_writel(value >> 24, 0x82002800L);
	csr_writel(value >> 16, 0x82002804L);
	csr_writel(value >> 8, 0x82002808L);
	csr_writel(value, 0x8200280cL);
}
#define CSR_TIMER0_RELOAD_ADDR 0x82002810L
#define CSR_TIMER0_RELOAD_SIZE 4
static inline unsigned int timer0_reload_read(void) {
	unsigned int r = csr_readl(0x82002810L);
	r <<= 8;
	r |= csr_readl(0x82002814L);
	r <<= 8;
	r |= csr_readl(0x82002818L);
	r <<= 8;
	r |= csr_readl(0x8200281cL);
	return r;
}
static inline void timer0_reload_write(unsigned int value) {
	csr_writel(value >> 24, 0x82002810L);
	csr_writel(value >> 16, 0x82002814L);
	csr_writel(value >> 8, 0x82002818L);
	csr_writel(value, 0x8200281cL);
}
#define CSR_TIMER0_EN_ADDR 0x82002820L
#define CSR_TIMER0_EN_SIZE 1
static inline unsigned char timer0_en_read(void) {
	unsigned char r = csr_readl(0x82002820L);
	return r;
}
static inline void timer0_en_write(unsigned char value) {
	csr_writel(value, 0x82002820L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR 0x82002824L
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline unsigned char timer0_update_value_read(void) {
	unsigned char r = csr_readl(0x82002824L);
	return r;
}
static inline void timer0_update_value_write(unsigned char value) {
	csr_writel(value, 0x82002824L);
}
#define CSR_TIMER0_VALUE_ADDR 0x82002828L
#define CSR_TIMER0_VALUE_SIZE 4
static inline unsigned int timer0_value_read(void) {
	unsigned int r = csr_readl(0x82002828L);
	r <<= 8;
	r |= csr_readl(0x8200282cL);
	r <<= 8;
	r |= csr_readl(0x82002830L);
	r <<= 8;
	r |= csr_readl(0x82002834L);
	return r;
}
#define CSR_TIMER0_EV_STATUS_ADDR 0x82002838L
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline unsigned char timer0_ev_status_read(void) {
	unsigned char r = csr_readl(0x82002838L);
	return r;
}
static inline void timer0_ev_status_write(unsigned char value) {
	csr_writel(value, 0x82002838L);
}
#define CSR_TIMER0_EV_PENDING_ADDR 0x8200283cL
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline unsigned char timer0_ev_pending_read(void) {
	unsigned char r = csr_readl(0x8200283cL);
	return r;
}
static inline void timer0_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x8200283cL);
}
#define CSR_TIMER0_EV_ENABLE_ADDR 0x82002840L
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline unsigned char timer0_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82002840L);
	return r;
}
static inline void timer0_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82002840L);
}

/* uart */
#define CSR_UART_BASE 0x82001800L
#define CSR_UART_RXTX_ADDR 0x82001800L
#define CSR_UART_RXTX_SIZE 1
static inline unsigned char uart_rxtx_read(void) {
	unsigned char r = csr_readl(0x82001800L);
	return r;
}
static inline void uart_rxtx_write(unsigned char value) {
	csr_writel(value, 0x82001800L);
}
#define CSR_UART_TXFULL_ADDR 0x82001804L
#define CSR_UART_TXFULL_SIZE 1
static inline unsigned char uart_txfull_read(void) {
	unsigned char r = csr_readl(0x82001804L);
	return r;
}
#define CSR_UART_RXEMPTY_ADDR 0x82001808L
#define CSR_UART_RXEMPTY_SIZE 1
static inline unsigned char uart_rxempty_read(void) {
	unsigned char r = csr_readl(0x82001808L);
	return r;
}
#define CSR_UART_EV_STATUS_ADDR 0x8200180cL
#define CSR_UART_EV_STATUS_SIZE 1
static inline unsigned char uart_ev_status_read(void) {
	unsigned char r = csr_readl(0x8200180cL);
	return r;
}
static inline void uart_ev_status_write(unsigned char value) {
	csr_writel(value, 0x8200180cL);
}
#define CSR_UART_EV_PENDING_ADDR 0x82001810L
#define CSR_UART_EV_PENDING_SIZE 1
static inline unsigned char uart_ev_pending_read(void) {
	unsigned char r = csr_readl(0x82001810L);
	return r;
}
static inline void uart_ev_pending_write(unsigned char value) {
	csr_writel(value, 0x82001810L);
}
#define CSR_UART_EV_ENABLE_ADDR 0x82001814L
#define CSR_UART_EV_ENABLE_SIZE 1
static inline unsigned char uart_ev_enable_read(void) {
	unsigned char r = csr_readl(0x82001814L);
	return r;
}
static inline void uart_ev_enable_write(unsigned char value) {
	csr_writel(value, 0x82001814L);
}

/* uart_phy */
#define CSR_UART_PHY_BASE 0x82001000L
#define CSR_UART_PHY_TUNING_WORD_ADDR 0x82001000L
#define CSR_UART_PHY_TUNING_WORD_SIZE 4
static inline unsigned int uart_phy_tuning_word_read(void) {
	unsigned int r = csr_readl(0x82001000L);
	r <<= 8;
	r |= csr_readl(0x82001004L);
	r <<= 8;
	r |= csr_readl(0x82001008L);
	r <<= 8;
	r |= csr_readl(0x8200100cL);
	return r;
}
static inline void uart_phy_tuning_word_write(unsigned int value) {
	csr_writel(value >> 24, 0x82001000L);
	csr_writel(value >> 16, 0x82001004L);
	csr_writel(value >> 8, 0x82001008L);
	csr_writel(value, 0x8200100cL);
}

/* identifier_mem */
#define CSR_IDENTIFIER_MEM_BASE 0x82002000L

/* constants */
#define ETHMAC_INTERRUPT 3
static inline int ethmac_interrupt_read(void) {
	return 3;
}
#define NMI_INTERRUPT 0
static inline int nmi_interrupt_read(void) {
	return 0;
}
#define TIMER0_INTERRUPT 2
static inline int timer0_interrupt_read(void) {
	return 2;
}
#define UART_INTERRUPT 1
static inline int uart_interrupt_read(void) {
	return 1;
}
#define SPIFLASH_PAGE_SIZE 256
static inline int spiflash_page_size_read(void) {
	return 256;
}
#define SPIFLASH_SECTOR_SIZE 65536
static inline int spiflash_sector_size_read(void) {
	return 65536;
}
#define LOCALIP1 192
static inline int localip1_read(void) {
	return 192;
}
#define LOCALIP2 168
static inline int localip2_read(void) {
	return 168;
}
#define LOCALIP3 100
static inline int localip3_read(void) {
	return 100;
}
#define LOCALIP4 50
static inline int localip4_read(void) {
	return 50;
}
#define REMOTEIP1 192
static inline int remoteip1_read(void) {
	return 192;
}
#define REMOTEIP2 168
static inline int remoteip2_read(void) {
	return 168;
}
#define REMOTEIP3 100
static inline int remoteip3_read(void) {
	return 100;
}
#define REMOTEIP4 100
static inline int remoteip4_read(void) {
	return 100;
}
#define ETHMAC_RX_SLOTS 2
static inline int ethmac_rx_slots_read(void) {
	return 2;
}
#define ETHMAC_TX_SLOTS 2
static inline int ethmac_tx_slots_read(void) {
	return 2;
}
#define ETHMAC_SLOT_SIZE 2048
static inline int ethmac_slot_size_read(void) {
	return 2048;
}
#define CONFIG_CLOCK_FREQUENCY 75000000
static inline int config_clock_frequency_read(void) {
	return 75000000;
}
#define CONFIG_CPU_RESET_ADDR 0
static inline int config_cpu_reset_addr_read(void) {
	return 0;
}
#define CONFIG_CPU_TYPE "MOR1KX"
static inline const char * config_cpu_type_read(void) {
	return "MOR1KX";
}
#define CONFIG_CPU_TYPE_MOR1KX 1
static inline int config_cpu_type_mor1kx_read(void) {
	return 1;
}
#define CONFIG_CPU_VARIANT "LINUX"
static inline const char * config_cpu_variant_read(void) {
	return "LINUX";
}
#define CONFIG_CPU_VARIANT_LINUX 1
static inline int config_cpu_variant_linux_read(void) {
	return 1;
}
#define CONFIG_CSR_ALIGNMENT 32
static inline int config_csr_alignment_read(void) {
	return 32;
}
#define CONFIG_CSR_DATA_WIDTH 8
static inline int config_csr_data_width_read(void) {
	return 8;
}
#define CONFIG_L2_SIZE 8192
static inline int config_l2_size_read(void) {
	return 8192;
}

#endif
